
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/springs/plot_spring_system02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_springs_plot_spring_system02.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_springs_plot_spring_system02.py:


==========================================================
A first 1D spring system with nicer plots
==========================================================

.. code::

                o---/\/\/\---o---/\/\/\---o
   x---/\/\/\---o                         o--->
                o-------/\/\/\/\/\--------o

   x ... fixed node
   o ... free node (moving in x-direction)

This problem is mechanically identical to :ref:`sphx_glr_auto_examples_springs_plot_spring_system01.py`
but demonstrates the use of the *leader-follower* concept built into the :py:class:`Node` class.
We are using the concept to move springs apart in plots while maintaining the 1d kinematics.

.. note::

    **This example uses**

    * :ref:`System class`
    * :ref:`Spring class`
    * :ref:`Node class`

.. GENERATED FROM PYTHON SOURCE LINES 30-33

Initialization
----------------


.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: Python


    from femedu.domain import *
    from femedu.elements.linear import Spring








.. GENERATED FROM PYTHON SOURCE LINES 38-41

Building the model
-------------------
1. Initializing a model

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: Python


    model = System()








.. GENERATED FROM PYTHON SOURCE LINES 45-46

2. Defining nodes

.. GENERATED FROM PYTHON SOURCE LINES 46-62

.. code-block:: Python

    nd1  = Node(0.0, 0.0)
    nd2  = Node(2.0, 0.0)
    nd2a = Node(2.0, 1.0)
    nd2b = Node(2.0,-1.0)
    nd3  = Node(4.0, 1.0)
    nd4  = Node(6.0, 0.0)
    nd4a = Node(6.0, 1.0)
    nd4b = Node(6.0,-1.0)

    model.addNode(nd1, nd2, nd3, nd4)

    nd2a.make_follower(nd2)
    nd2b.make_follower(nd2)
    nd4a.make_follower(nd4)
    nd4b.make_follower(nd4)








.. GENERATED FROM PYTHON SOURCE LINES 63-64

3. Creating the springs

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: Python

    springA = Spring(nd1, nd2, 15)
    springB = Spring(nd2a, nd3, 10)
    springC = Spring(nd3, nd4a, 10)
    springD = Spring(nd2b, nd4b, 10)

    model.addElement(springA,springB,springC,springD)








.. GENERATED FROM PYTHON SOURCE LINES 72-73

4. Applying the essential boundary conditions

.. GENERATED FROM PYTHON SOURCE LINES 73-75

.. code-block:: Python

    nd1.fixDOF('ux')








.. GENERATED FROM PYTHON SOURCE LINES 76-77

5. Applying loads

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    nd4.setLoad([2.0],['ux'])








.. GENERATED FROM PYTHON SOURCE LINES 80-81

You may check your model any time by executing

.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: Python

    model.report()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System Analysis Report
    =======================

    Nodes:
    ---------------------
      Node_4:
          x:    [0.000 0.000]
          fix:  ['ux']
          u:    None
      Node_5:
          x:    [2.000 0.000]
          u:    None
      Node_8:
          x:    [4.000 1.000]
          u:    None
      Node_9:
          x:    [6.000 0.000]
          P:    [2.000]
          u:    None

    Elements:
    ---------------------
      Spring Elem_4: Node_4 to Node_5 with c=15
          length change:  delta = 0.0 
          internal force: force = 0.0
      Spring Elem_5: Node_6 to Node_8 with c=10
          length change:  delta = 0.0 
          internal force: force = 0.0
      Spring Elem_6: Node_8 to Node_10 with c=10
          length change:  delta = 0.0 
          internal force: force = 0.0
      Spring Elem_7: Node_7 to Node_11 with c=10
          length change:  delta = 0.0 
          internal force: force = 0.0





.. GENERATED FROM PYTHON SOURCE LINES 84-87

Performing the analysis
-----------------------
6. Assembly and solve

.. GENERATED FROM PYTHON SOURCE LINES 87-89

.. code-block:: Python

    model.solve()








.. GENERATED FROM PYTHON SOURCE LINES 90-91

7. Check out displacements and internal forces

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: Python

    model.report()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System Analysis Report
    =======================

    Nodes:
    ---------------------
      Node_4:
          x:    [0.000 0.000]
          fix:  ['ux']
          u:    [0.000]
      Node_5:
          x:    [2.000 0.000]
          u:    [0.133]
      Node_8:
          x:    [4.000 1.000]
          u:    [0.200]
      Node_9:
          x:    [6.000 0.000]
          P:    [2.000]
          u:    [0.267]

    Elements:
    ---------------------
      Spring Elem_4: Node_4 to Node_5 with c=15
          length change:  delta = 0.1333333333333333 
          internal force: force = 1.9999999999999996
      Spring Elem_5: Node_6 to Node_8 with c=10
          length change:  delta = 0.06666666666666671 
          internal force: force = 0.6666666666666671
      Spring Elem_6: Node_8 to Node_10 with c=10
          length change:  delta = 0.06666666666666665 
          internal force: force = 0.6666666666666665
      Spring Elem_7: Node_7 to Node_11 with c=10
          length change:  delta = 0.13333333333333336 
          internal force: force = 1.3333333333333335





.. GENERATED FROM PYTHON SOURCE LINES 94-95

We can also create a force plot, though it doesn't look all that nice in 1D

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: Python

    model.beamValuePlot('f')
    model.plot(factor=10.0)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/springs/images/sphx_glr_plot_spring_system02_001.png
         :alt: Axial Forces
         :srcset: /auto_examples/springs/images/sphx_glr_plot_spring_system02_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/springs/images/sphx_glr_plot_spring_system02_002.png
         :alt: Deformed System (magnification=10.00)
         :srcset: /auto_examples/springs/images/sphx_glr_plot_spring_system02_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.124 seconds)


.. _sphx_glr_download_auto_examples_springs_plot_spring_system02.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spring_system02.ipynb <plot_spring_system02.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spring_system02.py <plot_spring_system02.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_spring_system02.zip <plot_spring_system02.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
