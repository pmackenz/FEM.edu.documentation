
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate04.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate04.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate04.py:


==========================================================
Patch test for triangular plate under in-plane loading
==========================================================

PatchMesher test for the LinearTriangle (Constant Strain Triangle)

.. GENERATED FROM PYTHON SOURCE LINES 9-124

.. code-block:: default

    import math

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.elements.linear.Quad import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate04(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 7        # number of elements in the mesh
            Ny = 6        # number of elements in the mesh
            Lx = 100.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction

            # ========== setting material parameters ==============

            params = dict(
                E  = 20000.,    # Young's modulus
                nu = 0.250,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 10.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            model.setSolver(NewtonRaphsonSolver())

            # create reference points
            pt0 = (0,0)
            pt1 = (0.5*Lx,0)
            pt2 = (Lx,Ly)
            pt3 = (0,Ly)
            pt4 = (0.25*Lx, 0.0)
            pt5 = (0.65*Lx, Ly/2)
            pt6 = (0.55*Lx, Ly)
            pt7 = (0.0, Ly/2)
            pt8 = (0.325*Lx, 0.55*Ly)
            pt9 = (Lx,0.0)

            mesher1 = PatchMesher(model,
                                 pt0, pt1, pt2, pt3, # corner nodes
                                 pt4, pt5, pt6, pt7, # mid-side nodes
                                 pt8)                # center node
            #nodes1, elements1 = mesher1.triangleMesh(Nx, Ny, LinearTriangle, PlaneStress(params))
            nodes1, elements1 = mesher1.quadMesh(Nx, Ny, Quad, PlaneStress(params))

            mesher2 = TriPatchMesher(model,
                                     pt1, pt9, pt2, # corner nodes
                                     None, None, pt5, # mid-side nodes
                                     )
            #mesher2.shift(1.25*Lx, Ly/2)
            nodes2, elements2 = mesher2.triangleMesh(Ny, Triangle, PlaneStress(params))
            #nodes2, elements2 = mesher2.quadMesh(Ny, Triangle, PlaneStress(params))

            nodes    = nodes1    + nodes2
            elements = elements1 + elements2

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== complete the reference load ====

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node)
                    for elem in node.elements:
                        print('+', elem)
                        for face in elem.faces:
                            print(face)

            #model.report()

            model.plot(factor=0, title="undeformed system", filename="plate04_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(10.0)
            model.solve()

            #model.report()

            model.plot(factor=10., filename="plate04_deformed.png")









.. GENERATED FROM PYTHON SOURCE LINES 143-145

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 145-151

.. code-block:: default


    if __name__ == "__main__":
        ex = ExamplePlate04()
        ex.run()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate04_001.png
         :alt: undeformed system
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate04_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate04_002.png
         :alt: Deformed System (magnification=10.00)
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate04_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_55:
        x:    [100.  80.]
        u:    None
    + Quad_41: nodes ( Node_46 Node_47 Node_55 Node_54 )
        material: list
        strain (0): xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress (0): xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
        strain (1): xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress (1): xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
        strain (2): xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress (2): xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
        strain (3): xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress (3): xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_41.0
    Face2D_41.1
    Face2D_41.2
    Face2D_41.3
    Node_62:
        x:    [100.   0.]
        fix:  ['uy']
        u:    None
    + Triangle_47: nodes ( Node_61 Node_62 Node_68 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_47.0
    Face2D_47.1
    Face2D_47.2
    Node_68:
        x:    [100.          13.33333333]
        u:    None
    + Triangle_47: nodes ( Node_61 Node_62 Node_68 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_47.0
    Face2D_47.1
    Face2D_47.2
    + Triangle_56: nodes ( Node_67 Node_68 Node_73 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_56.0
    Face2D_56.1
    Face2D_56.2
    + Triangle_57: nodes ( Node_68 Node_67 Node_61 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_57.0
    Face2D_57.1
    Face2D_57.2
    Node_73:
        x:    [100.          26.66666667]
        u:    None
    + Triangle_56: nodes ( Node_67 Node_68 Node_73 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_56.0
    Face2D_56.1
    Face2D_56.2
    + Triangle_64: nodes ( Node_72 Node_73 Node_77 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_64.0
    Face2D_64.1
    Face2D_64.2
    + Triangle_65: nodes ( Node_73 Node_72 Node_67 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_65.0
    Face2D_65.1
    Face2D_65.2
    Node_77:
        x:    [100.  40.]
        u:    None
    + Triangle_64: nodes ( Node_72 Node_73 Node_77 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_64.0
    Face2D_64.1
    Face2D_64.2
    + Triangle_70: nodes ( Node_76 Node_77 Node_80 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_70.0
    Face2D_70.1
    Face2D_70.2
    + Triangle_71: nodes ( Node_77 Node_76 Node_72 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_71.0
    Face2D_71.1
    Face2D_71.2
    Node_80:
        x:    [100.          53.33333333]
        u:    None
    + Triangle_70: nodes ( Node_76 Node_77 Node_80 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_70.0
    Face2D_70.1
    Face2D_70.2
    + Triangle_74: nodes ( Node_79 Node_80 Node_82 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_74.0
    Face2D_74.1
    Face2D_74.2
    + Triangle_75: nodes ( Node_80 Node_79 Node_76 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_75.0
    Face2D_75.1
    Face2D_75.2
    Node_82:
        x:    [100.          66.66666667]
        u:    None
    + Triangle_74: nodes ( Node_79 Node_80 Node_82 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_74.0
    Face2D_74.1
    Face2D_74.2
    + Triangle_76: nodes ( Node_81 Node_82 Node_83 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_76.0
    Face2D_76.1
    Face2D_76.2
    + Triangle_77: nodes ( Node_82 Node_81 Node_79 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_77.0
    Face2D_77.1
    Face2D_77.2
    Node_83:
        x:    [100.  80.]
        u:    None
    + Triangle_76: nodes ( Node_81 Node_82 Node_83 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Face2D_76.0
    Face2D_76.1
    Face2D_76.2
    /usr/local/lib/python3.10/site-packages/matplotlib/quiver.py:635: RuntimeWarning: Mean of empty slice.
      amean = a.mean()
    /usr/local/lib/python3.10/site-packages/numpy/core/_methods.py:190: RuntimeWarning: invalid value encountered in double_scalars
      ret = ret.dtype.type(ret / rcount)
    norm of the out-of-balance force:   6.4627e-10
    +





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.477 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate04.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate04.py <plot_plate04.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate04.ipynb <plot_plate04.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
