
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate14_cantilever_large_disp.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate14_cantilever_large_disp.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate14_cantilever_large_disp.py:


==========================================================
Bending a cantilever beam using Quad elements
==========================================================

Using PatchMesher to model the beam

.. dropdown::  Background Theory

    This problem can be approximately validated using Bernoulli-Euler theory for
    small deformations. The given problem shall be modeled using

    .. list-table::
        :widths: 20 30 50
        :header-rows: 1

        * - parameter
          - value
          - description
        * - :math:`E`
          - 20000.
          - modulus of elasticity (in ksi)
        * - :math:`I`
          - 666.667
          - area moment of inertia (in :math:`inches^4`)
        * - :math:`L`
          - 120.
          - length of the cantilever (in inches)
        * - :math:`P`
          - 30.
          - force at :math:`x=L` (in kips)

    The general solution then yields

    .. math::
        v(x) = -\frac{P L^3}{6 EI}\left( \frac{x}{L} \right)^2\left( 3 - \frac{x}{L} \right)

    .. math::
        \theta(x) = \frac{d}{dx} v(x) = -\frac{P L^2}{2 EI}\left( \frac{x}{L} \right)\left( 2 - \frac{x}{L} \right)

    .. math::
        M(x) = EI \frac{d}{dx} \theta(x) = -\frac{P L}{6} \left( 1 - \frac{x}{L} \right)

    .. math::
        V(x) = \frac{d}{dx} M(x) = P

    The horizontal movement follows as (:math:`2^{nd}` order accurate)

    .. math::
        u(x) = \int\limits_{0}^{x} -\frac{1}{2} \theta^2(s) \: ds
             = -\frac{P^2 L^5}{120 (EI)^2}\left( \frac{x}{L} \right)^3\left( 20 - 15\:\frac{x}{L}+3 \left( \frac{x}{L} \right)^2 \right)



    .. list-table:: Reference values for a load factor of :math:`\lambda=1.0`
        :widths: 20 30 50
        :header-rows: 1

        * - variable
          - value
          - description
        * - :math:`u(L)`
          - -0.0083981
          - end displacement (in inches). :math:`u>0` means moving to the right.
        * - :math:`v(L)`
          - -1.296
          - end displacement (in inches). :math:`v>0` means moving up.



    .. list-table:: Reference values for a load factor of :math:`\lambda=10.0`
        :widths: 20 30 50
        :header-rows: 1

        * - variable
          - value
          - description
        * - :math:`u(L)`
          - -0.83981
          - end displacement (in inches). :math:`u>0` means moving to the right.
        * - :math:`v(L)`
          - -12.96
          - end displacement (in inches). :math:`v>0` means moving up.

.. GENERATED FROM PYTHON SOURCE LINES 87-187

.. code-block:: Python

    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver
    #from femedu.elements.linear import Quad
    from femedu.elements.finite import Quad
    from femedu.materials import PlaneStress
    from femedu.mesher import *


    class ExamplePlate14(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 24       # number of elements in the mesh
            Ny = 8        # number of elements in the mesh
            Lx = 120.0    # length of plate in the x-direction
            Ly =  20.0    # length of plate in the y-direction

            # ========== setting material parameters ==============

            params = dict(
                E  = 20000.,    # Young's modulus
                nu = 0.250,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  =  0.0         # uniform load normal to x=Lx
            py  =  0.0         # uniform load normal to y=Ly
            pxy =  1.5         # uniform shear load on x=L

            # ========== setting analysis parameters ==============

            target_load_level = 10.00    # reference load
            max_steps = 10               # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps+1)

            #
            # ==== Build the system model ====
            #

            model = System()
            model.setSolver(NewtonRaphsonSolver())

            # create nodes

            mesher = PatchMesher(model, (0.,0.),(Lx,0.),(Lx,Ly),(0.,Ly) )
            nodes, elements = mesher.quadMesh(Nx, Ny, Quad, PlaneStress(params))

            # define support(s)

            ## find nodes at x==0
            for node, _ in model.findNodesAlongLine((0.0, 0.0), (0.0, 1.0)):
                node.fixDOF('ux', 'uy')

            # ==== complete the reference load ====

            # the section at the right end
            for _, face in model.findFacesAlongLine((Lx, 0.0), (0.0, 1.0), orientation=+1):
                face.setLoad(px, -pxy)

            # durface loading on the top face
            for _, face in model.findFacesAlongLine((0.0, Ly), (1.0, 0.0), orientation=-1):
                face.setLoad(-py, 0.0)

            # find the node on the beam axis (y==Ly/2) at the end of the beam (x==Lx)
            end_node, _ = model.findNodesAt((Lx, Ly/2))[0]

            # set up a recorder
            model.initRecorder(variables=['ux','uy'], nodes=[end_node])
            model.startRecorder()

            model.plot(factor=0, title="undeformed system", filename="plate11_undeformed.png", show_bc=1, show_loads=1)

            for lf in load_levels:

                model.setLoadFactor(lf)
                model.solve(verbose=True)

                #model.report()


            model.plot(factor=1., filename=f"plate11_deformed_lf{lf:.2f}.png", show_bc=1, show_loads=1, show_reactions=1)

            model.valuePlot('sxx', show_mesh=True)
            model.valuePlot('sxy', show_mesh=True)

            # create a history plot for the end node

            model.historyPlot('lam', ['ux','uy'], nodes=[end_node,end_node])
            model.historyPlot(('ux',end_node), 'uy', node=end_node)









.. GENERATED FROM PYTHON SOURCE LINES 201-203

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 203-209

.. code-block:: Python


    if __name__ == "__main__":
        ex = ExamplePlate14()
        ex.run()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_001.png
         :alt: undeformed system
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_002.png
         :alt: Deformed System (magnification=1.00)
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_003.png
         :alt: Contours of '$\sigma_{xx}$'
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_004.png
         :alt: Contours of '$\sigma_{xy}$'
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_005.png
         :alt: Load History Plot
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_006.png
         :alt: Load History Plot
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate14_cantilever_large_disp_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    norm of the out-of-balance force:   1.2022e-09
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.7668e+01
    norm of the out-of-balance force:   1.2854e-02
    norm of the out-of-balance force:   2.4489e-09
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.7628e+01
    norm of the out-of-balance force:   1.2849e-02
    norm of the out-of-balance force:   1.1635e-08
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.7508e+01
    norm of the out-of-balance force:   1.2833e-02
    norm of the out-of-balance force:   4.1304e-08
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.7310e+01
    norm of the out-of-balance force:   1.2805e-02
    norm of the out-of-balance force:   8.9153e-08
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.7033e+01
    norm of the out-of-balance force:   1.2766e-02
    norm of the out-of-balance force:   1.5389e-07
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.6680e+01
    norm of the out-of-balance force:   1.2715e-02
    norm of the out-of-balance force:   2.3300e-07
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.6252e+01
    norm of the out-of-balance force:   1.2653e-02
    norm of the out-of-balance force:   3.2471e-07
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.5752e+01
    norm of the out-of-balance force:   1.2579e-02
    norm of the out-of-balance force:   4.2585e-07
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.5182e+01
    norm of the out-of-balance force:   1.2493e-02
    norm of the out-of-balance force:   5.3421e-07
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +
    norm of the out-of-balance force:   1.0270e+01
    norm of the out-of-balance force:   7.4544e+01
    norm of the out-of-balance force:   1.2394e-02
    norm of the out-of-balance force:   6.4640e-07
    Recorder.addData: 'stability' not initialized by the recorder: ignored
    +





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.402 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate14_cantilever_large_disp.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate14_cantilever_large_disp.ipynb <plot_plate14_cantilever_large_disp.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate14_cantilever_large_disp.py <plot_plate14_cantilever_large_disp.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_plate14_cantilever_large_disp.zip <plot_plate14_cantilever_large_disp.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
