
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate_element_modes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate_element_modes.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate_element_modes.py:


===============================================================
A square patch made of one quadrilateral plate elements
===============================================================

Basic implementation test with applied loads.
    Testing the tangent stiffness computation.

.. code::

    free   free
     ^     ^
     |     |
     3-----2 -> free
     |     | >
     |  a  | > (w = 1.0)
     |     | >
     0-----1 -> free

    width:  10.
    height: 10.

    Material parameters: St. Venant-Kirchhoff, plane stress
        E  = 10.0
        nu =  0.30
        t  =  1.0

    Element loads:
        node 0: [ 0.0, 0.0]
        node 1: [ 5.0, 0.0]
        node 2: [ 5.0, 0.0]
        node 3: [ 0.0, 0.0]

Author: Peter Mackenzie-Helnwein

.. GENERATED FROM PYTHON SOURCE LINES 36-77

.. code-block:: Python

    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver
    from femedu.elements.linear import Quad
    from femedu.materials import PlaneStress

    # -------------------------------------------------------------
    #   Example setup
    # -------------------------------------------------------------

    params = dict(
        E  = 10., # Young's modulus
        nu = 0.3,   # Poisson's ratio
        t  = 1.0,   # thickness of the plate
        fy = 1.e30  # yield stress
    )

    a = 10.     # length of the plate in the x-direction
    b = 10.     # length of the plate in the y-direction

    model = System()
    model.setSolver(NewtonRaphsonSolver())

    nd0 = Node( 0.0, 0.0)
    nd1 = Node(   a, 0.0)
    nd2 = Node(   a,   b)
    nd3 = Node( 0.0,   b)

    model.addNode(nd0, nd1, nd2, nd3)

    elemA = Quad(nd0, nd1, nd2, nd3, PlaneStress(params))

    model.addElement(elemA)

    elemA.setSurfaceLoad(face=1, pn=1.0)

    model.plot(factor=0.0, title="Undeformed system", show_bc=1)




.. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_001.png
   :alt: Undeformed system
   :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-82

We can have a quick look at the stiffness mode shapes using the
buckling-mode plotter.  These are simply eigenvalues and eigenvectors of Kt
at the current load level (0.0)


.. GENERATED FROM PYTHON SOURCE LINES 82-90

.. code-block:: Python

    model.setLoadFactor(0.0)
    model.solve()

    np.save('../../../Kplate.npy', model.solver.Kt)

    for k in range(8):
        model.plotBucklingMode(mode=k, factor=1.0)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_002.png
         :alt: Mode Shape for $ \lambda = -0.00 $
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_003.png
         :alt: Mode Shape for $ \lambda = 0.00 $
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_004.png
         :alt: Mode Shape for $ \lambda = 0.00 $
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_005.png
         :alt: Mode Shape for $ \lambda = 4.95 $
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_006.png
         :alt: Mode Shape for $ \lambda = 4.95 $
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_007.png
         :alt: Mode Shape for $ \lambda = 7.69 $
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_008.png
         :alt: Mode Shape for $ \lambda = 7.69 $
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_009.png
         :alt: Mode Shape for $ \lambda = 14.29 $
         :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_009.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    +




.. GENERATED FROM PYTHON SOURCE LINES 91-95

Note the three rigid body modes (lam=0.0). It can be shown that all three
are limear combinations of translations in x and y-directions and a
rigid body rotation.


.. GENERATED FROM PYTHON SOURCE LINES 97-100

Now it is time to add boundary conditions, apply loads
and check the convergence behavior.


.. GENERATED FROM PYTHON SOURCE LINES 100-108

.. code-block:: Python


    nd0.fixDOF('ux', 'uy')
    nd1.fixDOF('uy')
    nd3.fixDOF('ux')

    model.setLoadFactor(1.0)
    model.solve()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    +




.. GENERATED FROM PYTHON SOURCE LINES 109-110

The output shows that we do have a quadratic rate of convergence.

.. GENERATED FROM PYTHON SOURCE LINES 112-113

Let's finish off with a nice plot of the deformed system.

.. GENERATED FROM PYTHON SOURCE LINES 113-117

.. code-block:: Python


    model.plot(factor=1.0)

    model.report()



.. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_010.png
   :alt: Deformed System (magnification=1.00)
   :srcset: /auto_examples/plates/images/sphx_glr_plot_plate_element_modes_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System Analysis Report
    =======================

    Nodes:
    ---------------------
      Node_4149:
          x:    [0.000 0.000]
          fix:  ['ux', 'uy']
          u:    [0.000 0.000]
      Node_4150:
          x:    [10.000 0.000]
          fix:  ['uy']
          u:    [1.000 0.000]
      Node_4151:
          x:    [10.000 10.000]
          u:    [1.000 -0.300]
      Node_4152:
          x:    [0.000 10.000]
          fix:  ['ux']
          u:    [0.000 -0.300]

    Elements:
    ---------------------
      Quad_6814: nodes ( Node_4149 Node_4150 Node_4151 Node_4152 )
          material: list
          strain (0): xx=1.000e-01 yy=-3.000e-02 xy=-4.760e-18 zz=-2.100e-02
          stress (0): xx=1.000e+00 yy=4.148e-18 xy=-1.831e-17 zz=0.000e+00
          strain (1): xx=1.000e-01 yy=-3.000e-02 xy=8.302e-17 zz=-2.100e-02
          stress (1): xx=1.000e+00 yy=4.148e-18 xy=3.193e-16 zz=0.000e+00
          strain (2): xx=1.000e-01 yy=-3.000e-02 xy=-7.511e-17 zz=-2.100e-02
          stress (2): xx=1.000e+00 yy=4.148e-18 xy=-2.889e-16 zz=0.000e+00
          strain (3): xx=1.000e-01 yy=-3.000e-02 xy=1.857e-17 zz=-2.100e-02
          stress (3): xx=1.000e+00 yy=4.148e-18 xy=7.142e-17 zz=0.000e+00






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.646 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate_element_modes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate_element_modes.ipynb <plot_plate_element_modes.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate_element_modes.py <plot_plate_element_modes.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_plate_element_modes.zip <plot_plate_element_modes.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
