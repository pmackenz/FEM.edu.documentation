
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-131

.. code-block:: Python


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver, SparseSolver
    from femedu.elements.linear import Triangle
    from femedu.materials import PlaneStress
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 149-153

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 153-164

.. code-block:: Python
   :dedent: 1



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1483 [120 0]
    + Elem_1940 
    + Elem_1941 1941.2 : [[2 0]] 
    Node_1544 [120 2]
    + Elem_1941 1941.2 : [[2 0]] 
    + Elem_2060 
    + Elem_2061 2061.2 : [[2 1.42109e-14]] 
    Node_1605 [120 4]
    + Elem_2061 2061.2 : [[2 1.42109e-14]] 
    + Elem_2180 
    + Elem_2181 2181.2 : [[2 -1.42109e-14]] 
    Node_1666 [120 6]
    + Elem_2181 2181.2 : [[2 -1.42109e-14]] 
    + Elem_2300 
    + Elem_2301 2301.2 : [[2 0]] 
    Node_1727 [120 8]
    + Elem_2301 2301.2 : [[2 0]] 
    + Elem_2420 
    + Elem_2421 2421.2 : [[2 0]] 
    Node_1788 [120 10]
    + Elem_2421 2421.2 : [[2 0]] 
    + Elem_2540 
    + Elem_2541 2541.2 : [[2 0]] 
    Node_1849 [120 12]
    + Elem_2541 2541.2 : [[2 0]] 
    + Elem_2660 
    + Elem_2661 2661.2 : [[2 0]] 
    Node_1910 [120 14]
    + Elem_2661 2661.2 : [[2 0]] 
    + Elem_2780 
    + Elem_2781 2781.2 : [[2 0]] 
    Node_1971 [120 16]
    + Elem_2781 2781.2 : [[2 0]] 
    + Elem_2900 
    + Elem_2901 2901.2 : [[2 0]] 
    Node_2032 [120 18]
    + Elem_2901 2901.2 : [[2 0]] 
    + Elem_3020 
    + Elem_3021 3021.2 : [[2 0]] 
    Node_2093 [120 20]
    + Elem_3021 3021.2 : [[2 0]] 
    + Elem_3140 
    + Elem_3141 3141.2 : [[2 0]] 
    Node_2154 [120 22]
    + Elem_3141 3141.2 : [[2 0]] 
    + Elem_3260 
    + Elem_3261 3261.2 : [[2 0]] 
    Node_2215 [120 24]
    + Elem_3261 3261.2 : [[2 0]] 
    + Elem_3380 
    + Elem_3381 3381.2 : [[2 -1.42109e-14]] 
    Node_2276 [120 26]
    + Elem_3381 3381.2 : [[2 -1.42109e-14]] 
    + Elem_3500 
    + Elem_3501 3501.2 : [[2 2.84217e-14]] 
    Node_2337 [120 28]
    + Elem_3501 3501.2 : [[2 2.84217e-14]] 
    + Elem_3620 
    + Elem_3621 3621.2 : [[2 -1.42109e-14]] 
    Node_2398 [120 30]
    + Elem_3621 3621.2 : [[2 -1.42109e-14]] 
    + Elem_3740 
    + Elem_3741 3741.2 : [[2 1.42109e-14]] 
    Node_2459 [120 32]
    + Elem_3741 3741.2 : [[2 1.42109e-14]] 
    + Elem_3860 
    + Elem_3861 3861.2 : [[2 -1.42109e-14]] 
    Node_2520 [120 34]
    + Elem_3861 3861.2 : [[2 -1.42109e-14]] 
    + Elem_3980 
    + Elem_3981 3981.2 : [[2 -1.42109e-14]] 
    Node_2581 [120 36]
    + Elem_3981 3981.2 : [[2 -1.42109e-14]] 
    + Elem_4100 
    + Elem_4101 4101.2 : [[2 2.84217e-14]] 
    Node_2642 [120 38]
    + Elem_4101 4101.2 : [[2 2.84217e-14]] 
    + Elem_4220 
    + Elem_4221 4221.2 : [[2 -1.42109e-14]] 
    Node_2703 [120 40]
    + Elem_4221 4221.2 : [[2 -1.42109e-14]] 
    + Elem_4340 
    + Elem_4341 4341.2 : [[2 1.42109e-14]] 
    Node_2764 [120 42]
    + Elem_4341 4341.2 : [[2 1.42109e-14]] 
    + Elem_4460 
    + Elem_4461 4461.2 : [[2 -1.42109e-14]] 
    Node_2825 [120 44]
    + Elem_4461 4461.2 : [[2 -1.42109e-14]] 
    + Elem_4580 
    + Elem_4581 4581.2 : [[2 0]] 
    Node_2886 [120 46]
    + Elem_4581 4581.2 : [[2 0]] 
    + Elem_4700 
    + Elem_4701 4701.2 : [[2 0]] 
    Node_2947 [120 48]
    + Elem_4701 4701.2 : [[2 0]] 
    + Elem_4820 
    + Elem_4821 4821.2 : [[2 0]] 
    Node_3008 [120 50]
    + Elem_4821 4821.2 : [[2 0]] 
    + Elem_4940 
    + Elem_4941 4941.2 : [[2 0]] 
    Node_3069 [120 52]
    + Elem_4941 4941.2 : [[2 0]] 
    + Elem_5060 
    + Elem_5061 5061.2 : [[2 0]] 
    Node_3130 [120 54]
    + Elem_5061 5061.2 : [[2 0]] 
    + Elem_5180 
    + Elem_5181 5181.2 : [[2 0]] 
    Node_3191 [120 56]
    + Elem_5181 5181.2 : [[2 0]] 
    + Elem_5300 
    + Elem_5301 5301.2 : [[2 0]] 
    Node_3252 [120 58]
    + Elem_5301 5301.2 : [[2 0]] 
    + Elem_5420 
    + Elem_5421 5421.2 : [[2 0]] 
    Node_3313 [120 60]
    + Elem_5421 5421.2 : [[2 0]] 
    + Elem_5540 
    + Elem_5541 5541.2 : [[2 0]] 
    Node_3374 [120 62]
    + Elem_5541 5541.2 : [[2 0]] 
    + Elem_5660 
    + Elem_5661 5661.2 : [[2 0]] 
    Node_3435 [120 64]
    + Elem_5661 5661.2 : [[2 0]] 
    + Elem_5780 
    + Elem_5781 5781.2 : [[2 2.84217e-14]] 
    Node_3496 [120 66]
    + Elem_5781 5781.2 : [[2 2.84217e-14]] 
    + Elem_5900 
    + Elem_5901 5901.2 : [[2 -2.84217e-14]] 
    Node_3557 [120 68]
    + Elem_5901 5901.2 : [[2 -2.84217e-14]] 
    + Elem_6020 
    + Elem_6021 6021.2 : [[2 0]] 
    Node_3618 [120 70]
    + Elem_6021 6021.2 : [[2 0]] 
    + Elem_6140 
    + Elem_6141 6141.2 : [[2 0]] 
    Node_3679 [120 72]
    + Elem_6141 6141.2 : [[2 0]] 
    + Elem_6260 
    + Elem_6261 6261.2 : [[2 0]] 
    Node_3740 [120 74]
    + Elem_6261 6261.2 : [[2 0]] 
    + Elem_6380 
    + Elem_6381 6381.2 : [[2 0]] 
    Node_3801 [120 76]
    + Elem_6381 6381.2 : [[2 0]] 
    + Elem_6500 
    + Elem_6501 6501.2 : [[2 0]] 
    Node_3862 [120 78]
    + Elem_6501 6501.2 : [[2 0]] 
    + Elem_6620 
    + Elem_6621 6621.2 : [[2 0]] 
    Node_3923 [120 80]
    + Elem_6621 6621.2 : [[2 0]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 168-170

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 170-193

.. code-block:: Python
   :dedent: 1



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fri Jan  3 17:21:39 2025    profile_data_full.txt

             13346208 function calls (12793886 primitive calls) in 21.888 seconds

       Ordered by: cumulative time
       List reduced from 230 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   21.888   21.888 {built-in method builtins.exec}
            1    0.000    0.000   21.888   21.888 <string>:1(<module>)
            1    0.000    0.000   21.888   21.888 Example.py:20(run)
            1    0.008    0.008   21.888   21.888 plot_plate10.py:46(problem)
            1    0.000    0.000   19.770   19.770 System.py:500(solve)
            1    0.000    0.000   19.770   19.770 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000   17.527    4.382 NewtonRaphsonSolver.py:105(assemble)
            4    1.934    0.484   17.527    4.382 Solver.py:166(assemble)
        38400    3.967    0.000   10.643    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    8.788    4.394 Solver.py:395(checkResiduum)
        19200    0.273    0.000    7.073    0.000 Element.py:337(getStiffness)
        19200    0.169    0.000    6.030    0.000 Element.py:272(getForce)
        57600    0.922    0.000    3.653    0.000 Triangle.py:155(computeSurfaceLoads)
    619200/139200    1.242    0.000    3.079    0.000 copy.py:119(deepcopy)
            1    0.005    0.005    2.225    2.225 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    2.201    2.201    2.201    2.201 _linalg.py:320(solve)
       172800    0.860    0.000    2.079    0.000 Face2D.py:54(computeNodalForces)
            1    0.030    0.030    2.069    2.069 PatchMesher.py:99(triangleMesh)
        19200    0.133    0.000    1.673    0.000 Element.py:287(getLoad)
       249600    1.179    0.000    1.462    0.000 numeric.py:876(outer)


    Fri Jan  3 17:21:39 2025    profile_data_full.txt

             13346208 function calls (12793886 primitive calls) in 21.888 seconds

       Ordered by: internal time
       List reduced from 230 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        38400    3.967    0.000   10.643    0.000 Triangle.py:80(updateState)
            1    2.201    2.201    2.201    2.201 _linalg.py:320(solve)
            4    1.934    0.484   17.527    4.382 Solver.py:166(assemble)
    619200/139200    1.242    0.000    3.079    0.000 copy.py:119(deepcopy)
       249600    1.179    0.000    1.462    0.000 numeric.py:876(outer)
       927439    1.072    0.000    1.072    0.000 {built-in method numpy.array}
        57600    0.922    0.000    3.653    0.000 Triangle.py:155(computeSurfaceLoads)
        38401    0.874    0.000    1.129    0.000 PlaneStress.py:25(updateState)
       172800    0.860    0.000    2.079    0.000 Face2D.py:54(computeNodalForces)
       153600    0.579    0.000    1.381    0.000 Node.py:447(getDeformedPos)
       230400    0.543    0.000    0.776    0.000 Node.py:498(getIdx4Element)
       154008    0.484    0.000    0.769    0.000 Node.py:333(getDisp)
       172801    0.460    0.000    0.606    0.000 numeric.py:64(zeros_like)
       427200    0.388    0.000    0.551    0.000 copy.py:232(_keep_alive)
      1566170    0.381    0.000    0.381    0.000 {method 'append' of 'list' objects}
        19200    0.273    0.000    7.073    0.000 Element.py:337(getStiffness)
      1114254    0.266    0.000    0.266    0.000 {method 'get' of 'dict' objects}
       307200    0.258    0.000    0.258    0.000 {method '__deepcopy__' of 'numpy.ndarray' objects}
        43200    0.252    0.000    0.488    0.000 shape_base.py:220(vstack)
      1286521    0.224    0.000    0.224    0.000 {built-in method builtins.id}







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 21.929 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_plate10.zip <plot_plate10.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
