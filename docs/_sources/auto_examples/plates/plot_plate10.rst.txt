
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-132

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 150-154

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 154-165

.. code-block:: default



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_873 [120.   0.]
    + Elem_1057 
    + Elem_1058 1058.2 : [[2. 0.]] 
    Node_934 [120.   2.]
    + Elem_1058 1058.2 : [[2. 0.]] 
    + Elem_1177 
    + Elem_1178 1178.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_995 [120.   4.]
    + Elem_1178 1178.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_1297 
    + Elem_1298 1298.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1056 [120.   6.]
    + Elem_1298 1298.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1417 
    + Elem_1418 1418.2 : [[2. 0.]] 
    Node_1117 [120.   8.]
    + Elem_1418 1418.2 : [[2. 0.]] 
    + Elem_1537 
    + Elem_1538 1538.2 : [[2. 0.]] 
    Node_1178 [120.  10.]
    + Elem_1538 1538.2 : [[2. 0.]] 
    + Elem_1657 
    + Elem_1658 1658.2 : [[2. 0.]] 
    Node_1239 [120.  12.]
    + Elem_1658 1658.2 : [[2. 0.]] 
    + Elem_1777 
    + Elem_1778 1778.2 : [[2. 0.]] 
    Node_1300 [120.  14.]
    + Elem_1778 1778.2 : [[2. 0.]] 
    + Elem_1897 
    + Elem_1898 1898.2 : [[2. 0.]] 
    Node_1361 [120.  16.]
    + Elem_1898 1898.2 : [[2. 0.]] 
    + Elem_2017 
    + Elem_2018 2018.2 : [[2. 0.]] 
    Node_1422 [120.  18.]
    + Elem_2018 2018.2 : [[2. 0.]] 
    + Elem_2137 
    + Elem_2138 2138.2 : [[2. 0.]] 
    Node_1483 [120.  20.]
    + Elem_2138 2138.2 : [[2. 0.]] 
    + Elem_2257 
    + Elem_2258 2258.2 : [[2. 0.]] 
    Node_1544 [120.  22.]
    + Elem_2258 2258.2 : [[2. 0.]] 
    + Elem_2377 
    + Elem_2378 2378.2 : [[2. 0.]] 
    Node_1605 [120.  24.]
    + Elem_2378 2378.2 : [[2. 0.]] 
    + Elem_2497 
    + Elem_2498 2498.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1666 [120.  26.]
    + Elem_2498 2498.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2617 
    + Elem_2618 2618.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1727 [120.  28.]
    + Elem_2618 2618.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2737 
    + Elem_2738 2738.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1788 [120.  30.]
    + Elem_2738 2738.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2857 
    + Elem_2858 2858.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1849 [120.  32.]
    + Elem_2858 2858.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2977 
    + Elem_2978 2978.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1910 [120.  34.]
    + Elem_2978 2978.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3097 
    + Elem_3098 3098.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1971 [120.  36.]
    + Elem_3098 3098.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3217 
    + Elem_3218 3218.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2032 [120.  38.]
    + Elem_3218 3218.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3337 
    + Elem_3338 3338.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2093 [120.  40.]
    + Elem_3338 3338.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3457 
    + Elem_3458 3458.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2154 [120.  42.]
    + Elem_3458 3458.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3577 
    + Elem_3578 3578.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2215 [120.  44.]
    + Elem_3578 3578.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3697 
    + Elem_3698 3698.2 : [[2. 0.]] 
    Node_2276 [120.  46.]
    + Elem_3698 3698.2 : [[2. 0.]] 
    + Elem_3817 
    + Elem_3818 3818.2 : [[2. 0.]] 
    Node_2337 [120.  48.]
    + Elem_3818 3818.2 : [[2. 0.]] 
    + Elem_3937 
    + Elem_3938 3938.2 : [[2. 0.]] 
    Node_2398 [120.  50.]
    + Elem_3938 3938.2 : [[2. 0.]] 
    + Elem_4057 
    + Elem_4058 4058.2 : [[2. 0.]] 
    Node_2459 [120.  52.]
    + Elem_4058 4058.2 : [[2. 0.]] 
    + Elem_4177 
    + Elem_4178 4178.2 : [[2. 0.]] 
    Node_2520 [120.  54.]
    + Elem_4178 4178.2 : [[2. 0.]] 
    + Elem_4297 
    + Elem_4298 4298.2 : [[2. 0.]] 
    Node_2581 [120.  56.]
    + Elem_4298 4298.2 : [[2. 0.]] 
    + Elem_4417 
    + Elem_4418 4418.2 : [[2. 0.]] 
    Node_2642 [120.  58.]
    + Elem_4418 4418.2 : [[2. 0.]] 
    + Elem_4537 
    + Elem_4538 4538.2 : [[2. 0.]] 
    Node_2703 [120.  60.]
    + Elem_4538 4538.2 : [[2. 0.]] 
    + Elem_4657 
    + Elem_4658 4658.2 : [[2. 0.]] 
    Node_2764 [120.  62.]
    + Elem_4658 4658.2 : [[2. 0.]] 
    + Elem_4777 
    + Elem_4778 4778.2 : [[2. 0.]] 
    Node_2825 [120.  64.]
    + Elem_4778 4778.2 : [[2. 0.]] 
    + Elem_4897 
    + Elem_4898 4898.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2886 [120.  66.]
    + Elem_4898 4898.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_5017 
    + Elem_5018 5018.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_2947 [120.  68.]
    + Elem_5018 5018.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_5137 
    + Elem_5138 5138.2 : [[2. 0.]] 
    Node_3008 [120.  70.]
    + Elem_5138 5138.2 : [[2. 0.]] 
    + Elem_5257 
    + Elem_5258 5258.2 : [[2. 0.]] 
    Node_3069 [120.  72.]
    + Elem_5258 5258.2 : [[2. 0.]] 
    + Elem_5377 
    + Elem_5378 5378.2 : [[2. 0.]] 
    Node_3130 [120.  74.]
    + Elem_5378 5378.2 : [[2. 0.]] 
    + Elem_5497 
    + Elem_5498 5498.2 : [[2. 0.]] 
    Node_3191 [120.  76.]
    + Elem_5498 5498.2 : [[2. 0.]] 
    + Elem_5617 
    + Elem_5618 5618.2 : [[2. 0.]] 
    Node_3252 [120.  78.]
    + Elem_5618 5618.2 : [[2. 0.]] 
    + Elem_5737 
    + Elem_5738 5738.2 : [[2. 0.]] 
    Node_3313 [120.  80.]
    + Elem_5738 5738.2 : [[2. 0.]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 169-171

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 171-194

.. code-block:: default



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Thu May 11 14:38:02 2023    profile_data_full.txt

             7755938 function calls (7211005 primitive calls) in 13.764 seconds

       Ordered by: cumulative time
       List reduced from 283 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   13.780   13.780 {built-in method builtins.exec}
            1    0.000    0.000   13.780   13.780 <string>:1(<module>)
            1    0.018    0.018   13.780   13.780 Example.py:20(run)
            1    0.007    0.007   13.763   13.763 plot_plate10.py:47(problem)
            1    0.000    0.000   10.569   10.569 System.py:283(solve)
            1    0.000    0.000   10.569   10.569 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000    9.557    2.389 NewtonRaphsonSolver.py:105(assemble)
            4    1.840    0.460    9.557    2.389 Solver.py:152(assemble)
        19200    0.080    0.000    5.662    0.000 Element.py:225(getForce)
        19200    1.988    0.000    5.582    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    4.724    2.362 Solver.py:371(checkResiduum)
    602900/322289    0.549    0.000    3.391    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
            1    0.054    0.054    3.109    3.109 PatchMesher.py:99(triangleMesh)
        38400    0.464    0.000    2.858    0.000 Triangle.py:155(computeSurfaceLoads)
         4800    0.239    0.000    1.829    0.000 Triangle.py:10(__init__)
       115200    0.615    0.000    1.467    0.000 Face2D.py:54(computeNodalForces)
        19200    0.028    0.000    1.348    0.000 Element.py:234(getLoad)
    254400/4800    0.415    0.000    1.116    0.000 copy.py:128(deepcopy)
         4800    0.184    0.000    1.034    0.000 copy.py:259(_reconstruct)
       153600    0.098    0.000    1.005    0.000 <__array_function__ internals>:177(outer)


    Thu May 11 14:38:02 2023    profile_data_full.txt

             7755938 function calls (7211005 primitive calls) in 13.764 seconds

       Ordered by: internal time
       List reduced from 283 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    1.988    0.000    5.582    0.000 Triangle.py:80(updateState)
            4    1.840    0.460    9.557    2.389 Solver.py:152(assemble)
            1    0.986    0.986    0.986    0.986 linalg.py:320(solve)
       639031    0.689    0.000    0.689    0.000 {built-in method numpy.array}
       153600    0.688    0.000    0.800    0.000 numeric.py:857(outer)
       115200    0.615    0.000    1.467    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.549    0.000    3.391    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.488    0.000    0.681    0.000 Node.py:398(getIdx4Element)
        38400    0.464    0.000    2.858    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.450    0.000    0.569    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.415    0.000    1.116    0.000 copy.py:128(deepcopy)
        76800    0.307    0.000    0.592    0.000 Node.py:360(getDeformedPos)
         4800    0.239    0.000    1.829    0.000 Triangle.py:10(__init__)
        14400    0.229    0.000    0.479    0.000 Face2D.py:16(initialize)
         4800    0.184    0.000    1.034    0.000 copy.py:259(_reconstruct)
        76800    0.180    0.000    0.272    0.000 Node.py:267(getDisp)
       115201    0.173    0.000    0.671    0.000 numeric.py:76(zeros_like)
         4800    0.158    0.000    0.234    0.000 linalg.py:483(inv)
    19200/4800    0.139    0.000    0.792    0.000 copy.py:227(_deepcopy_dict)
        14400    0.136    0.000    0.705    0.000 Face2D.py:13(__init__)







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.828 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
