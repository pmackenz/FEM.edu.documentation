
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-131

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver, SparseSolver
    from femedu.elements.linear import Triangle
    from femedu.materials import PlaneStress
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 149-153

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 153-164

.. code-block:: default



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1149 [120.   0.]
    + Elem_1452 
    + Elem_1453 1453.2 : [[2. 0.]] 
    Node_1210 [120.   2.]
    + Elem_1453 1453.2 : [[2. 0.]] 
    + Elem_1572 
    + Elem_1573 1573.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1271 [120.   4.]
    + Elem_1573 1573.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_1692 
    + Elem_1693 1693.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1332 [120.   6.]
    + Elem_1693 1693.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1812 
    + Elem_1813 1813.2 : [[2. 0.]] 
    Node_1393 [120.   8.]
    + Elem_1813 1813.2 : [[2. 0.]] 
    + Elem_1932 
    + Elem_1933 1933.2 : [[2. 0.]] 
    Node_1454 [120.  10.]
    + Elem_1933 1933.2 : [[2. 0.]] 
    + Elem_2052 
    + Elem_2053 2053.2 : [[2. 0.]] 
    Node_1515 [120.  12.]
    + Elem_2053 2053.2 : [[2. 0.]] 
    + Elem_2172 
    + Elem_2173 2173.2 : [[2. 0.]] 
    Node_1576 [120.  14.]
    + Elem_2173 2173.2 : [[2. 0.]] 
    + Elem_2292 
    + Elem_2293 2293.2 : [[2. 0.]] 
    Node_1637 [120.  16.]
    + Elem_2293 2293.2 : [[2. 0.]] 
    + Elem_2412 
    + Elem_2413 2413.2 : [[2. 0.]] 
    Node_1698 [120.  18.]
    + Elem_2413 2413.2 : [[2. 0.]] 
    + Elem_2532 
    + Elem_2533 2533.2 : [[2. 0.]] 
    Node_1759 [120.  20.]
    + Elem_2533 2533.2 : [[2. 0.]] 
    + Elem_2652 
    + Elem_2653 2653.2 : [[2. 0.]] 
    Node_1820 [120.  22.]
    + Elem_2653 2653.2 : [[2. 0.]] 
    + Elem_2772 
    + Elem_2773 2773.2 : [[2. 0.]] 
    Node_1881 [120.  24.]
    + Elem_2773 2773.2 : [[2. 0.]] 
    + Elem_2892 
    + Elem_2893 2893.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1942 [120.  26.]
    + Elem_2893 2893.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3012 
    + Elem_3013 3013.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2003 [120.  28.]
    + Elem_3013 3013.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3132 
    + Elem_3133 3133.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2064 [120.  30.]
    + Elem_3133 3133.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3252 
    + Elem_3253 3253.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2125 [120.  32.]
    + Elem_3253 3253.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3372 
    + Elem_3373 3373.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2186 [120.  34.]
    + Elem_3373 3373.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3492 
    + Elem_3493 3493.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2247 [120.  36.]
    + Elem_3493 3493.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3612 
    + Elem_3613 3613.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2308 [120.  38.]
    + Elem_3613 3613.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3732 
    + Elem_3733 3733.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2369 [120.  40.]
    + Elem_3733 3733.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3852 
    + Elem_3853 3853.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2430 [120.  42.]
    + Elem_3853 3853.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3972 
    + Elem_3973 3973.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2491 [120.  44.]
    + Elem_3973 3973.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_4092 
    + Elem_4093 4093.2 : [[2. 0.]] 
    Node_2552 [120.  46.]
    + Elem_4093 4093.2 : [[2. 0.]] 
    + Elem_4212 
    + Elem_4213 4213.2 : [[2. 0.]] 
    Node_2613 [120.  48.]
    + Elem_4213 4213.2 : [[2. 0.]] 
    + Elem_4332 
    + Elem_4333 4333.2 : [[2. 0.]] 
    Node_2674 [120.  50.]
    + Elem_4333 4333.2 : [[2. 0.]] 
    + Elem_4452 
    + Elem_4453 4453.2 : [[2. 0.]] 
    Node_2735 [120.  52.]
    + Elem_4453 4453.2 : [[2. 0.]] 
    + Elem_4572 
    + Elem_4573 4573.2 : [[2. 0.]] 
    Node_2796 [120.  54.]
    + Elem_4573 4573.2 : [[2. 0.]] 
    + Elem_4692 
    + Elem_4693 4693.2 : [[2. 0.]] 
    Node_2857 [120.  56.]
    + Elem_4693 4693.2 : [[2. 0.]] 
    + Elem_4812 
    + Elem_4813 4813.2 : [[2. 0.]] 
    Node_2918 [120.  58.]
    + Elem_4813 4813.2 : [[2. 0.]] 
    + Elem_4932 
    + Elem_4933 4933.2 : [[2. 0.]] 
    Node_2979 [120.  60.]
    + Elem_4933 4933.2 : [[2. 0.]] 
    + Elem_5052 
    + Elem_5053 5053.2 : [[2. 0.]] 
    Node_3040 [120.  62.]
    + Elem_5053 5053.2 : [[2. 0.]] 
    + Elem_5172 
    + Elem_5173 5173.2 : [[2. 0.]] 
    Node_3101 [120.  64.]
    + Elem_5173 5173.2 : [[2. 0.]] 
    + Elem_5292 
    + Elem_5293 5293.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_3162 [120.  66.]
    + Elem_5293 5293.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_5412 
    + Elem_5413 5413.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_3223 [120.  68.]
    + Elem_5413 5413.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_5532 
    + Elem_5533 5533.2 : [[2. 0.]] 
    Node_3284 [120.  70.]
    + Elem_5533 5533.2 : [[2. 0.]] 
    + Elem_5652 
    + Elem_5653 5653.2 : [[2. 0.]] 
    Node_3345 [120.  72.]
    + Elem_5653 5653.2 : [[2. 0.]] 
    + Elem_5772 
    + Elem_5773 5773.2 : [[2. 0.]] 
    Node_3406 [120.  74.]
    + Elem_5773 5773.2 : [[2. 0.]] 
    + Elem_5892 
    + Elem_5893 5893.2 : [[2. 0.]] 
    Node_3467 [120.  76.]
    + Elem_5893 5893.2 : [[2. 0.]] 
    + Elem_6012 
    + Elem_6013 6013.2 : [[2. 0.]] 
    Node_3528 [120.  78.]
    + Elem_6013 6013.2 : [[2. 0.]] 
    + Elem_6132 
    + Elem_6133 6133.2 : [[2. 0.]] 
    Node_3589 [120.  80.]
    + Elem_6133 6133.2 : [[2. 0.]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 168-170

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 170-193

.. code-block:: default



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Tue Jul 25 16:34:50 2023    profile_data_full.txt

             7765541 function calls (7220608 primitive calls) in 11.374 seconds

       Ordered by: cumulative time
       List reduced from 286 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   11.386   11.386 {built-in method builtins.exec}
            1    0.000    0.000   11.386   11.386 <string>:1(<module>)
            1    0.000    0.000   11.386   11.386 Example.py:20(run)
            1    0.005    0.005   11.386   11.386 plot_plate10.py:46(problem)
            1    0.000    0.000    9.549    9.549 System.py:313(solve)
            1    0.000    0.000    9.549    9.549 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000    8.627    2.157 NewtonRaphsonSolver.py:105(assemble)
            4    1.665    0.416    8.627    2.157 Solver.py:166(assemble)
        19200    0.073    0.000    5.077    0.000 Element.py:237(getForce)
        19200    1.782    0.000    5.005    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    4.283    2.141 Solver.py:385(checkResiduum)
    602900/322289    0.467    0.000    2.919    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        38400    0.427    0.000    2.623    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.024    0.024    1.774    1.774 PatchMesher.py:99(triangleMesh)
       115200    0.565    0.000    1.345    0.000 Face2D.py:54(computeNodalForces)
        19200    0.028    0.000    1.253    0.000 Element.py:246(getLoad)
         4800    0.112    0.000    0.990    0.000 Triangle.py:10(__init__)
       153600    0.089    0.000    0.918    0.000 <__array_function__ internals>:177(outer)
            1    0.002    0.002    0.908    0.908 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    0.000    0.000    0.895    0.895 <__array_function__ internals>:177(solve)


    Tue Jul 25 16:34:50 2023    profile_data_full.txt

             7765541 function calls (7220608 primitive calls) in 11.374 seconds

       Ordered by: internal time
       List reduced from 286 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    1.782    0.000    5.005    0.000 Triangle.py:80(updateState)
            4    1.665    0.416    8.627    2.157 Solver.py:166(assemble)
            1    0.895    0.895    0.895    0.895 linalg.py:320(solve)
       153600    0.625    0.000    0.730    0.000 numeric.py:857(outer)
       639031    0.587    0.000    0.587    0.000 {built-in method numpy.array}
       115200    0.565    0.000    1.345    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.467    0.000    2.919    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.438    0.000    0.610    0.000 Node.py:411(getIdx4Element)
        38400    0.427    0.000    2.623    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.383    0.000    0.496    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.314    0.000    0.671    0.000 copy.py:128(deepcopy)
        76800    0.272    0.000    0.539    0.000 Node.py:360(getDeformedPos)
        76800    0.172    0.000    0.255    0.000 Node.py:267(getDisp)
       115201    0.160    0.000    0.615    0.000 numeric.py:76(zeros_like)
        24000    0.147    0.000    0.163    0.000 shape_base.py:81(atleast_2d)
        14400    0.124    0.000    0.257    0.000 Face2D.py:16(initialize)
         4800    0.112    0.000    0.990    0.000 Triangle.py:10(__init__)
        14400    0.094    0.000    0.355    0.000 Faces.py:10(__init__)
       115201    0.091    0.000    0.222    0.000 <__array_function__ internals>:177(empty_like)
       153600    0.089    0.000    0.918    0.000 <__array_function__ internals>:177(outer)







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.436 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
