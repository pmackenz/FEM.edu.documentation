
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-131

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver, SparseSolver
    from femedu.elements.linear import Triangle
    from femedu.materials import PlaneStress
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 149-153

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 153-164

.. code-block:: default



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_734 [120.   0.]
    + Elem_922 
    + Elem_923 923.2 : [[2. 0.]] 
    Node_795 [120.   2.]
    + Elem_923 923.2 : [[2. 0.]] 
    + Elem_1042 
    + Elem_1043 1043.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_856 [120.   4.]
    + Elem_1043 1043.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_1162 
    + Elem_1163 1163.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_917 [120.   6.]
    + Elem_1163 1163.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1282 
    + Elem_1283 1283.2 : [[2. 0.]] 
    Node_978 [120.   8.]
    + Elem_1283 1283.2 : [[2. 0.]] 
    + Elem_1402 
    + Elem_1403 1403.2 : [[2. 0.]] 
    Node_1039 [120.  10.]
    + Elem_1403 1403.2 : [[2. 0.]] 
    + Elem_1522 
    + Elem_1523 1523.2 : [[2. 0.]] 
    Node_1100 [120.  12.]
    + Elem_1523 1523.2 : [[2. 0.]] 
    + Elem_1642 
    + Elem_1643 1643.2 : [[2. 0.]] 
    Node_1161 [120.  14.]
    + Elem_1643 1643.2 : [[2. 0.]] 
    + Elem_1762 
    + Elem_1763 1763.2 : [[2. 0.]] 
    Node_1222 [120.  16.]
    + Elem_1763 1763.2 : [[2. 0.]] 
    + Elem_1882 
    + Elem_1883 1883.2 : [[2. 0.]] 
    Node_1283 [120.  18.]
    + Elem_1883 1883.2 : [[2. 0.]] 
    + Elem_2002 
    + Elem_2003 2003.2 : [[2. 0.]] 
    Node_1344 [120.  20.]
    + Elem_2003 2003.2 : [[2. 0.]] 
    + Elem_2122 
    + Elem_2123 2123.2 : [[2. 0.]] 
    Node_1405 [120.  22.]
    + Elem_2123 2123.2 : [[2. 0.]] 
    + Elem_2242 
    + Elem_2243 2243.2 : [[2. 0.]] 
    Node_1466 [120.  24.]
    + Elem_2243 2243.2 : [[2. 0.]] 
    + Elem_2362 
    + Elem_2363 2363.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1527 [120.  26.]
    + Elem_2363 2363.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2482 
    + Elem_2483 2483.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1588 [120.  28.]
    + Elem_2483 2483.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2602 
    + Elem_2603 2603.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1649 [120.  30.]
    + Elem_2603 2603.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2722 
    + Elem_2723 2723.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1710 [120.  32.]
    + Elem_2723 2723.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2842 
    + Elem_2843 2843.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1771 [120.  34.]
    + Elem_2843 2843.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2962 
    + Elem_2963 2963.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1832 [120.  36.]
    + Elem_2963 2963.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3082 
    + Elem_3083 3083.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1893 [120.  38.]
    + Elem_3083 3083.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3202 
    + Elem_3203 3203.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1954 [120.  40.]
    + Elem_3203 3203.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3322 
    + Elem_3323 3323.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2015 [120.  42.]
    + Elem_3323 3323.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3442 
    + Elem_3443 3443.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2076 [120.  44.]
    + Elem_3443 3443.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3562 
    + Elem_3563 3563.2 : [[2. 0.]] 
    Node_2137 [120.  46.]
    + Elem_3563 3563.2 : [[2. 0.]] 
    + Elem_3682 
    + Elem_3683 3683.2 : [[2. 0.]] 
    Node_2198 [120.  48.]
    + Elem_3683 3683.2 : [[2. 0.]] 
    + Elem_3802 
    + Elem_3803 3803.2 : [[2. 0.]] 
    Node_2259 [120.  50.]
    + Elem_3803 3803.2 : [[2. 0.]] 
    + Elem_3922 
    + Elem_3923 3923.2 : [[2. 0.]] 
    Node_2320 [120.  52.]
    + Elem_3923 3923.2 : [[2. 0.]] 
    + Elem_4042 
    + Elem_4043 4043.2 : [[2. 0.]] 
    Node_2381 [120.  54.]
    + Elem_4043 4043.2 : [[2. 0.]] 
    + Elem_4162 
    + Elem_4163 4163.2 : [[2. 0.]] 
    Node_2442 [120.  56.]
    + Elem_4163 4163.2 : [[2. 0.]] 
    + Elem_4282 
    + Elem_4283 4283.2 : [[2. 0.]] 
    Node_2503 [120.  58.]
    + Elem_4283 4283.2 : [[2. 0.]] 
    + Elem_4402 
    + Elem_4403 4403.2 : [[2. 0.]] 
    Node_2564 [120.  60.]
    + Elem_4403 4403.2 : [[2. 0.]] 
    + Elem_4522 
    + Elem_4523 4523.2 : [[2. 0.]] 
    Node_2625 [120.  62.]
    + Elem_4523 4523.2 : [[2. 0.]] 
    + Elem_4642 
    + Elem_4643 4643.2 : [[2. 0.]] 
    Node_2686 [120.  64.]
    + Elem_4643 4643.2 : [[2. 0.]] 
    + Elem_4762 
    + Elem_4763 4763.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2747 [120.  66.]
    + Elem_4763 4763.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4882 
    + Elem_4883 4883.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_2808 [120.  68.]
    + Elem_4883 4883.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_5002 
    + Elem_5003 5003.2 : [[2. 0.]] 
    Node_2869 [120.  70.]
    + Elem_5003 5003.2 : [[2. 0.]] 
    + Elem_5122 
    + Elem_5123 5123.2 : [[2. 0.]] 
    Node_2930 [120.  72.]
    + Elem_5123 5123.2 : [[2. 0.]] 
    + Elem_5242 
    + Elem_5243 5243.2 : [[2. 0.]] 
    Node_2991 [120.  74.]
    + Elem_5243 5243.2 : [[2. 0.]] 
    + Elem_5362 
    + Elem_5363 5363.2 : [[2. 0.]] 
    Node_3052 [120.  76.]
    + Elem_5363 5363.2 : [[2. 0.]] 
    + Elem_5482 
    + Elem_5483 5483.2 : [[2. 0.]] 
    Node_3113 [120.  78.]
    + Elem_5483 5483.2 : [[2. 0.]] 
    + Elem_5602 
    + Elem_5603 5603.2 : [[2. 0.]] 
    Node_3174 [120.  80.]
    + Elem_5603 5603.2 : [[2. 0.]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 168-170

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 170-193

.. code-block:: default



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Thu May 11 21:31:43 2023    profile_data_full.txt

             7765538 function calls (7220605 primitive calls) in 20.353 seconds

       Ordered by: cumulative time
       List reduced from 283 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   20.373   20.373 {built-in method builtins.exec}
            1    0.000    0.000   20.373   20.373 <string>:1(<module>)
            1    0.019    0.019   20.373   20.373 Example.py:20(run)
            1    0.008    0.008   20.354   20.354 plot_plate10.py:46(problem)
            1    0.000    0.000   16.801   16.801 System.py:283(solve)
            1    0.000    0.000   16.801   16.801 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000   14.385    3.596 NewtonRaphsonSolver.py:105(assemble)
            4    2.791    0.698   14.385    3.596 Solver.py:152(assemble)
        19200    0.126    0.000    8.534    0.000 Element.py:225(getForce)
        19200    2.956    0.000    8.408    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    7.235    3.618 Solver.py:371(checkResiduum)
    602900/322289    0.786    0.000    6.090    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        38400    0.696    0.000    4.279    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.051    0.051    3.444    3.444 PatchMesher.py:99(triangleMesh)
            1    0.003    0.003    2.399    2.399 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    0.000    0.000    2.379    2.379 <__array_function__ internals>:177(solve)
            1    2.379    2.379    2.379    2.379 linalg.py:320(solve)
       115200    0.911    0.000    2.205    0.000 Face2D.py:54(computeNodalForces)
         4800    0.225    0.000    2.114    0.000 Triangle.py:10(__init__)
        19200    0.043    0.000    2.002    0.000 Element.py:234(getLoad)


    Thu May 11 21:31:43 2023    profile_data_full.txt

             7765538 function calls (7220605 primitive calls) in 20.353 seconds

       Ordered by: internal time
       List reduced from 283 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    2.956    0.000    8.408    0.000 Triangle.py:80(updateState)
            4    2.791    0.698   14.385    3.596 Solver.py:152(assemble)
            1    2.379    2.379    2.379    2.379 linalg.py:320(solve)
       153600    1.054    0.000    1.220    0.000 numeric.py:857(outer)
       639031    0.981    0.000    0.981    0.000 {built-in method numpy.array}
       115200    0.911    0.000    2.205    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.786    0.000    6.090    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.725    0.000    1.017    0.000 Node.py:398(getIdx4Element)
        38400    0.696    0.000    4.279    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.688    0.000    0.867    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.511    0.000    1.144    0.000 copy.py:128(deepcopy)
        76800    0.455    0.000    0.884    0.000 Node.py:360(getDeformedPos)
         4800    0.394    0.000    0.465    0.000 linalg.py:483(inv)
        76800    0.274    0.000    0.410    0.000 Node.py:267(getDisp)
       115201    0.262    0.000    0.990    0.000 numeric.py:76(zeros_like)
        24000    0.239    0.000    0.266    0.000 shape_base.py:81(atleast_2d)
        14400    0.225    0.000    0.473    0.000 Face2D.py:16(initialize)
         4800    0.225    0.000    2.114    0.000 Triangle.py:10(__init__)
        14400    0.155    0.000    0.635    0.000 Faces.py:10(__init__)
       200334    0.151    0.000    0.151    0.000 {built-in method numpy.zeros}







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  20.438 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
