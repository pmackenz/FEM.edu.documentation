
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-131

.. code-block:: Python


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver, SparseSolver
    from femedu.elements.linear import Triangle
    from femedu.materials import PlaneStress
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 149-153

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 153-164

.. code-block:: Python
   :dedent: 1



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1487 [120.   0.]
    + Elem_1944 
    + Elem_1945 1945.2 : [[2. 0.]] 
    Node_1548 [120.   2.]
    + Elem_1945 1945.2 : [[2. 0.]] 
    + Elem_2064 
    + Elem_2065 2065.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1609 [120.   4.]
    + Elem_2065 2065.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2184 
    + Elem_2185 2185.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1670 [120.   6.]
    + Elem_2185 2185.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2304 
    + Elem_2305 2305.2 : [[2. 0.]] 
    Node_1731 [120.   8.]
    + Elem_2305 2305.2 : [[2. 0.]] 
    + Elem_2424 
    + Elem_2425 2425.2 : [[2. 0.]] 
    Node_1792 [120.  10.]
    + Elem_2425 2425.2 : [[2. 0.]] 
    + Elem_2544 
    + Elem_2545 2545.2 : [[2. 0.]] 
    Node_1853 [120.  12.]
    + Elem_2545 2545.2 : [[2. 0.]] 
    + Elem_2664 
    + Elem_2665 2665.2 : [[2. 0.]] 
    Node_1914 [120.  14.]
    + Elem_2665 2665.2 : [[2. 0.]] 
    + Elem_2784 
    + Elem_2785 2785.2 : [[2. 0.]] 
    Node_1975 [120.  16.]
    + Elem_2785 2785.2 : [[2. 0.]] 
    + Elem_2904 
    + Elem_2905 2905.2 : [[2. 0.]] 
    Node_2036 [120.  18.]
    + Elem_2905 2905.2 : [[2. 0.]] 
    + Elem_3024 
    + Elem_3025 3025.2 : [[2. 0.]] 
    Node_2097 [120.  20.]
    + Elem_3025 3025.2 : [[2. 0.]] 
    + Elem_3144 
    + Elem_3145 3145.2 : [[2. 0.]] 
    Node_2158 [120.  22.]
    + Elem_3145 3145.2 : [[2. 0.]] 
    + Elem_3264 
    + Elem_3265 3265.2 : [[2. 0.]] 
    Node_2219 [120.  24.]
    + Elem_3265 3265.2 : [[2. 0.]] 
    + Elem_3384 
    + Elem_3385 3385.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2280 [120.  26.]
    + Elem_3385 3385.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3504 
    + Elem_3505 3505.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2341 [120.  28.]
    + Elem_3505 3505.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3624 
    + Elem_3625 3625.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2402 [120.  30.]
    + Elem_3625 3625.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3744 
    + Elem_3745 3745.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2463 [120.  32.]
    + Elem_3745 3745.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3864 
    + Elem_3865 3865.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2524 [120.  34.]
    + Elem_3865 3865.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3984 
    + Elem_3985 3985.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2585 [120.  36.]
    + Elem_3985 3985.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_4104 
    + Elem_4105 4105.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2646 [120.  38.]
    + Elem_4105 4105.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4224 
    + Elem_4225 4225.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2707 [120.  40.]
    + Elem_4225 4225.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_4344 
    + Elem_4345 4345.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2768 [120.  42.]
    + Elem_4345 4345.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_4464 
    + Elem_4465 4465.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2829 [120.  44.]
    + Elem_4465 4465.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_4584 
    + Elem_4585 4585.2 : [[2. 0.]] 
    Node_2890 [120.  46.]
    + Elem_4585 4585.2 : [[2. 0.]] 
    + Elem_4704 
    + Elem_4705 4705.2 : [[2. 0.]] 
    Node_2951 [120.  48.]
    + Elem_4705 4705.2 : [[2. 0.]] 
    + Elem_4824 
    + Elem_4825 4825.2 : [[2. 0.]] 
    Node_3012 [120.  50.]
    + Elem_4825 4825.2 : [[2. 0.]] 
    + Elem_4944 
    + Elem_4945 4945.2 : [[2. 0.]] 
    Node_3073 [120.  52.]
    + Elem_4945 4945.2 : [[2. 0.]] 
    + Elem_5064 
    + Elem_5065 5065.2 : [[2. 0.]] 
    Node_3134 [120.  54.]
    + Elem_5065 5065.2 : [[2. 0.]] 
    + Elem_5184 
    + Elem_5185 5185.2 : [[2. 0.]] 
    Node_3195 [120.  56.]
    + Elem_5185 5185.2 : [[2. 0.]] 
    + Elem_5304 
    + Elem_5305 5305.2 : [[2. 0.]] 
    Node_3256 [120.  58.]
    + Elem_5305 5305.2 : [[2. 0.]] 
    + Elem_5424 
    + Elem_5425 5425.2 : [[2. 0.]] 
    Node_3317 [120.  60.]
    + Elem_5425 5425.2 : [[2. 0.]] 
    + Elem_5544 
    + Elem_5545 5545.2 : [[2. 0.]] 
    Node_3378 [120.  62.]
    + Elem_5545 5545.2 : [[2. 0.]] 
    + Elem_5664 
    + Elem_5665 5665.2 : [[2. 0.]] 
    Node_3439 [120.  64.]
    + Elem_5665 5665.2 : [[2. 0.]] 
    + Elem_5784 
    + Elem_5785 5785.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_3500 [120.  66.]
    + Elem_5785 5785.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_5904 
    + Elem_5905 5905.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_3561 [120.  68.]
    + Elem_5905 5905.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_6024 
    + Elem_6025 6025.2 : [[2. 0.]] 
    Node_3622 [120.  70.]
    + Elem_6025 6025.2 : [[2. 0.]] 
    + Elem_6144 
    + Elem_6145 6145.2 : [[2. 0.]] 
    Node_3683 [120.  72.]
    + Elem_6145 6145.2 : [[2. 0.]] 
    + Elem_6264 
    + Elem_6265 6265.2 : [[2. 0.]] 
    Node_3744 [120.  74.]
    + Elem_6265 6265.2 : [[2. 0.]] 
    + Elem_6384 
    + Elem_6385 6385.2 : [[2. 0.]] 
    Node_3805 [120.  76.]
    + Elem_6385 6385.2 : [[2. 0.]] 
    + Elem_6504 
    + Elem_6505 6505.2 : [[2. 0.]] 
    Node_3866 [120.  78.]
    + Elem_6505 6505.2 : [[2. 0.]] 
    + Elem_6624 
    + Elem_6625 6625.2 : [[2. 0.]] 
    Node_3927 [120.  80.]
    + Elem_6625 6625.2 : [[2. 0.]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 168-170

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 170-193

.. code-block:: Python
   :dedent: 1



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sat Dec 28 20:55:10 2024    profile_data_full.txt

             6497198 function calls (6232876 primitive calls) in 13.662 seconds

       Ordered by: cumulative time
       List reduced from 248 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   13.662   13.662 {built-in method builtins.exec}
            1    0.000    0.000   13.662   13.662 <string>:1(<module>)
            1    0.000    0.000   13.662   13.662 Example.py:20(run)
            1    0.008    0.008   13.662   13.662 plot_plate10.py:46(problem)
            1    0.000    0.000   11.557   11.557 System.py:313(solve)
            1    0.000    0.000   11.557   11.557 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000    9.316    2.329 NewtonRaphsonSolver.py:105(assemble)
            4    1.972    0.493    9.316    2.329 Solver.py:166(assemble)
        19200    0.085    0.000    5.470    0.000 Element.py:269(getForce)
        19200    2.031    0.000    5.385    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    4.715    2.357 Solver.py:388(checkResiduum)
        38400    0.582    0.000    2.329    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.004    0.004    2.223    2.223 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    2.202    2.202    2.203    2.203 _linalg.py:320(solve)
            1    0.031    0.031    2.044    2.044 PatchMesher.py:99(triangleMesh)
       115200    0.563    0.000    1.340    0.000 Face2D.py:54(computeNodalForces)
        19200    0.032    0.000    1.104    0.000 Element.py:278(getLoad)
         4800    0.170    0.000    1.037    0.000 Triangle.py:10(__init__)
    254400/4800    0.387    0.000    0.884    0.000 copy.py:119(deepcopy)
       153600    0.704    0.000    0.871    0.000 numeric.py:876(outer)


    Sat Dec 28 20:55:10 2024    profile_data_full.txt

             6497198 function calls (6232876 primitive calls) in 13.662 seconds

       Ordered by: internal time
       List reduced from 248 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    2.202    2.202    2.203    2.203 _linalg.py:320(solve)
        19200    2.031    0.000    5.385    0.000 Triangle.py:80(updateState)
            4    1.972    0.493    9.316    2.329 Solver.py:166(assemble)
       153600    0.704    0.000    0.871    0.000 numeric.py:876(outer)
       639439    0.693    0.000    0.693    0.000 {built-in method numpy.array}
        38400    0.582    0.000    2.329    0.000 Triangle.py:155(computeSurfaceLoads)
       115200    0.563    0.000    1.340    0.000 Face2D.py:54(computeNodalForces)
       230400    0.511    0.000    0.732    0.000 Node.py:467(getIdx4Element)
        19201    0.446    0.000    0.574    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.387    0.000    0.884    0.000 copy.py:119(deepcopy)
        76800    0.292    0.000    0.688    0.000 Node.py:416(getDeformedPos)
       115201    0.290    0.000    0.379    0.000 numeric.py:64(zeros_like)
        77208    0.242    0.000    0.379    0.000 Node.py:313(getDisp)
        14400    0.187    0.000    0.275    0.000 Face2D.py:16(initialize)
         4800    0.170    0.000    1.037    0.000 Triangle.py:10(__init__)
       567770    0.148    0.000    0.148    0.000 {method 'append' of 'list' objects}
        24000    0.145    0.000    0.276    0.000 shape_base.py:220(vstack)
    19200/4800    0.119    0.000    0.753    0.000 copy.py:218(_deepcopy_dict)
       307200    0.118    0.000    0.118    0.000 {method 'ravel' of 'numpy.ndarray' objects}
       519054    0.108    0.000    0.108    0.000 {method 'get' of 'dict' objects}







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.699 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_plate10.zip <plot_plate10.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
