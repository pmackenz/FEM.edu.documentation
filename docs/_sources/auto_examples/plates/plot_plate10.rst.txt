
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-131

.. code-block:: Python


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver, SparseSolver
    from femedu.elements.linear import Triangle
    from femedu.materials import PlaneStress
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 149-153

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 153-164

.. code-block:: Python
   :dedent: 1



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1422 [120.   0.]
    + Elem_1862 
    + Elem_1863 1863.2 : [[2. 0.]] 
    Node_1483 [120.   2.]
    + Elem_1863 1863.2 : [[2. 0.]] 
    + Elem_1982 
    + Elem_1983 1983.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1544 [120.   4.]
    + Elem_1983 1983.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2102 
    + Elem_2103 2103.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1605 [120.   6.]
    + Elem_2103 2103.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2222 
    + Elem_2223 2223.2 : [[2. 0.]] 
    Node_1666 [120.   8.]
    + Elem_2223 2223.2 : [[2. 0.]] 
    + Elem_2342 
    + Elem_2343 2343.2 : [[2. 0.]] 
    Node_1727 [120.  10.]
    + Elem_2343 2343.2 : [[2. 0.]] 
    + Elem_2462 
    + Elem_2463 2463.2 : [[2. 0.]] 
    Node_1788 [120.  12.]
    + Elem_2463 2463.2 : [[2. 0.]] 
    + Elem_2582 
    + Elem_2583 2583.2 : [[2. 0.]] 
    Node_1849 [120.  14.]
    + Elem_2583 2583.2 : [[2. 0.]] 
    + Elem_2702 
    + Elem_2703 2703.2 : [[2. 0.]] 
    Node_1910 [120.  16.]
    + Elem_2703 2703.2 : [[2. 0.]] 
    + Elem_2822 
    + Elem_2823 2823.2 : [[2. 0.]] 
    Node_1971 [120.  18.]
    + Elem_2823 2823.2 : [[2. 0.]] 
    + Elem_2942 
    + Elem_2943 2943.2 : [[2. 0.]] 
    Node_2032 [120.  20.]
    + Elem_2943 2943.2 : [[2. 0.]] 
    + Elem_3062 
    + Elem_3063 3063.2 : [[2. 0.]] 
    Node_2093 [120.  22.]
    + Elem_3063 3063.2 : [[2. 0.]] 
    + Elem_3182 
    + Elem_3183 3183.2 : [[2. 0.]] 
    Node_2154 [120.  24.]
    + Elem_3183 3183.2 : [[2. 0.]] 
    + Elem_3302 
    + Elem_3303 3303.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2215 [120.  26.]
    + Elem_3303 3303.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3422 
    + Elem_3423 3423.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2276 [120.  28.]
    + Elem_3423 3423.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3542 
    + Elem_3543 3543.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2337 [120.  30.]
    + Elem_3543 3543.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3662 
    + Elem_3663 3663.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2398 [120.  32.]
    + Elem_3663 3663.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3782 
    + Elem_3783 3783.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2459 [120.  34.]
    + Elem_3783 3783.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3902 
    + Elem_3903 3903.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2520 [120.  36.]
    + Elem_3903 3903.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_4022 
    + Elem_4023 4023.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2581 [120.  38.]
    + Elem_4023 4023.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4142 
    + Elem_4143 4143.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2642 [120.  40.]
    + Elem_4143 4143.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_4262 
    + Elem_4263 4263.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2703 [120.  42.]
    + Elem_4263 4263.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_4382 
    + Elem_4383 4383.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2764 [120.  44.]
    + Elem_4383 4383.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_4502 
    + Elem_4503 4503.2 : [[2. 0.]] 
    Node_2825 [120.  46.]
    + Elem_4503 4503.2 : [[2. 0.]] 
    + Elem_4622 
    + Elem_4623 4623.2 : [[2. 0.]] 
    Node_2886 [120.  48.]
    + Elem_4623 4623.2 : [[2. 0.]] 
    + Elem_4742 
    + Elem_4743 4743.2 : [[2. 0.]] 
    Node_2947 [120.  50.]
    + Elem_4743 4743.2 : [[2. 0.]] 
    + Elem_4862 
    + Elem_4863 4863.2 : [[2. 0.]] 
    Node_3008 [120.  52.]
    + Elem_4863 4863.2 : [[2. 0.]] 
    + Elem_4982 
    + Elem_4983 4983.2 : [[2. 0.]] 
    Node_3069 [120.  54.]
    + Elem_4983 4983.2 : [[2. 0.]] 
    + Elem_5102 
    + Elem_5103 5103.2 : [[2. 0.]] 
    Node_3130 [120.  56.]
    + Elem_5103 5103.2 : [[2. 0.]] 
    + Elem_5222 
    + Elem_5223 5223.2 : [[2. 0.]] 
    Node_3191 [120.  58.]
    + Elem_5223 5223.2 : [[2. 0.]] 
    + Elem_5342 
    + Elem_5343 5343.2 : [[2. 0.]] 
    Node_3252 [120.  60.]
    + Elem_5343 5343.2 : [[2. 0.]] 
    + Elem_5462 
    + Elem_5463 5463.2 : [[2. 0.]] 
    Node_3313 [120.  62.]
    + Elem_5463 5463.2 : [[2. 0.]] 
    + Elem_5582 
    + Elem_5583 5583.2 : [[2. 0.]] 
    Node_3374 [120.  64.]
    + Elem_5583 5583.2 : [[2. 0.]] 
    + Elem_5702 
    + Elem_5703 5703.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_3435 [120.  66.]
    + Elem_5703 5703.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_5822 
    + Elem_5823 5823.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_3496 [120.  68.]
    + Elem_5823 5823.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_5942 
    + Elem_5943 5943.2 : [[2. 0.]] 
    Node_3557 [120.  70.]
    + Elem_5943 5943.2 : [[2. 0.]] 
    + Elem_6062 
    + Elem_6063 6063.2 : [[2. 0.]] 
    Node_3618 [120.  72.]
    + Elem_6063 6063.2 : [[2. 0.]] 
    + Elem_6182 
    + Elem_6183 6183.2 : [[2. 0.]] 
    Node_3679 [120.  74.]
    + Elem_6183 6183.2 : [[2. 0.]] 
    + Elem_6302 
    + Elem_6303 6303.2 : [[2. 0.]] 
    Node_3740 [120.  76.]
    + Elem_6303 6303.2 : [[2. 0.]] 
    + Elem_6422 
    + Elem_6423 6423.2 : [[2. 0.]] 
    Node_3801 [120.  78.]
    + Elem_6423 6423.2 : [[2. 0.]] 
    + Elem_6542 
    + Elem_6543 6543.2 : [[2. 0.]] 
    Node_3862 [120.  80.]
    + Elem_6543 6543.2 : [[2. 0.]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 168-170

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 170-193

.. code-block:: Python
   :dedent: 1



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sun Apr 21 18:42:11 2024    profile_data_full.txt

             6567554 function calls (6303232 primitive calls) in 12.416 seconds

       Ordered by: cumulative time
       List reduced from 267 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   12.432   12.432 {built-in method builtins.exec}
            1    0.000    0.000   12.432   12.432 <string>:1(<module>)
            1    0.000    0.000   12.432   12.432 Example.py:20(run)
            1    0.007    0.007   12.431   12.431 plot_plate10.py:46(problem)
            1    0.000    0.000   10.169   10.169 System.py:313(solve)
            1    0.000    0.000   10.169   10.169 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000    9.163    2.291 NewtonRaphsonSolver.py:105(assemble)
            4    1.881    0.470    9.163    2.291 Solver.py:166(assemble)
        19200    0.080    0.000    5.371    0.000 Element.py:237(getForce)
        19200    1.962    0.000    5.291    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    4.544    2.272 Solver.py:388(checkResiduum)
        38400    0.478    0.000    2.477    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.030    0.030    2.182    2.182 PatchMesher.py:99(triangleMesh)
       115200    0.662    0.000    1.405    0.000 Face2D.py:54(computeNodalForces)
        19200    0.030    0.000    1.172    0.000 Element.py:246(getLoad)
         4800    0.139    0.000    1.150    0.000 Triangle.py:10(__init__)
            1    0.003    0.003    0.989    0.989 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    0.973    0.973    0.973    0.973 linalg.py:329(solve)
    254400/4800    0.435    0.000    0.899    0.000 copy.py:128(deepcopy)
       153600    0.726    0.000    0.851    0.000 numeric.py:841(outer)


    Sun Apr 21 18:42:11 2024    profile_data_full.txt

             6567554 function calls (6303232 primitive calls) in 12.416 seconds

       Ordered by: internal time
       List reduced from 267 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    1.962    0.000    5.291    0.000 Triangle.py:80(updateState)
            4    1.881    0.470    9.163    2.291 Solver.py:166(assemble)
            1    0.973    0.973    0.973    0.973 linalg.py:329(solve)
       153600    0.726    0.000    0.851    0.000 numeric.py:841(outer)
       115200    0.662    0.000    1.405    0.000 Face2D.py:54(computeNodalForces)
       639439    0.635    0.000    0.635    0.000 {built-in method numpy.array}
       230400    0.515    0.000    0.705    0.000 Node.py:467(getIdx4Element)
        38400    0.478    0.000    2.477    0.000 Triangle.py:155(computeSurfaceLoads)
    254400/4800    0.435    0.000    0.899    0.000 copy.py:128(deepcopy)
        19201    0.429    0.000    0.544    0.000 PlaneStress.py:25(updateState)
       115201    0.331    0.000    0.420    0.000 numeric.py:67(zeros_like)
        76800    0.306    0.000    0.648    0.000 Node.py:416(getDeformedPos)
        77208    0.227    0.000    0.328    0.000 Node.py:313(getDisp)
        14400    0.182    0.000    0.479    0.000 Faces.py:10(__init__)
        38400    0.146    0.000    0.586    0.000 Triangle.py:163(<listcomp>)
        14400    0.146    0.000    0.292    0.000 Face2D.py:16(initialize)
         4800    0.139    0.000    1.150    0.000 Triangle.py:10(__init__)
        24000    0.138    0.000    0.263    0.000 shape_base.py:219(vstack)
    19200/4800    0.135    0.000    0.763    0.000 copy.py:227(_deepcopy_dict)
        19200    0.096    0.000    0.120    0.000 twodim_base.py:158(eye)







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.471 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
