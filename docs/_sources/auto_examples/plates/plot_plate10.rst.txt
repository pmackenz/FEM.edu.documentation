
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-132

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 150-154

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 154-165

.. code-block:: default



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1059 [120.   0.]
    + Elem_1354 
    + Elem_1355 1355.2 : [[2. 0.]] 
    Node_1120 [120.   2.]
    + Elem_1355 1355.2 : [[2. 0.]] 
    + Elem_1474 
    + Elem_1475 1475.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1181 [120.   4.]
    + Elem_1475 1475.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_1594 
    + Elem_1595 1595.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1242 [120.   6.]
    + Elem_1595 1595.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1714 
    + Elem_1715 1715.2 : [[2. 0.]] 
    Node_1303 [120.   8.]
    + Elem_1715 1715.2 : [[2. 0.]] 
    + Elem_1834 
    + Elem_1835 1835.2 : [[2. 0.]] 
    Node_1364 [120.  10.]
    + Elem_1835 1835.2 : [[2. 0.]] 
    + Elem_1954 
    + Elem_1955 1955.2 : [[2. 0.]] 
    Node_1425 [120.  12.]
    + Elem_1955 1955.2 : [[2. 0.]] 
    + Elem_2074 
    + Elem_2075 2075.2 : [[2. 0.]] 
    Node_1486 [120.  14.]
    + Elem_2075 2075.2 : [[2. 0.]] 
    + Elem_2194 
    + Elem_2195 2195.2 : [[2. 0.]] 
    Node_1547 [120.  16.]
    + Elem_2195 2195.2 : [[2. 0.]] 
    + Elem_2314 
    + Elem_2315 2315.2 : [[2. 0.]] 
    Node_1608 [120.  18.]
    + Elem_2315 2315.2 : [[2. 0.]] 
    + Elem_2434 
    + Elem_2435 2435.2 : [[2. 0.]] 
    Node_1669 [120.  20.]
    + Elem_2435 2435.2 : [[2. 0.]] 
    + Elem_2554 
    + Elem_2555 2555.2 : [[2. 0.]] 
    Node_1730 [120.  22.]
    + Elem_2555 2555.2 : [[2. 0.]] 
    + Elem_2674 
    + Elem_2675 2675.2 : [[2. 0.]] 
    Node_1791 [120.  24.]
    + Elem_2675 2675.2 : [[2. 0.]] 
    + Elem_2794 
    + Elem_2795 2795.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1852 [120.  26.]
    + Elem_2795 2795.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2914 
    + Elem_2915 2915.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1913 [120.  28.]
    + Elem_2915 2915.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3034 
    + Elem_3035 3035.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1974 [120.  30.]
    + Elem_3035 3035.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3154 
    + Elem_3155 3155.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2035 [120.  32.]
    + Elem_3155 3155.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3274 
    + Elem_3275 3275.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2096 [120.  34.]
    + Elem_3275 3275.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3394 
    + Elem_3395 3395.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2157 [120.  36.]
    + Elem_3395 3395.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3514 
    + Elem_3515 3515.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2218 [120.  38.]
    + Elem_3515 3515.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3634 
    + Elem_3635 3635.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2279 [120.  40.]
    + Elem_3635 3635.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3754 
    + Elem_3755 3755.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2340 [120.  42.]
    + Elem_3755 3755.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3874 
    + Elem_3875 3875.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2401 [120.  44.]
    + Elem_3875 3875.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3994 
    + Elem_3995 3995.2 : [[2. 0.]] 
    Node_2462 [120.  46.]
    + Elem_3995 3995.2 : [[2. 0.]] 
    + Elem_4114 
    + Elem_4115 4115.2 : [[2. 0.]] 
    Node_2523 [120.  48.]
    + Elem_4115 4115.2 : [[2. 0.]] 
    + Elem_4234 
    + Elem_4235 4235.2 : [[2. 0.]] 
    Node_2584 [120.  50.]
    + Elem_4235 4235.2 : [[2. 0.]] 
    + Elem_4354 
    + Elem_4355 4355.2 : [[2. 0.]] 
    Node_2645 [120.  52.]
    + Elem_4355 4355.2 : [[2. 0.]] 
    + Elem_4474 
    + Elem_4475 4475.2 : [[2. 0.]] 
    Node_2706 [120.  54.]
    + Elem_4475 4475.2 : [[2. 0.]] 
    + Elem_4594 
    + Elem_4595 4595.2 : [[2. 0.]] 
    Node_2767 [120.  56.]
    + Elem_4595 4595.2 : [[2. 0.]] 
    + Elem_4714 
    + Elem_4715 4715.2 : [[2. 0.]] 
    Node_2828 [120.  58.]
    + Elem_4715 4715.2 : [[2. 0.]] 
    + Elem_4834 
    + Elem_4835 4835.2 : [[2. 0.]] 
    Node_2889 [120.  60.]
    + Elem_4835 4835.2 : [[2. 0.]] 
    + Elem_4954 
    + Elem_4955 4955.2 : [[2. 0.]] 
    Node_2950 [120.  62.]
    + Elem_4955 4955.2 : [[2. 0.]] 
    + Elem_5074 
    + Elem_5075 5075.2 : [[2. 0.]] 
    Node_3011 [120.  64.]
    + Elem_5075 5075.2 : [[2. 0.]] 
    + Elem_5194 
    + Elem_5195 5195.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_3072 [120.  66.]
    + Elem_5195 5195.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_5314 
    + Elem_5315 5315.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_3133 [120.  68.]
    + Elem_5315 5315.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_5434 
    + Elem_5435 5435.2 : [[2. 0.]] 
    Node_3194 [120.  70.]
    + Elem_5435 5435.2 : [[2. 0.]] 
    + Elem_5554 
    + Elem_5555 5555.2 : [[2. 0.]] 
    Node_3255 [120.  72.]
    + Elem_5555 5555.2 : [[2. 0.]] 
    + Elem_5674 
    + Elem_5675 5675.2 : [[2. 0.]] 
    Node_3316 [120.  74.]
    + Elem_5675 5675.2 : [[2. 0.]] 
    + Elem_5794 
    + Elem_5795 5795.2 : [[2. 0.]] 
    Node_3377 [120.  76.]
    + Elem_5795 5795.2 : [[2. 0.]] 
    + Elem_5914 
    + Elem_5915 5915.2 : [[2. 0.]] 
    Node_3438 [120.  78.]
    + Elem_5915 5915.2 : [[2. 0.]] 
    + Elem_6034 
    + Elem_6035 6035.2 : [[2. 0.]] 
    Node_3499 [120.  80.]
    + Elem_6035 6035.2 : [[2. 0.]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 169-171

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 171-194

.. code-block:: default



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Wed May 10 00:46:33 2023    profile_data_full.txt

             7755938 function calls (7211005 primitive calls) in 11.540 seconds

       Ordered by: cumulative time
       List reduced from 283 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   11.553   11.553 {built-in method builtins.exec}
            1    0.000    0.000   11.553   11.553 <string>:1(<module>)
            1    0.015    0.015   11.553   11.553 Example.py:20(run)
            1    0.006    0.006   11.539   11.539 plot_plate10.py:47(problem)
            1    0.000    0.000    9.681    9.681 System.py:283(solve)
            1    0.000    0.000    9.681    9.681 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000    8.762    2.190 NewtonRaphsonSolver.py:105(assemble)
            4    1.642    0.411    8.761    2.190 Solver.py:152(assemble)
        19200    0.072    0.000    5.187    0.000 Element.py:225(getForce)
        19200    1.797    0.000    5.114    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    4.419    2.210 Solver.py:371(checkResiduum)
    602900/322289    0.487    0.000    2.924    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        38400    0.430    0.000    2.694    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.024    0.024    1.780    1.780 PatchMesher.py:99(triangleMesh)
       115200    0.576    0.000    1.387    0.000 Face2D.py:54(computeNodalForces)
        19200    0.026    0.000    1.288    0.000 Element.py:234(getLoad)
       153600    0.094    0.000    0.958    0.000 <__array_function__ internals>:177(outer)
         4800    0.112    0.000    0.946    0.000 Triangle.py:10(__init__)
            1    0.003    0.003    0.908    0.908 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    0.000    0.000    0.894    0.894 <__array_function__ internals>:177(solve)


    Wed May 10 00:46:33 2023    profile_data_full.txt

             7755938 function calls (7211005 primitive calls) in 11.540 seconds

       Ordered by: internal time
       List reduced from 283 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    1.797    0.000    5.114    0.000 Triangle.py:80(updateState)
            4    1.642    0.411    8.761    2.190 Solver.py:152(assemble)
            1    0.894    0.894    0.894    0.894 linalg.py:320(solve)
       153600    0.657    0.000    0.762    0.000 numeric.py:857(outer)
       639031    0.594    0.000    0.594    0.000 {built-in method numpy.array}
       115200    0.576    0.000    1.387    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.487    0.000    2.924    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.446    0.000    0.622    0.000 Node.py:398(getIdx4Element)
        38400    0.430    0.000    2.694    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.412    0.000    0.525    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.313    0.000    0.721    0.000 copy.py:128(deepcopy)
        76800    0.281    0.000    0.552    0.000 Node.py:360(getDeformedPos)
        76800    0.172    0.000    0.259    0.000 Node.py:267(getDisp)
       115201    0.163    0.000    0.632    0.000 numeric.py:76(zeros_like)
        14400    0.122    0.000    0.257    0.000 Face2D.py:16(initialize)
         4800    0.112    0.000    0.946    0.000 Triangle.py:10(__init__)
       153600    0.094    0.000    0.958    0.000 <__array_function__ internals>:177(outer)
       115201    0.093    0.000    0.227    0.000 <__array_function__ internals>:177(empty_like)
        14400    0.088    0.000    0.391    0.000 Face2D.py:13(__init__)
       200334    0.087    0.000    0.087    0.000 {built-in method numpy.zeros}







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.603 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
