
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-132

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 150-154

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 154-165

.. code-block:: default



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1005 [120.   0.]
    + Elem_1268 
    + Elem_1269 1269.2 : [[2. 0.]] 
    Node_1066 [120.   2.]
    + Elem_1269 1269.2 : [[2. 0.]] 
    + Elem_1388 
    + Elem_1389 1389.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1127 [120.   4.]
    + Elem_1389 1389.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_1508 
    + Elem_1509 1509.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1188 [120.   6.]
    + Elem_1509 1509.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1628 
    + Elem_1629 1629.2 : [[2. 0.]] 
    Node_1249 [120.   8.]
    + Elem_1629 1629.2 : [[2. 0.]] 
    + Elem_1748 
    + Elem_1749 1749.2 : [[2. 0.]] 
    Node_1310 [120.  10.]
    + Elem_1749 1749.2 : [[2. 0.]] 
    + Elem_1868 
    + Elem_1869 1869.2 : [[2. 0.]] 
    Node_1371 [120.  12.]
    + Elem_1869 1869.2 : [[2. 0.]] 
    + Elem_1988 
    + Elem_1989 1989.2 : [[2. 0.]] 
    Node_1432 [120.  14.]
    + Elem_1989 1989.2 : [[2. 0.]] 
    + Elem_2108 
    + Elem_2109 2109.2 : [[2. 0.]] 
    Node_1493 [120.  16.]
    + Elem_2109 2109.2 : [[2. 0.]] 
    + Elem_2228 
    + Elem_2229 2229.2 : [[2. 0.]] 
    Node_1554 [120.  18.]
    + Elem_2229 2229.2 : [[2. 0.]] 
    + Elem_2348 
    + Elem_2349 2349.2 : [[2. 0.]] 
    Node_1615 [120.  20.]
    + Elem_2349 2349.2 : [[2. 0.]] 
    + Elem_2468 
    + Elem_2469 2469.2 : [[2. 0.]] 
    Node_1676 [120.  22.]
    + Elem_2469 2469.2 : [[2. 0.]] 
    + Elem_2588 
    + Elem_2589 2589.2 : [[2. 0.]] 
    Node_1737 [120.  24.]
    + Elem_2589 2589.2 : [[2. 0.]] 
    + Elem_2708 
    + Elem_2709 2709.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1798 [120.  26.]
    + Elem_2709 2709.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2828 
    + Elem_2829 2829.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1859 [120.  28.]
    + Elem_2829 2829.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2948 
    + Elem_2949 2949.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1920 [120.  30.]
    + Elem_2949 2949.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3068 
    + Elem_3069 3069.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1981 [120.  32.]
    + Elem_3069 3069.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3188 
    + Elem_3189 3189.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2042 [120.  34.]
    + Elem_3189 3189.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3308 
    + Elem_3309 3309.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2103 [120.  36.]
    + Elem_3309 3309.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3428 
    + Elem_3429 3429.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2164 [120.  38.]
    + Elem_3429 3429.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3548 
    + Elem_3549 3549.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2225 [120.  40.]
    + Elem_3549 3549.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3668 
    + Elem_3669 3669.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2286 [120.  42.]
    + Elem_3669 3669.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3788 
    + Elem_3789 3789.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2347 [120.  44.]
    + Elem_3789 3789.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3908 
    + Elem_3909 3909.2 : [[2. 0.]] 
    Node_2408 [120.  46.]
    + Elem_3909 3909.2 : [[2. 0.]] 
    + Elem_4028 
    + Elem_4029 4029.2 : [[2. 0.]] 
    Node_2469 [120.  48.]
    + Elem_4029 4029.2 : [[2. 0.]] 
    + Elem_4148 
    + Elem_4149 4149.2 : [[2. 0.]] 
    Node_2530 [120.  50.]
    + Elem_4149 4149.2 : [[2. 0.]] 
    + Elem_4268 
    + Elem_4269 4269.2 : [[2. 0.]] 
    Node_2591 [120.  52.]
    + Elem_4269 4269.2 : [[2. 0.]] 
    + Elem_4388 
    + Elem_4389 4389.2 : [[2. 0.]] 
    Node_2652 [120.  54.]
    + Elem_4389 4389.2 : [[2. 0.]] 
    + Elem_4508 
    + Elem_4509 4509.2 : [[2. 0.]] 
    Node_2713 [120.  56.]
    + Elem_4509 4509.2 : [[2. 0.]] 
    + Elem_4628 
    + Elem_4629 4629.2 : [[2. 0.]] 
    Node_2774 [120.  58.]
    + Elem_4629 4629.2 : [[2. 0.]] 
    + Elem_4748 
    + Elem_4749 4749.2 : [[2. 0.]] 
    Node_2835 [120.  60.]
    + Elem_4749 4749.2 : [[2. 0.]] 
    + Elem_4868 
    + Elem_4869 4869.2 : [[2. 0.]] 
    Node_2896 [120.  62.]
    + Elem_4869 4869.2 : [[2. 0.]] 
    + Elem_4988 
    + Elem_4989 4989.2 : [[2. 0.]] 
    Node_2957 [120.  64.]
    + Elem_4989 4989.2 : [[2. 0.]] 
    + Elem_5108 
    + Elem_5109 5109.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_3018 [120.  66.]
    + Elem_5109 5109.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_5228 
    + Elem_5229 5229.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_3079 [120.  68.]
    + Elem_5229 5229.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_5348 
    + Elem_5349 5349.2 : [[2. 0.]] 
    Node_3140 [120.  70.]
    + Elem_5349 5349.2 : [[2. 0.]] 
    + Elem_5468 
    + Elem_5469 5469.2 : [[2. 0.]] 
    Node_3201 [120.  72.]
    + Elem_5469 5469.2 : [[2. 0.]] 
    + Elem_5588 
    + Elem_5589 5589.2 : [[2. 0.]] 
    Node_3262 [120.  74.]
    + Elem_5589 5589.2 : [[2. 0.]] 
    + Elem_5708 
    + Elem_5709 5709.2 : [[2. 0.]] 
    Node_3323 [120.  76.]
    + Elem_5709 5709.2 : [[2. 0.]] 
    + Elem_5828 
    + Elem_5829 5829.2 : [[2. 0.]] 
    Node_3384 [120.  78.]
    + Elem_5829 5829.2 : [[2. 0.]] 
    + Elem_5948 
    + Elem_5949 5949.2 : [[2. 0.]] 
    Node_3445 [120.  80.]
    + Elem_5949 5949.2 : [[2. 0.]] 
    norm of the out-of-balance force:   2.5140e+02
    norm of the out-of-balance force:   1.4968e-10
    +




.. GENERATED FROM PYTHON SOURCE LINES 169-171

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 171-194

.. code-block:: default



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sun Apr 23 18:20:05 2023    profile_data_full.txt

             7717054 function calls (7172121 primitive calls) in 18.385 seconds

       Ordered by: cumulative time
       List reduced from 282 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   18.404   18.404 {built-in method builtins.exec}
            1    0.000    0.000   18.404   18.404 <string>:1(<module>)
            1    0.020    0.020   18.404   18.404 Example.py:20(run)
            1    0.008    0.008   18.385   18.385 plot_plate10.py:47(problem)
            1    0.000    0.000   15.508   15.508 System.py:305(solve)
            1    0.000    0.000   15.508   15.508 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000   13.974    3.493 NewtonRaphsonSolver.py:101(assemble)
            4    2.690    0.673   13.974    3.493 Solver.py:148(assemble)
        19200    0.115    0.000    8.269    0.000 Element.py:225(getForce)
        19200    2.894    0.000    8.154    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    7.013    3.507 Solver.py:359(checkResiduum)
    602900/322289    0.761    0.000    4.798    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        38400    0.685    0.000    4.213    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.040    0.040    2.765    2.765 PatchMesher.py:99(triangleMesh)
       115200    0.897    0.000    2.170    0.000 Face2D.py:54(computeNodalForces)
        19200    0.029    0.000    1.967    0.000 Element.py:234(getLoad)
         4800    0.189    0.000    1.594    0.000 Triangle.py:10(__init__)
            1    0.005    0.005    1.531    1.531 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    0.000    0.000    1.503    1.503 <__array_function__ internals>:177(solve)
            1    1.503    1.503    1.503    1.503 linalg.py:320(solve)


    Sun Apr 23 18:20:05 2023    profile_data_full.txt

             7717054 function calls (7172121 primitive calls) in 18.385 seconds

       Ordered by: internal time
       List reduced from 282 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    2.894    0.000    8.154    0.000 Triangle.py:80(updateState)
            4    2.690    0.673   13.974    3.493 Solver.py:148(assemble)
            1    1.503    1.503    1.503    1.503 linalg.py:320(solve)
       153600    1.037    0.000    1.201    0.000 numeric.py:857(outer)
       639031    0.947    0.000    0.947    0.000 {built-in method numpy.array}
       115200    0.897    0.000    2.170    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.761    0.000    4.798    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.721    0.000    1.009    0.000 Node.py:360(getIdx4Element)
        38400    0.685    0.000    4.213    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.658    0.000    0.829    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.454    0.000    1.008    0.000 copy.py:128(deepcopy)
        76800    0.438    0.000    0.849    0.000 Node.py:324(getDeformedPos)
        76800    0.260    0.000    0.395    0.000 Node.py:255(getDisp)
       115201    0.253    0.000    0.981    0.000 numeric.py:76(zeros_like)
        24000    0.219    0.000    0.245    0.000 shape_base.py:81(atleast_2d)
        14400    0.202    0.000    0.419    0.000 Face2D.py:16(initialize)
         4800    0.189    0.000    1.594    0.000 Triangle.py:10(__init__)
       153600    0.143    0.000    1.500    0.000 <__array_function__ internals>:177(outer)
       195332    0.143    0.000    0.143    0.000 {built-in method numpy.zeros}
        19200    0.141    0.000    0.178    0.000 twodim_base.py:162(eye)







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  18.459 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
