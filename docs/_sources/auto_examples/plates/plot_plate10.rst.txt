
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-132

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 150-154

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 154-165

.. code-block:: default



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1047 [120.   0.]
    + Elem_1348 
    + Elem_1349 1349.2 : [[2. 0.]] 
    Node_1108 [120.   2.]
    + Elem_1349 1349.2 : [[2. 0.]] 
    + Elem_1468 
    + Elem_1469 1469.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1169 [120.   4.]
    + Elem_1469 1469.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_1588 
    + Elem_1589 1589.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1230 [120.   6.]
    + Elem_1589 1589.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1708 
    + Elem_1709 1709.2 : [[2. 0.]] 
    Node_1291 [120.   8.]
    + Elem_1709 1709.2 : [[2. 0.]] 
    + Elem_1828 
    + Elem_1829 1829.2 : [[2. 0.]] 
    Node_1352 [120.  10.]
    + Elem_1829 1829.2 : [[2. 0.]] 
    + Elem_1948 
    + Elem_1949 1949.2 : [[2. 0.]] 
    Node_1413 [120.  12.]
    + Elem_1949 1949.2 : [[2. 0.]] 
    + Elem_2068 
    + Elem_2069 2069.2 : [[2. 0.]] 
    Node_1474 [120.  14.]
    + Elem_2069 2069.2 : [[2. 0.]] 
    + Elem_2188 
    + Elem_2189 2189.2 : [[2. 0.]] 
    Node_1535 [120.  16.]
    + Elem_2189 2189.2 : [[2. 0.]] 
    + Elem_2308 
    + Elem_2309 2309.2 : [[2. 0.]] 
    Node_1596 [120.  18.]
    + Elem_2309 2309.2 : [[2. 0.]] 
    + Elem_2428 
    + Elem_2429 2429.2 : [[2. 0.]] 
    Node_1657 [120.  20.]
    + Elem_2429 2429.2 : [[2. 0.]] 
    + Elem_2548 
    + Elem_2549 2549.2 : [[2. 0.]] 
    Node_1718 [120.  22.]
    + Elem_2549 2549.2 : [[2. 0.]] 
    + Elem_2668 
    + Elem_2669 2669.2 : [[2. 0.]] 
    Node_1779 [120.  24.]
    + Elem_2669 2669.2 : [[2. 0.]] 
    + Elem_2788 
    + Elem_2789 2789.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1840 [120.  26.]
    + Elem_2789 2789.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2908 
    + Elem_2909 2909.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1901 [120.  28.]
    + Elem_2909 2909.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3028 
    + Elem_3029 3029.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1962 [120.  30.]
    + Elem_3029 3029.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3148 
    + Elem_3149 3149.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2023 [120.  32.]
    + Elem_3149 3149.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3268 
    + Elem_3269 3269.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2084 [120.  34.]
    + Elem_3269 3269.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3388 
    + Elem_3389 3389.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2145 [120.  36.]
    + Elem_3389 3389.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3508 
    + Elem_3509 3509.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2206 [120.  38.]
    + Elem_3509 3509.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3628 
    + Elem_3629 3629.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2267 [120.  40.]
    + Elem_3629 3629.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3748 
    + Elem_3749 3749.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2328 [120.  42.]
    + Elem_3749 3749.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3868 
    + Elem_3869 3869.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2389 [120.  44.]
    + Elem_3869 3869.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3988 
    + Elem_3989 3989.2 : [[2. 0.]] 
    Node_2450 [120.  46.]
    + Elem_3989 3989.2 : [[2. 0.]] 
    + Elem_4108 
    + Elem_4109 4109.2 : [[2. 0.]] 
    Node_2511 [120.  48.]
    + Elem_4109 4109.2 : [[2. 0.]] 
    + Elem_4228 
    + Elem_4229 4229.2 : [[2. 0.]] 
    Node_2572 [120.  50.]
    + Elem_4229 4229.2 : [[2. 0.]] 
    + Elem_4348 
    + Elem_4349 4349.2 : [[2. 0.]] 
    Node_2633 [120.  52.]
    + Elem_4349 4349.2 : [[2. 0.]] 
    + Elem_4468 
    + Elem_4469 4469.2 : [[2. 0.]] 
    Node_2694 [120.  54.]
    + Elem_4469 4469.2 : [[2. 0.]] 
    + Elem_4588 
    + Elem_4589 4589.2 : [[2. 0.]] 
    Node_2755 [120.  56.]
    + Elem_4589 4589.2 : [[2. 0.]] 
    + Elem_4708 
    + Elem_4709 4709.2 : [[2. 0.]] 
    Node_2816 [120.  58.]
    + Elem_4709 4709.2 : [[2. 0.]] 
    + Elem_4828 
    + Elem_4829 4829.2 : [[2. 0.]] 
    Node_2877 [120.  60.]
    + Elem_4829 4829.2 : [[2. 0.]] 
    + Elem_4948 
    + Elem_4949 4949.2 : [[2. 0.]] 
    Node_2938 [120.  62.]
    + Elem_4949 4949.2 : [[2. 0.]] 
    + Elem_5068 
    + Elem_5069 5069.2 : [[2. 0.]] 
    Node_2999 [120.  64.]
    + Elem_5069 5069.2 : [[2. 0.]] 
    + Elem_5188 
    + Elem_5189 5189.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_3060 [120.  66.]
    + Elem_5189 5189.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_5308 
    + Elem_5309 5309.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_3121 [120.  68.]
    + Elem_5309 5309.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_5428 
    + Elem_5429 5429.2 : [[2. 0.]] 
    Node_3182 [120.  70.]
    + Elem_5429 5429.2 : [[2. 0.]] 
    + Elem_5548 
    + Elem_5549 5549.2 : [[2. 0.]] 
    Node_3243 [120.  72.]
    + Elem_5549 5549.2 : [[2. 0.]] 
    + Elem_5668 
    + Elem_5669 5669.2 : [[2. 0.]] 
    Node_3304 [120.  74.]
    + Elem_5669 5669.2 : [[2. 0.]] 
    + Elem_5788 
    + Elem_5789 5789.2 : [[2. 0.]] 
    Node_3365 [120.  76.]
    + Elem_5789 5789.2 : [[2. 0.]] 
    + Elem_5908 
    + Elem_5909 5909.2 : [[2. 0.]] 
    Node_3426 [120.  78.]
    + Elem_5909 5909.2 : [[2. 0.]] 
    + Elem_6028 
    + Elem_6029 6029.2 : [[2. 0.]] 
    Node_3487 [120.  80.]
    + Elem_6029 6029.2 : [[2. 0.]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 169-171

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 171-194

.. code-block:: default



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Wed Apr 26 13:02:04 2023    profile_data_full.txt

             7734237 function calls (7189304 primitive calls) in 14.373 seconds

       Ordered by: cumulative time
       List reduced from 283 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   14.387   14.387 {built-in method builtins.exec}
            1    0.000    0.000   14.387   14.387 <string>:1(<module>)
            1    0.022    0.022   14.387   14.387 Example.py:20(run)
            1    0.006    0.006   14.365   14.365 plot_plate10.py:47(problem)
            1    0.000    0.000   12.092   12.092 System.py:283(solve)
            1    0.000    0.000   12.092   12.092 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000   10.814    2.703 NewtonRaphsonSolver.py:105(assemble)
            4    2.204    0.551   10.814    2.703 Solver.py:152(assemble)
        19200    0.094    0.000    6.374    0.000 Element.py:225(getForce)
        19200    2.220    0.000    6.279    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    5.472    2.736 Solver.py:371(checkResiduum)
    602900/322289    0.590    0.000    3.686    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        38400    0.523    0.000    3.177    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.034    0.034    2.196    2.196 PatchMesher.py:99(triangleMesh)
       115200    0.677    0.000    1.624    0.000 Face2D.py:54(computeNodalForces)
        19200    0.023    0.000    1.461    0.000 Element.py:234(getLoad)
            1    0.003    0.003    1.262    1.262 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    0.000    0.000    1.246    1.246 <__array_function__ internals>:177(solve)
            1    1.246    1.246    1.246    1.246 linalg.py:320(solve)
         4800    0.146    0.000    1.212    0.000 Triangle.py:10(__init__)


    Wed Apr 26 13:02:04 2023    profile_data_full.txt

             7734237 function calls (7189304 primitive calls) in 14.373 seconds

       Ordered by: internal time
       List reduced from 283 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    2.220    0.000    6.279    0.000 Triangle.py:80(updateState)
            4    2.204    0.551   10.814    2.703 Solver.py:152(assemble)
            1    1.246    1.246    1.246    1.246 linalg.py:320(solve)
       153600    0.780    0.000    0.899    0.000 numeric.py:857(outer)
       639031    0.713    0.000    0.713    0.000 {built-in method numpy.array}
       115200    0.677    0.000    1.624    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.590    0.000    3.686    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.528    0.000    0.743    0.000 Node.py:396(getIdx4Element)
        38400    0.523    0.000    3.177    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.517    0.000    0.648    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.346    0.000    0.846    0.000 copy.py:128(deepcopy)
        76800    0.335    0.000    0.658    0.000 Node.py:358(getDeformedPos)
        76800    0.202    0.000    0.309    0.000 Node.py:265(getDisp)
       115201    0.193    0.000    0.743    0.000 numeric.py:76(zeros_like)
        14400    0.152    0.000    0.320    0.000 Face2D.py:16(initialize)
         4800    0.146    0.000    1.212    0.000 Triangle.py:10(__init__)
        14400    0.123    0.000    0.502    0.000 Face2D.py:13(__init__)
         4800    0.117    0.000    0.793    0.000 copy.py:259(_reconstruct)
        19200    0.110    0.000    0.138    0.000 twodim_base.py:162(eye)
       200334    0.108    0.000    0.108    0.000 {built-in method numpy.zeros}







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.454 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
