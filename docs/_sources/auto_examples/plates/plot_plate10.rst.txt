
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-129

.. code-block:: default

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 147-149

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 149-190

.. code-block:: default


    if __name__ == "__main__":

        import cProfile
        import pstats
        from pstats import SortKey


        ex = ExamplePlate10()
        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')

            #
            # processing the profiling data
            #

            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)

            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            cProfile.run('ex.run()','profile_data_full.txt')

            #
            # processing the profiling data
            #

            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)

            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_379 [120.   0.]
    + Elem_378 
    + Elem_379 379.2 : [[2. 0.]] 
    Node_440 [120.   2.]
    + Elem_379 379.2 : [[2. 0.]] 
    + Elem_498 
    + Elem_499 499.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_501 [120.   4.]
    + Elem_499 499.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_618 
    + Elem_619 619.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_562 [120.   6.]
    + Elem_619 619.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_738 
    + Elem_739 739.2 : [[2. 0.]] 
    Node_623 [120.   8.]
    + Elem_739 739.2 : [[2. 0.]] 
    + Elem_858 
    + Elem_859 859.2 : [[2. 0.]] 
    Node_684 [120.  10.]
    + Elem_859 859.2 : [[2. 0.]] 
    + Elem_978 
    + Elem_979 979.2 : [[2. 0.]] 
    Node_745 [120.  12.]
    + Elem_979 979.2 : [[2. 0.]] 
    + Elem_1098 
    + Elem_1099 1099.2 : [[2. 0.]] 
    Node_806 [120.  14.]
    + Elem_1099 1099.2 : [[2. 0.]] 
    + Elem_1218 
    + Elem_1219 1219.2 : [[2. 0.]] 
    Node_867 [120.  16.]
    + Elem_1219 1219.2 : [[2. 0.]] 
    + Elem_1338 
    + Elem_1339 1339.2 : [[2. 0.]] 
    Node_928 [120.  18.]
    + Elem_1339 1339.2 : [[2. 0.]] 
    + Elem_1458 
    + Elem_1459 1459.2 : [[2. 0.]] 
    Node_989 [120.  20.]
    + Elem_1459 1459.2 : [[2. 0.]] 
    + Elem_1578 
    + Elem_1579 1579.2 : [[2. 0.]] 
    Node_1050 [120.  22.]
    + Elem_1579 1579.2 : [[2. 0.]] 
    + Elem_1698 
    + Elem_1699 1699.2 : [[2. 0.]] 
    Node_1111 [120.  24.]
    + Elem_1699 1699.2 : [[2. 0.]] 
    + Elem_1818 
    + Elem_1819 1819.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1172 [120.  26.]
    + Elem_1819 1819.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1938 
    + Elem_1939 1939.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1233 [120.  28.]
    + Elem_1939 1939.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2058 
    + Elem_2059 2059.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1294 [120.  30.]
    + Elem_2059 2059.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2178 
    + Elem_2179 2179.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1355 [120.  32.]
    + Elem_2179 2179.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2298 
    + Elem_2299 2299.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1416 [120.  34.]
    + Elem_2299 2299.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2418 
    + Elem_2419 2419.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1477 [120.  36.]
    + Elem_2419 2419.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2538 
    + Elem_2539 2539.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1538 [120.  38.]
    + Elem_2539 2539.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2658 
    + Elem_2659 2659.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1599 [120.  40.]
    + Elem_2659 2659.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2778 
    + Elem_2779 2779.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1660 [120.  42.]
    + Elem_2779 2779.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2898 
    + Elem_2899 2899.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1721 [120.  44.]
    + Elem_2899 2899.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3018 
    + Elem_3019 3019.2 : [[2. 0.]] 
    Node_1782 [120.  46.]
    + Elem_3019 3019.2 : [[2. 0.]] 
    + Elem_3138 
    + Elem_3139 3139.2 : [[2. 0.]] 
    Node_1843 [120.  48.]
    + Elem_3139 3139.2 : [[2. 0.]] 
    + Elem_3258 
    + Elem_3259 3259.2 : [[2. 0.]] 
    Node_1904 [120.  50.]
    + Elem_3259 3259.2 : [[2. 0.]] 
    + Elem_3378 
    + Elem_3379 3379.2 : [[2. 0.]] 
    Node_1965 [120.  52.]
    + Elem_3379 3379.2 : [[2. 0.]] 
    + Elem_3498 
    + Elem_3499 3499.2 : [[2. 0.]] 
    Node_2026 [120.  54.]
    + Elem_3499 3499.2 : [[2. 0.]] 
    + Elem_3618 
    + Elem_3619 3619.2 : [[2. 0.]] 
    Node_2087 [120.  56.]
    + Elem_3619 3619.2 : [[2. 0.]] 
    + Elem_3738 
    + Elem_3739 3739.2 : [[2. 0.]] 
    Node_2148 [120.  58.]
    + Elem_3739 3739.2 : [[2. 0.]] 
    + Elem_3858 
    + Elem_3859 3859.2 : [[2. 0.]] 
    Node_2209 [120.  60.]
    + Elem_3859 3859.2 : [[2. 0.]] 
    + Elem_3978 
    + Elem_3979 3979.2 : [[2. 0.]] 
    Node_2270 [120.  62.]
    + Elem_3979 3979.2 : [[2. 0.]] 
    + Elem_4098 
    + Elem_4099 4099.2 : [[2. 0.]] 
    Node_2331 [120.  64.]
    + Elem_4099 4099.2 : [[2. 0.]] 
    + Elem_4218 
    + Elem_4219 4219.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2392 [120.  66.]
    + Elem_4219 4219.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4338 
    + Elem_4339 4339.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_2453 [120.  68.]
    + Elem_4339 4339.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_4458 
    + Elem_4459 4459.2 : [[2. 0.]] 
    Node_2514 [120.  70.]
    + Elem_4459 4459.2 : [[2. 0.]] 
    + Elem_4578 
    + Elem_4579 4579.2 : [[2. 0.]] 
    Node_2575 [120.  72.]
    + Elem_4579 4579.2 : [[2. 0.]] 
    + Elem_4698 
    + Elem_4699 4699.2 : [[2. 0.]] 
    Node_2636 [120.  74.]
    + Elem_4699 4699.2 : [[2. 0.]] 
    + Elem_4818 
    + Elem_4819 4819.2 : [[2. 0.]] 
    Node_2697 [120.  76.]
    + Elem_4819 4819.2 : [[2. 0.]] 
    + Elem_4938 
    + Elem_4939 4939.2 : [[2. 0.]] 
    Node_2758 [120.  78.]
    + Elem_4939 4939.2 : [[2. 0.]] 
    + Elem_5058 
    + Elem_5059 5059.2 : [[2. 0.]] 
    Node_2819 [120.  80.]
    + Elem_5059 5059.2 : [[2. 0.]] 
    norm of the out-of-balance force:   2.5140e+02
    norm of the out-of-balance force:   1.4968e-10
    +
    Sat Apr 15 12:25:33 2023    profile_data_full.txt

             7725426 function calls (7180493 primitive calls) in 17.717 seconds

       Ordered by: cumulative time
       List reduced from 282 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   17.736   17.736 {built-in method builtins.exec}
            1    0.000    0.000   17.736   17.736 <string>:1(<module>)
            1    0.015    0.015   17.736   17.736 Example.py:20(run)
            1    0.007    0.007   17.720   17.720 plot_plate10.py:44(problem)
            1    0.000    0.000   14.897   14.897 System.py:291(solve)
            1    0.000    0.000   14.897   14.897 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000   13.593    3.398 NewtonRaphsonSolver.py:100(assemble)
            4    2.626    0.656   13.593    3.398 Solver.py:127(assemble)
        19200    0.117    0.000    8.086    0.000 Element.py:225(getForce)
        19200    2.792    0.000    7.969    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    6.837    3.419 Solver.py:321(checkResiduum)
    602900/322289    0.738    0.000    4.382    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        38400    0.674    0.000    4.090    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.042    0.042    2.725    2.725 PatchMesher.py:99(triangleMesh)
       115200    0.862    0.000    2.104    0.000 Face2D.py:54(computeNodalForces)
        19200    0.027    0.000    1.895    0.000 Element.py:234(getLoad)
         4800    0.186    0.000    1.504    0.000 Triangle.py:10(__init__)
       153600    0.148    0.000    1.467    0.000 <__array_function__ internals>:177(outer)
        38400    0.127    0.000    1.302    0.000 Triangle.py:163(<listcomp>)
            1    0.003    0.003    1.299    1.299 NewtonRaphsonSolver.py:58(solveSingleStep)


    Sat Apr 15 12:25:33 2023    profile_data_full.txt

             7725426 function calls (7180493 primitive calls) in 17.717 seconds

       Ordered by: internal time
       List reduced from 282 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    2.792    0.000    7.969    0.000 Triangle.py:80(updateState)
            4    2.626    0.656   13.593    3.398 Solver.py:127(assemble)
            1    1.280    1.280    1.280    1.280 linalg.py:320(solve)
       153600    1.011    0.000    1.166    0.000 numeric.py:857(outer)
       638623    0.916    0.000    0.916    0.000 {built-in method numpy.array}
       115200    0.862    0.000    2.104    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.738    0.000    4.382    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.682    0.000    0.958    0.000 Node.py:360(getIdx4Element)
        38400    0.674    0.000    4.090    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.659    0.000    0.829    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.448    0.000    1.064    0.000 copy.py:128(deepcopy)
        76800    0.418    0.000    0.830    0.000 Node.py:324(getDeformedPos)
        76800    0.262    0.000    0.397    0.000 Node.py:255(getDisp)
       115201    0.244    0.000    0.936    0.000 numeric.py:76(zeros_like)
        14400    0.198    0.000    0.414    0.000 Face2D.py:16(initialize)
         4800    0.186    0.000    1.504    0.000 Triangle.py:10(__init__)
       153600    0.148    0.000    1.467    0.000 <__array_function__ internals>:177(outer)
        19200    0.141    0.000    0.178    0.000 twodim_base.py:162(eye)
       115201    0.139    0.000    0.342    0.000 <__array_function__ internals>:177(empty_like)
       195328    0.136    0.000    0.136    0.000 {built-in method numpy.zeros}







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.795 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
