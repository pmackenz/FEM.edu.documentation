
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-131

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver, SparseSolver
    from femedu.elements.linear import Triangle
    from femedu.materials import PlaneStress
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 149-153

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 153-164

.. code-block:: default



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1141 [120.   0.]
    + Elem_1448 
    + Elem_1449 1449.2 : [[2. 0.]] 
    Node_1202 [120.   2.]
    + Elem_1449 1449.2 : [[2. 0.]] 
    + Elem_1568 
    + Elem_1569 1569.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1263 [120.   4.]
    + Elem_1569 1569.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_1688 
    + Elem_1689 1689.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1324 [120.   6.]
    + Elem_1689 1689.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1808 
    + Elem_1809 1809.2 : [[2. 0.]] 
    Node_1385 [120.   8.]
    + Elem_1809 1809.2 : [[2. 0.]] 
    + Elem_1928 
    + Elem_1929 1929.2 : [[2. 0.]] 
    Node_1446 [120.  10.]
    + Elem_1929 1929.2 : [[2. 0.]] 
    + Elem_2048 
    + Elem_2049 2049.2 : [[2. 0.]] 
    Node_1507 [120.  12.]
    + Elem_2049 2049.2 : [[2. 0.]] 
    + Elem_2168 
    + Elem_2169 2169.2 : [[2. 0.]] 
    Node_1568 [120.  14.]
    + Elem_2169 2169.2 : [[2. 0.]] 
    + Elem_2288 
    + Elem_2289 2289.2 : [[2. 0.]] 
    Node_1629 [120.  16.]
    + Elem_2289 2289.2 : [[2. 0.]] 
    + Elem_2408 
    + Elem_2409 2409.2 : [[2. 0.]] 
    Node_1690 [120.  18.]
    + Elem_2409 2409.2 : [[2. 0.]] 
    + Elem_2528 
    + Elem_2529 2529.2 : [[2. 0.]] 
    Node_1751 [120.  20.]
    + Elem_2529 2529.2 : [[2. 0.]] 
    + Elem_2648 
    + Elem_2649 2649.2 : [[2. 0.]] 
    Node_1812 [120.  22.]
    + Elem_2649 2649.2 : [[2. 0.]] 
    + Elem_2768 
    + Elem_2769 2769.2 : [[2. 0.]] 
    Node_1873 [120.  24.]
    + Elem_2769 2769.2 : [[2. 0.]] 
    + Elem_2888 
    + Elem_2889 2889.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1934 [120.  26.]
    + Elem_2889 2889.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3008 
    + Elem_3009 3009.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1995 [120.  28.]
    + Elem_3009 3009.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3128 
    + Elem_3129 3129.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2056 [120.  30.]
    + Elem_3129 3129.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3248 
    + Elem_3249 3249.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2117 [120.  32.]
    + Elem_3249 3249.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3368 
    + Elem_3369 3369.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2178 [120.  34.]
    + Elem_3369 3369.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3488 
    + Elem_3489 3489.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2239 [120.  36.]
    + Elem_3489 3489.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3608 
    + Elem_3609 3609.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2300 [120.  38.]
    + Elem_3609 3609.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3728 
    + Elem_3729 3729.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2361 [120.  40.]
    + Elem_3729 3729.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3848 
    + Elem_3849 3849.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_2422 [120.  42.]
    + Elem_3849 3849.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3968 
    + Elem_3969 3969.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_2483 [120.  44.]
    + Elem_3969 3969.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_4088 
    + Elem_4089 4089.2 : [[2. 0.]] 
    Node_2544 [120.  46.]
    + Elem_4089 4089.2 : [[2. 0.]] 
    + Elem_4208 
    + Elem_4209 4209.2 : [[2. 0.]] 
    Node_2605 [120.  48.]
    + Elem_4209 4209.2 : [[2. 0.]] 
    + Elem_4328 
    + Elem_4329 4329.2 : [[2. 0.]] 
    Node_2666 [120.  50.]
    + Elem_4329 4329.2 : [[2. 0.]] 
    + Elem_4448 
    + Elem_4449 4449.2 : [[2. 0.]] 
    Node_2727 [120.  52.]
    + Elem_4449 4449.2 : [[2. 0.]] 
    + Elem_4568 
    + Elem_4569 4569.2 : [[2. 0.]] 
    Node_2788 [120.  54.]
    + Elem_4569 4569.2 : [[2. 0.]] 
    + Elem_4688 
    + Elem_4689 4689.2 : [[2. 0.]] 
    Node_2849 [120.  56.]
    + Elem_4689 4689.2 : [[2. 0.]] 
    + Elem_4808 
    + Elem_4809 4809.2 : [[2. 0.]] 
    Node_2910 [120.  58.]
    + Elem_4809 4809.2 : [[2. 0.]] 
    + Elem_4928 
    + Elem_4929 4929.2 : [[2. 0.]] 
    Node_2971 [120.  60.]
    + Elem_4929 4929.2 : [[2. 0.]] 
    + Elem_5048 
    + Elem_5049 5049.2 : [[2. 0.]] 
    Node_3032 [120.  62.]
    + Elem_5049 5049.2 : [[2. 0.]] 
    + Elem_5168 
    + Elem_5169 5169.2 : [[2. 0.]] 
    Node_3093 [120.  64.]
    + Elem_5169 5169.2 : [[2. 0.]] 
    + Elem_5288 
    + Elem_5289 5289.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_3154 [120.  66.]
    + Elem_5289 5289.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_5408 
    + Elem_5409 5409.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_3215 [120.  68.]
    + Elem_5409 5409.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_5528 
    + Elem_5529 5529.2 : [[2. 0.]] 
    Node_3276 [120.  70.]
    + Elem_5529 5529.2 : [[2. 0.]] 
    + Elem_5648 
    + Elem_5649 5649.2 : [[2. 0.]] 
    Node_3337 [120.  72.]
    + Elem_5649 5649.2 : [[2. 0.]] 
    + Elem_5768 
    + Elem_5769 5769.2 : [[2. 0.]] 
    Node_3398 [120.  74.]
    + Elem_5769 5769.2 : [[2. 0.]] 
    + Elem_5888 
    + Elem_5889 5889.2 : [[2. 0.]] 
    Node_3459 [120.  76.]
    + Elem_5889 5889.2 : [[2. 0.]] 
    + Elem_6008 
    + Elem_6009 6009.2 : [[2. 0.]] 
    Node_3520 [120.  78.]
    + Elem_6009 6009.2 : [[2. 0.]] 
    + Elem_6128 
    + Elem_6129 6129.2 : [[2. 0.]] 
    Node_3581 [120.  80.]
    + Elem_6129 6129.2 : [[2. 0.]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 168-170

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 170-193

.. code-block:: default



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Tue May 30 23:31:27 2023    profile_data_full.txt

             7765541 function calls (7220608 primitive calls) in 20.210 seconds

       Ordered by: cumulative time
       List reduced from 286 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   20.227   20.227 {built-in method builtins.exec}
            1    0.000    0.000   20.227   20.227 <string>:1(<module>)
            1    0.000    0.000   20.227   20.227 Example.py:20(run)
            1    0.007    0.007   20.227   20.227 plot_plate10.py:46(problem)
            1    0.000    0.000   17.695   17.695 System.py:313(solve)
            1    0.000    0.000   17.695   17.695 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000   15.797    3.949 NewtonRaphsonSolver.py:105(assemble)
            4    3.094    0.773   15.797    3.949 Solver.py:166(assemble)
        19200    0.135    0.000    9.309    0.000 Element.py:225(getForce)
        19200    3.233    0.000    9.174    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    8.996    4.498 Solver.py:385(checkResiduum)
    602900/322289    0.842    0.000    5.432    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        38400    0.765    0.000    4.770    0.000 Triangle.py:155(computeSurfaceLoads)
       115200    1.014    0.000    2.526    0.000 Face2D.py:54(computeNodalForces)
            1    0.033    0.033    2.443    2.443 PatchMesher.py:99(triangleMesh)
        19200    0.049    0.000    2.269    0.000 Element.py:234(getLoad)
            1    0.004    0.004    1.875    1.875 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    0.000    0.000    1.853    1.853 <__array_function__ internals>:177(solve)
            1    1.852    1.852    1.853    1.853 linalg.py:320(solve)
       153600    0.173    0.000    1.759    0.000 <__array_function__ internals>:177(outer)


    Tue May 30 23:31:27 2023    profile_data_full.txt

             7765541 function calls (7220608 primitive calls) in 20.210 seconds

       Ordered by: internal time
       List reduced from 286 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    3.233    0.000    9.174    0.000 Triangle.py:80(updateState)
            4    3.094    0.773   15.797    3.949 Solver.py:166(assemble)
            1    1.852    1.852    1.853    1.853 linalg.py:320(solve)
       153600    1.210    0.000    1.379    0.000 numeric.py:857(outer)
       639031    1.027    0.000    1.027    0.000 {built-in method numpy.array}
       115200    1.014    0.000    2.526    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.842    0.000    5.432    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.775    0.000    1.084    0.000 Node.py:398(getIdx4Element)
        38400    0.765    0.000    4.770    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.749    0.000    0.944    0.000 PlaneStress.py:25(updateState)
        76800    0.507    0.000    0.963    0.000 Node.py:360(getDeformedPos)
    254400/4800    0.433    0.000    0.928    0.000 copy.py:128(deepcopy)
        76800    0.291    0.000    0.439    0.000 Node.py:267(getDisp)
       115201    0.286    0.000    1.065    0.000 numeric.py:76(zeros_like)
        24000    0.208    0.000    0.234    0.000 shape_base.py:81(atleast_2d)
       153600    0.173    0.000    1.759    0.000 <__array_function__ internals>:177(outer)
        14400    0.173    0.000    0.362    0.000 Face2D.py:16(initialize)
         4800    0.160    0.000    1.373    0.000 Triangle.py:10(__init__)
        19200    0.157    0.000    0.198    0.000 twodim_base.py:162(eye)
       115201    0.151    0.000    0.382    0.000 <__array_function__ internals>:177(empty_like)







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  20.285 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
