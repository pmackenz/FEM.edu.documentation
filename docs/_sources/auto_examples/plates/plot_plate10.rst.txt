
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-131

.. code-block:: Python


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples import Example

    from femedu.domain import System, Node
    from femedu.solver import NewtonRaphsonSolver, SparseSolver
    from femedu.elements.linear import Triangle
    from femedu.materials import PlaneStress
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 149-153

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 153-164

.. code-block:: Python
   :dedent: 1



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_1495 [120 0]
    + Elem_1952 
    + Elem_1953 1953.2 : [[2 0]] 
    Node_1556 [120 2]
    + Elem_1953 1953.2 : [[2 0]] 
    + Elem_2072 
    + Elem_2073 2073.2 : [[2 1.42109e-14]] 
    Node_1617 [120 4]
    + Elem_2073 2073.2 : [[2 1.42109e-14]] 
    + Elem_2192 
    + Elem_2193 2193.2 : [[2 -1.42109e-14]] 
    Node_1678 [120 6]
    + Elem_2193 2193.2 : [[2 -1.42109e-14]] 
    + Elem_2312 
    + Elem_2313 2313.2 : [[2 0]] 
    Node_1739 [120 8]
    + Elem_2313 2313.2 : [[2 0]] 
    + Elem_2432 
    + Elem_2433 2433.2 : [[2 0]] 
    Node_1800 [120 10]
    + Elem_2433 2433.2 : [[2 0]] 
    + Elem_2552 
    + Elem_2553 2553.2 : [[2 0]] 
    Node_1861 [120 12]
    + Elem_2553 2553.2 : [[2 0]] 
    + Elem_2672 
    + Elem_2673 2673.2 : [[2 0]] 
    Node_1922 [120 14]
    + Elem_2673 2673.2 : [[2 0]] 
    + Elem_2792 
    + Elem_2793 2793.2 : [[2 0]] 
    Node_1983 [120 16]
    + Elem_2793 2793.2 : [[2 0]] 
    + Elem_2912 
    + Elem_2913 2913.2 : [[2 0]] 
    Node_2044 [120 18]
    + Elem_2913 2913.2 : [[2 0]] 
    + Elem_3032 
    + Elem_3033 3033.2 : [[2 0]] 
    Node_2105 [120 20]
    + Elem_3033 3033.2 : [[2 0]] 
    + Elem_3152 
    + Elem_3153 3153.2 : [[2 0]] 
    Node_2166 [120 22]
    + Elem_3153 3153.2 : [[2 0]] 
    + Elem_3272 
    + Elem_3273 3273.2 : [[2 0]] 
    Node_2227 [120 24]
    + Elem_3273 3273.2 : [[2 0]] 
    + Elem_3392 
    + Elem_3393 3393.2 : [[2 -1.42109e-14]] 
    Node_2288 [120 26]
    + Elem_3393 3393.2 : [[2 -1.42109e-14]] 
    + Elem_3512 
    + Elem_3513 3513.2 : [[2 2.84217e-14]] 
    Node_2349 [120 28]
    + Elem_3513 3513.2 : [[2 2.84217e-14]] 
    + Elem_3632 
    + Elem_3633 3633.2 : [[2 -1.42109e-14]] 
    Node_2410 [120 30]
    + Elem_3633 3633.2 : [[2 -1.42109e-14]] 
    + Elem_3752 
    + Elem_3753 3753.2 : [[2 1.42109e-14]] 
    Node_2471 [120 32]
    + Elem_3753 3753.2 : [[2 1.42109e-14]] 
    + Elem_3872 
    + Elem_3873 3873.2 : [[2 -1.42109e-14]] 
    Node_2532 [120 34]
    + Elem_3873 3873.2 : [[2 -1.42109e-14]] 
    + Elem_3992 
    + Elem_3993 3993.2 : [[2 -1.42109e-14]] 
    Node_2593 [120 36]
    + Elem_3993 3993.2 : [[2 -1.42109e-14]] 
    + Elem_4112 
    + Elem_4113 4113.2 : [[2 2.84217e-14]] 
    Node_2654 [120 38]
    + Elem_4113 4113.2 : [[2 2.84217e-14]] 
    + Elem_4232 
    + Elem_4233 4233.2 : [[2 -1.42109e-14]] 
    Node_2715 [120 40]
    + Elem_4233 4233.2 : [[2 -1.42109e-14]] 
    + Elem_4352 
    + Elem_4353 4353.2 : [[2 1.42109e-14]] 
    Node_2776 [120 42]
    + Elem_4353 4353.2 : [[2 1.42109e-14]] 
    + Elem_4472 
    + Elem_4473 4473.2 : [[2 -1.42109e-14]] 
    Node_2837 [120 44]
    + Elem_4473 4473.2 : [[2 -1.42109e-14]] 
    + Elem_4592 
    + Elem_4593 4593.2 : [[2 0]] 
    Node_2898 [120 46]
    + Elem_4593 4593.2 : [[2 0]] 
    + Elem_4712 
    + Elem_4713 4713.2 : [[2 0]] 
    Node_2959 [120 48]
    + Elem_4713 4713.2 : [[2 0]] 
    + Elem_4832 
    + Elem_4833 4833.2 : [[2 0]] 
    Node_3020 [120 50]
    + Elem_4833 4833.2 : [[2 0]] 
    + Elem_4952 
    + Elem_4953 4953.2 : [[2 0]] 
    Node_3081 [120 52]
    + Elem_4953 4953.2 : [[2 0]] 
    + Elem_5072 
    + Elem_5073 5073.2 : [[2 0]] 
    Node_3142 [120 54]
    + Elem_5073 5073.2 : [[2 0]] 
    + Elem_5192 
    + Elem_5193 5193.2 : [[2 0]] 
    Node_3203 [120 56]
    + Elem_5193 5193.2 : [[2 0]] 
    + Elem_5312 
    + Elem_5313 5313.2 : [[2 0]] 
    Node_3264 [120 58]
    + Elem_5313 5313.2 : [[2 0]] 
    + Elem_5432 
    + Elem_5433 5433.2 : [[2 0]] 
    Node_3325 [120 60]
    + Elem_5433 5433.2 : [[2 0]] 
    + Elem_5552 
    + Elem_5553 5553.2 : [[2 0]] 
    Node_3386 [120 62]
    + Elem_5553 5553.2 : [[2 0]] 
    + Elem_5672 
    + Elem_5673 5673.2 : [[2 0]] 
    Node_3447 [120 64]
    + Elem_5673 5673.2 : [[2 0]] 
    + Elem_5792 
    + Elem_5793 5793.2 : [[2 2.84217e-14]] 
    Node_3508 [120 66]
    + Elem_5793 5793.2 : [[2 2.84217e-14]] 
    + Elem_5912 
    + Elem_5913 5913.2 : [[2 -2.84217e-14]] 
    Node_3569 [120 68]
    + Elem_5913 5913.2 : [[2 -2.84217e-14]] 
    + Elem_6032 
    + Elem_6033 6033.2 : [[2 0]] 
    Node_3630 [120 70]
    + Elem_6033 6033.2 : [[2 0]] 
    + Elem_6152 
    + Elem_6153 6153.2 : [[2 0]] 
    Node_3691 [120 72]
    + Elem_6153 6153.2 : [[2 0]] 
    + Elem_6272 
    + Elem_6273 6273.2 : [[2 0]] 
    Node_3752 [120 74]
    + Elem_6273 6273.2 : [[2 0]] 
    + Elem_6392 
    + Elem_6393 6393.2 : [[2 0]] 
    Node_3813 [120 76]
    + Elem_6393 6393.2 : [[2 0]] 
    + Elem_6512 
    + Elem_6513 6513.2 : [[2 0]] 
    Node_3874 [120 78]
    + Elem_6513 6513.2 : [[2 0]] 
    + Elem_6632 
    + Elem_6633 6633.2 : [[2 0]] 
    Node_3935 [120 80]
    + Elem_6633 6633.2 : [[2 0]] 
    +




.. GENERATED FROM PYTHON SOURCE LINES 168-170

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 170-193

.. code-block:: Python
   :dedent: 1



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sun Dec 29 18:59:06 2024    profile_data_full.txt

             7190919 function calls (6926597 primitive calls) in 14.631 seconds

       Ordered by: cumulative time
       List reduced from 227 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   14.631   14.631 {built-in method builtins.exec}
            1    0.000    0.000   14.631   14.631 <string>:1(<module>)
            1    0.000    0.000   14.631   14.631 Example.py:20(run)
            1    0.009    0.009   14.631   14.631 plot_plate10.py:46(problem)
            1    0.000    0.000   12.483   12.483 System.py:313(solve)
            1    0.000    0.000   12.483   12.483 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000   10.259    2.565 NewtonRaphsonSolver.py:110(assemble)
            4    2.379    0.595   10.259    2.565 Solver.py:166(assemble)
        19200    0.091    0.000    5.674    0.000 Element.py:267(getForce)
        19200    2.087    0.000    5.582    0.000 Triangle.py:80(updateState)
            2    0.000    0.000    5.328    2.664 Solver.py:415(checkResiduum)
        38400    0.625    0.000    2.471    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.006    0.006    2.202    2.202 NewtonRaphsonSolver.py:58(solveSingleStep)
            1    2.176    2.176    2.176    2.176 _linalg.py:320(solve)
            1    0.033    0.033    2.095    2.095 PatchMesher.py:99(triangleMesh)
       115200    0.618    0.000    1.430    0.000 Face2D.py:54(computeNodalForces)
        19200    0.034    0.000    1.190    0.000 Element.py:276(getLoad)
         4800    0.176    0.000    1.062    0.000 Triangle.py:10(__init__)
    254400/4800    0.401    0.000    0.914    0.000 copy.py:119(deepcopy)
       153600    0.736    0.000    0.909    0.000 numeric.py:876(outer)


    Sun Dec 29 18:59:06 2024    profile_data_full.txt

             7190919 function calls (6926597 primitive calls) in 14.631 seconds

       Ordered by: internal time
       List reduced from 227 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            4    2.379    0.595   10.259    2.565 Solver.py:166(assemble)
            1    2.176    2.176    2.176    2.176 _linalg.py:320(solve)
        19200    2.087    0.000    5.582    0.000 Triangle.py:80(updateState)
       153600    0.736    0.000    0.909    0.000 numeric.py:876(outer)
       639439    0.735    0.000    0.735    0.000 {built-in method numpy.array}
        38400    0.625    0.000    2.471    0.000 Triangle.py:155(computeSurfaceLoads)
       115200    0.618    0.000    1.430    0.000 Face2D.py:54(computeNodalForces)
       230400    0.538    0.000    0.771    0.000 Node.py:483(getIdx4Element)
        19201    0.462    0.000    0.596    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.401    0.000    0.914    0.000 copy.py:119(deepcopy)
       115201    0.298    0.000    0.389    0.000 numeric.py:64(zeros_like)
        76800    0.296    0.000    0.710    0.000 Node.py:432(getDeformedPos)
        77208    0.256    0.000    0.399    0.000 Node.py:321(getDisp)
        14400    0.189    0.000    0.280    0.000 Face2D.py:16(initialize)
       828415    0.176    0.000    0.177    0.000 {built-in method builtins.isinstance}
         4800    0.176    0.000    1.062    0.000 Triangle.py:10(__init__)
       567770    0.156    0.000    0.156    0.000 {method 'append' of 'list' objects}
        24000    0.151    0.000    0.288    0.000 shape_base.py:220(vstack)
       307200    0.122    0.000    0.122    0.000 {method 'ravel' of 'numpy.ndarray' objects}
    19200/4800    0.121    0.000    0.779    0.000 copy.py:218(_deepcopy_dict)







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.677 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_plate10.zip <plot_plate10.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
