
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate10.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate10.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate10.py:


==========================================================
Profiling the code
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-132

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/profiler.png'

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate10(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 150-154

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`

This time, we are running the example in the profiler, writing profiling data to file.


.. GENERATED FROM PYTHON SOURCE LINES 154-165

.. code-block:: default



        import cProfile

        ex = ExamplePlate10()

        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_60 [120.   0.]
    + Elem_118 
    + Elem_119 119.2 : [[2. 0.]] 
    Node_121 [120.   2.]
    + Elem_119 119.2 : [[2. 0.]] 
    + Elem_238 
    + Elem_239 239.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_182 [120.   4.]
    + Elem_239 239.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_358 
    + Elem_359 359.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_243 [120.   6.]
    + Elem_359 359.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_478 
    + Elem_479 479.2 : [[2. 0.]] 
    Node_304 [120.   8.]
    + Elem_479 479.2 : [[2. 0.]] 
    + Elem_598 
    + Elem_599 599.2 : [[2. 0.]] 
    Node_365 [120.  10.]
    + Elem_599 599.2 : [[2. 0.]] 
    + Elem_718 
    + Elem_719 719.2 : [[2. 0.]] 
    Node_426 [120.  12.]
    + Elem_719 719.2 : [[2. 0.]] 
    + Elem_838 
    + Elem_839 839.2 : [[2. 0.]] 
    Node_487 [120.  14.]
    + Elem_839 839.2 : [[2. 0.]] 
    + Elem_958 
    + Elem_959 959.2 : [[2. 0.]] 
    Node_548 [120.  16.]
    + Elem_959 959.2 : [[2. 0.]] 
    + Elem_1078 
    + Elem_1079 1079.2 : [[2. 0.]] 
    Node_609 [120.  18.]
    + Elem_1079 1079.2 : [[2. 0.]] 
    + Elem_1198 
    + Elem_1199 1199.2 : [[2. 0.]] 
    Node_670 [120.  20.]
    + Elem_1199 1199.2 : [[2. 0.]] 
    + Elem_1318 
    + Elem_1319 1319.2 : [[2. 0.]] 
    Node_731 [120.  22.]
    + Elem_1319 1319.2 : [[2. 0.]] 
    + Elem_1438 
    + Elem_1439 1439.2 : [[2. 0.]] 
    Node_792 [120.  24.]
    + Elem_1439 1439.2 : [[2. 0.]] 
    + Elem_1558 
    + Elem_1559 1559.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_853 [120.  26.]
    + Elem_1559 1559.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1678 
    + Elem_1679 1679.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_914 [120.  28.]
    + Elem_1679 1679.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_1798 
    + Elem_1799 1799.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_975 [120.  30.]
    + Elem_1799 1799.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1918 
    + Elem_1919 1919.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1036 [120.  32.]
    + Elem_1919 1919.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2038 
    + Elem_2039 2039.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1097 [120.  34.]
    + Elem_2039 2039.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2158 
    + Elem_2159 2159.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1158 [120.  36.]
    + Elem_2159 2159.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2278 
    + Elem_2279 2279.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1219 [120.  38.]
    + Elem_2279 2279.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2398 
    + Elem_2399 2399.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1280 [120.  40.]
    + Elem_2399 2399.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2518 
    + Elem_2519 2519.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1341 [120.  42.]
    + Elem_2519 2519.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2638 
    + Elem_2639 2639.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1402 [120.  44.]
    + Elem_2639 2639.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2758 
    + Elem_2759 2759.2 : [[2. 0.]] 
    Node_1463 [120.  46.]
    + Elem_2759 2759.2 : [[2. 0.]] 
    + Elem_2878 
    + Elem_2879 2879.2 : [[2. 0.]] 
    Node_1524 [120.  48.]
    + Elem_2879 2879.2 : [[2. 0.]] 
    + Elem_2998 
    + Elem_2999 2999.2 : [[2. 0.]] 
    Node_1585 [120.  50.]
    + Elem_2999 2999.2 : [[2. 0.]] 
    + Elem_3118 
    + Elem_3119 3119.2 : [[2. 0.]] 
    Node_1646 [120.  52.]
    + Elem_3119 3119.2 : [[2. 0.]] 
    + Elem_3238 
    + Elem_3239 3239.2 : [[2. 0.]] 
    Node_1707 [120.  54.]
    + Elem_3239 3239.2 : [[2. 0.]] 
    + Elem_3358 
    + Elem_3359 3359.2 : [[2. 0.]] 
    Node_1768 [120.  56.]
    + Elem_3359 3359.2 : [[2. 0.]] 
    + Elem_3478 
    + Elem_3479 3479.2 : [[2. 0.]] 
    Node_1829 [120.  58.]
    + Elem_3479 3479.2 : [[2. 0.]] 
    + Elem_3598 
    + Elem_3599 3599.2 : [[2. 0.]] 
    Node_1890 [120.  60.]
    + Elem_3599 3599.2 : [[2. 0.]] 
    + Elem_3718 
    + Elem_3719 3719.2 : [[2. 0.]] 
    Node_1951 [120.  62.]
    + Elem_3719 3719.2 : [[2. 0.]] 
    + Elem_3838 
    + Elem_3839 3839.2 : [[2. 0.]] 
    Node_2012 [120.  64.]
    + Elem_3839 3839.2 : [[2. 0.]] 
    + Elem_3958 
    + Elem_3959 3959.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2073 [120.  66.]
    + Elem_3959 3959.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4078 
    + Elem_4079 4079.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_2134 [120.  68.]
    + Elem_4079 4079.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_4198 
    + Elem_4199 4199.2 : [[2. 0.]] 
    Node_2195 [120.  70.]
    + Elem_4199 4199.2 : [[2. 0.]] 
    + Elem_4318 
    + Elem_4319 4319.2 : [[2. 0.]] 
    Node_2256 [120.  72.]
    + Elem_4319 4319.2 : [[2. 0.]] 
    + Elem_4438 
    + Elem_4439 4439.2 : [[2. 0.]] 
    Node_2317 [120.  74.]
    + Elem_4439 4439.2 : [[2. 0.]] 
    + Elem_4558 
    + Elem_4559 4559.2 : [[2. 0.]] 
    Node_2378 [120.  76.]
    + Elem_4559 4559.2 : [[2. 0.]] 
    + Elem_4678 
    + Elem_4679 4679.2 : [[2. 0.]] 
    Node_2439 [120.  78.]
    + Elem_4679 4679.2 : [[2. 0.]] 
    + Elem_4798 
    + Elem_4799 4799.2 : [[2. 0.]] 
    Node_2500 [120.  80.]
    + Elem_4799 4799.2 : [[2. 0.]] 
    norm of the out-of-balance force:   2.5140e+02
    norm of the out-of-balance force:   1.4968e-10
    +




.. GENERATED FROM PYTHON SOURCE LINES 169-171

Now it's time to process the profiling data


.. GENERATED FROM PYTHON SOURCE LINES 171-194

.. code-block:: default



        import pstats
        from pstats import SortKey

        if SPARSE:
            p = pstats.Stats('profile_data_sparse.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)

        else:
            p = pstats.Stats('profile_data_full.txt')
            p.strip_dirs() #.sort_stats(-1).print_stats()
            p.sort_stats(SortKey.NAME)
            #p.print_stats()

            p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
            p.sort_stats(SortKey.TIME).print_stats(20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sat Apr 15 13:20:37 2023    profile_data_full.txt

             7715835 function calls (7170902 primitive calls) in 23.004 seconds

       Ordered by: cumulative time
       List reduced from 290 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.000    0.000   23.029   23.029 {built-in method builtins.exec}
            1    0.000    0.000   23.029   23.029 <string>:1(<module>)
            1    0.023    0.023   23.029   23.029 Example.py:20(run)
            1    0.009    0.009   23.006   23.006 plot_plate10.py:47(problem)
            1    0.000    0.000   19.557   19.557 System.py:291(solve)
            1    0.000    0.000   19.557   19.557 NewtonRaphsonSolver.py:13(solve)
            4    0.000    0.000   18.041    4.510 NewtonRaphsonSolver.py:100(assemble)
            4    3.559    0.890   18.041    4.510 Solver.py:127(assemble)
        19200    0.141    0.000   10.571    0.001 Element.py:225(getForce)
        19200    3.685    0.000   10.430    0.001 Triangle.py:80(updateState)
            2    0.000    0.000    8.906    4.453 Solver.py:321(checkResiduum)
    602900/322289    0.998    0.000    5.580    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
        38400    0.889    0.000    5.498    0.000 Triangle.py:155(computeSurfaceLoads)
            1    0.045    0.045    3.316    3.316 PatchMesher.py:99(triangleMesh)
       115200    1.167    0.000    2.820    0.000 Face2D.py:54(computeNodalForces)
        19200    0.035    0.000    2.582    0.000 Element.py:234(getLoad)
       153600    0.188    0.000    1.948    0.000 <__array_function__ internals>:177(outer)
         4800    0.216    0.000    1.810    0.000 Triangle.py:10(__init__)
        38400    0.159    0.000    1.776    0.000 Triangle.py:163(<listcomp>)
       115201    0.146    0.000    1.617    0.000 <__array_function__ internals>:177(zeros_like)


    Sat Apr 15 13:20:37 2023    profile_data_full.txt

             7715835 function calls (7170902 primitive calls) in 23.004 seconds

       Ordered by: internal time
       List reduced from 290 to 20 due to restriction <20>

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        19200    3.685    0.000   10.430    0.001 Triangle.py:80(updateState)
            4    3.559    0.890   18.041    4.510 Solver.py:127(assemble)
            1    1.488    1.488    1.488    1.488 linalg.py:320(solve)
       153600    1.338    0.000    1.546    0.000 numeric.py:857(outer)
       638623    1.238    0.000    1.238    0.000 {built-in method numpy.array}
       115200    1.167    0.000    2.820    0.000 Face2D.py:54(computeNodalForces)
    602900/322289    0.998    0.000    5.580    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
       230400    0.913    0.000    1.291    0.000 Node.py:360(getIdx4Element)
        38400    0.889    0.000    5.498    0.000 Triangle.py:155(computeSurfaceLoads)
        19201    0.820    0.000    1.049    0.000 PlaneStress.py:25(updateState)
    254400/4800    0.585    0.000    1.258    0.000 copy.py:128(deepcopy)
        76800    0.550    0.000    1.089    0.000 Node.py:324(getDeformedPos)
       115201    0.342    0.000    1.303    0.000 numeric.py:76(zeros_like)
        76800    0.337    0.000    0.517    0.000 Node.py:255(getDisp)
        14400    0.306    0.000    0.566    0.000 Face2D.py:16(initialize)
         4800    0.216    0.000    1.810    0.000 Triangle.py:10(__init__)
       153600    0.188    0.000    1.948    0.000 <__array_function__ internals>:177(outer)
       115201    0.188    0.000    0.473    0.000 <__array_function__ internals>:177(empty_like)
       195328    0.181    0.000    0.181    0.000 {built-in method numpy.zeros}
        19200    0.172    0.000    0.220    0.000 twodim_base.py:162(eye)







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.593 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate10.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate10.py <plot_plate10.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate10.ipynb <plot_plate10.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
