
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate05.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate05.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate05.py:


==========================================================
Pulling a plate with a circular hole
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-151

.. code-block:: default

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate05(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 6        # number of elements in the mesh
            Ny = 5        # number of elements in the mesh
            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 20000.,    # Young's modulus
                nu = 0.250,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 10.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  5--------------6--------------7
            #  |             / \             |
            #  |            /   \            |
            #  |           /     \           |
            #  3----8----4        \          |
            #             \        \         |
            #              9        \        |
            #               \        \       |
            #                0--------1------2

            pts = (
                ( R, 0),
                (0.5*(R+Lx), 0),
                (Lx, 0),
                (0, R),
                (R*np.cos(np.radians(45.)), R*np.sin(np.radians(45.))),
                (0, Ly),
                (0.5*Lx, Ly),
                (Lx, Ly),
                (R*np.cos(np.radians(67.5)), R*np.sin(np.radians(67.5))),
                (R*np.cos(np.radians(22.5)), R*np.sin(np.radians(22.5))),
            )

            mesher1 = PatchMesher(model, pts[3], pts[4], pts[6], pts[5], pts[8])
            nodes1, elements1 = mesher1.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            mesher2 = PatchMesher(model, pts[0], pts[1], pts[6], pts[4], None, None, None, pts[9])                                               # center node
            nodes2, elements2 = mesher2.triangleMesh(Ny, Nx, Triangle, PlaneStress(params))

            mesher3 = PatchMesher(model, pts[1], pts[2], pts[7], pts[6])
            nodes3, elements3 = mesher3.triangleMesh(Nx, Nx, Triangle, PlaneStress(params))

            nodes    = nodes1    + nodes2    + nodes3
            elements = elements1 + elements2 + elements3

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== complete the reference load ====

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node)
                    for elem in node.elements:
                        print('+', elem)

            model.plot(factor=0, title="undeformed system", filename="plate05_undeformed.png", show_bc=1, show_loads=1)

        def _buffer(self, model):

            elements = model.elements

            # surface loads on the left side
            elements[ 0].setSurfaceLoad(2,px)
            elements[ 8].setSurfaceLoad(2,px)
            elements[16].setSurfaceLoad(2,px)

            # surface loads on the right side
            elements[ 7].setSurfaceLoad(2,px)
            elements[15].setSurfaceLoad(2,px)
            elements[23].setSurfaceLoad(2,px)

            # these are only nodal forces as part of the reference load
            # .. load only the upper node
            #print(model)

            model.report()

            model.plot(factor=0., title="undeformed system", filename="plate05_undeformed.png")

            model.setLoadFactor(10.0)
            model.solve()

            model.report()

            model.plot(factor=10., filename="plate05_deformed.png")









.. GENERATED FROM PYTHON SOURCE LINES 169-171

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: default


    if __name__ == "__main__":
        ex = ExamplePlate05()
        ex.run()





.. image-sg:: /auto_examples/plates/images/sphx_glr_plot_plate05_001.png
   :alt: undeformed system
   :srcset: /auto_examples/plates/images/sphx_glr_plot_plate05_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_277:
        x:    [120.   0.]
        fix:  ['uy']
        u:    None
    + Triangle_321: nodes ( Node_276 Node_277 Node_283 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_322: nodes ( Node_284 Node_283 Node_277 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Node_284:
        x:    [120.          13.33333333]
        u:    None
    + Triangle_322: nodes ( Node_284 Node_283 Node_277 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_333: nodes ( Node_283 Node_284 Node_290 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_334: nodes ( Node_291 Node_290 Node_284 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Node_291:
        x:    [120.          26.66666667]
        u:    None
    + Triangle_334: nodes ( Node_291 Node_290 Node_284 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_345: nodes ( Node_290 Node_291 Node_297 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_346: nodes ( Node_298 Node_297 Node_291 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Node_298:
        x:    [120.  40.]
        u:    None
    + Triangle_346: nodes ( Node_298 Node_297 Node_291 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_357: nodes ( Node_297 Node_298 Node_304 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_358: nodes ( Node_305 Node_304 Node_298 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Node_305:
        x:    [120.          53.33333333]
        u:    None
    + Triangle_358: nodes ( Node_305 Node_304 Node_298 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_369: nodes ( Node_304 Node_305 Node_311 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_370: nodes ( Node_312 Node_311 Node_305 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Node_312:
        x:    [120.          66.66666667]
        u:    None
    + Triangle_370: nodes ( Node_312 Node_311 Node_305 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_381: nodes ( Node_311 Node_312 Node_318 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    + Triangle_382: nodes ( Node_319 Node_318 Node_312 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    Node_319:
        x:    [120.  80.]
        u:    None
    + Triangle_382: nodes ( Node_319 Node_318 Node_312 )
        material: PlaneStress
        strain: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=-0.000e+00
        stress: xx=0.000e+00 yy=0.000e+00 xy=0.000e+00 zz=0.000e+00
    /usr/local/lib/python3.10/site-packages/matplotlib/quiver.py:635: RuntimeWarning: Mean of empty slice.
      amean = a.mean()
    /usr/local/lib/python3.10/site-packages/numpy/core/_methods.py:190: RuntimeWarning: invalid value encountered in double_scalars
      ret = ret.dtype.type(ret / rcount)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.423 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate05.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate05.py <plot_plate05.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate05.ipynb <plot_plate05.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
