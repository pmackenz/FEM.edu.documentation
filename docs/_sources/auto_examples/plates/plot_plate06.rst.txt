
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate06.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate06.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate06.py:


==========================================================
Pulling a plate with a circular hole
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-129

.. code-block:: default

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate06(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 147-149

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 149-161

.. code-block:: default


    if __name__ == "__main__":

        import cProfile

        ex = ExamplePlate06()
        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_380 [120.   0.]
    + Elem_501 
    + Elem_502 502.2 : [[2. 0.]] 
    Node_441 [120.   2.]
    + Elem_502 502.2 : [[2. 0.]] 
    + Elem_621 
    + Elem_622 622.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_502 [120.   4.]
    + Elem_622 622.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_741 
    + Elem_742 742.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_563 [120.   6.]
    + Elem_742 742.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_861 
    + Elem_862 862.2 : [[2. 0.]] 
    Node_624 [120.   8.]
    + Elem_862 862.2 : [[2. 0.]] 
    + Elem_981 
    + Elem_982 982.2 : [[2. 0.]] 
    Node_685 [120.  10.]
    + Elem_982 982.2 : [[2. 0.]] 
    + Elem_1101 
    + Elem_1102 1102.2 : [[2. 0.]] 
    Node_746 [120.  12.]
    + Elem_1102 1102.2 : [[2. 0.]] 
    + Elem_1221 
    + Elem_1222 1222.2 : [[2. 0.]] 
    Node_807 [120.  14.]
    + Elem_1222 1222.2 : [[2. 0.]] 
    + Elem_1341 
    + Elem_1342 1342.2 : [[2. 0.]] 
    Node_868 [120.  16.]
    + Elem_1342 1342.2 : [[2. 0.]] 
    + Elem_1461 
    + Elem_1462 1462.2 : [[2. 0.]] 
    Node_929 [120.  18.]
    + Elem_1462 1462.2 : [[2. 0.]] 
    + Elem_1581 
    + Elem_1582 1582.2 : [[2. 0.]] 
    Node_990 [120.  20.]
    + Elem_1582 1582.2 : [[2. 0.]] 
    + Elem_1701 
    + Elem_1702 1702.2 : [[2. 0.]] 
    Node_1051 [120.  22.]
    + Elem_1702 1702.2 : [[2. 0.]] 
    + Elem_1821 
    + Elem_1822 1822.2 : [[2. 0.]] 
    Node_1112 [120.  24.]
    + Elem_1822 1822.2 : [[2. 0.]] 
    + Elem_1941 
    + Elem_1942 1942.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1173 [120.  26.]
    + Elem_1942 1942.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2061 
    + Elem_2062 2062.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1234 [120.  28.]
    + Elem_2062 2062.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2181 
    + Elem_2182 2182.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1295 [120.  30.]
    + Elem_2182 2182.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2301 
    + Elem_2302 2302.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1356 [120.  32.]
    + Elem_2302 2302.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2421 
    + Elem_2422 2422.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1417 [120.  34.]
    + Elem_2422 2422.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2541 
    + Elem_2542 2542.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1478 [120.  36.]
    + Elem_2542 2542.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2661 
    + Elem_2662 2662.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1539 [120.  38.]
    + Elem_2662 2662.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2781 
    + Elem_2782 2782.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1600 [120.  40.]
    + Elem_2782 2782.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2901 
    + Elem_2902 2902.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1661 [120.  42.]
    + Elem_2902 2902.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3021 
    + Elem_3022 3022.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1722 [120.  44.]
    + Elem_3022 3022.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3141 
    + Elem_3142 3142.2 : [[2. 0.]] 
    Node_1783 [120.  46.]
    + Elem_3142 3142.2 : [[2. 0.]] 
    + Elem_3261 
    + Elem_3262 3262.2 : [[2. 0.]] 
    Node_1844 [120.  48.]
    + Elem_3262 3262.2 : [[2. 0.]] 
    + Elem_3381 
    + Elem_3382 3382.2 : [[2. 0.]] 
    Node_1905 [120.  50.]
    + Elem_3382 3382.2 : [[2. 0.]] 
    + Elem_3501 
    + Elem_3502 3502.2 : [[2. 0.]] 
    Node_1966 [120.  52.]
    + Elem_3502 3502.2 : [[2. 0.]] 
    + Elem_3621 
    + Elem_3622 3622.2 : [[2. 0.]] 
    Node_2027 [120.  54.]
    + Elem_3622 3622.2 : [[2. 0.]] 
    + Elem_3741 
    + Elem_3742 3742.2 : [[2. 0.]] 
    Node_2088 [120.  56.]
    + Elem_3742 3742.2 : [[2. 0.]] 
    + Elem_3861 
    + Elem_3862 3862.2 : [[2. 0.]] 
    Node_2149 [120.  58.]
    + Elem_3862 3862.2 : [[2. 0.]] 
    + Elem_3981 
    + Elem_3982 3982.2 : [[2. 0.]] 
    Node_2210 [120.  60.]
    + Elem_3982 3982.2 : [[2. 0.]] 
    + Elem_4101 
    + Elem_4102 4102.2 : [[2. 0.]] 
    Node_2271 [120.  62.]
    + Elem_4102 4102.2 : [[2. 0.]] 
    + Elem_4221 
    + Elem_4222 4222.2 : [[2. 0.]] 
    Node_2332 [120.  64.]
    + Elem_4222 4222.2 : [[2. 0.]] 
    + Elem_4341 
    + Elem_4342 4342.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2393 [120.  66.]
    + Elem_4342 4342.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4461 
    + Elem_4462 4462.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_2454 [120.  68.]
    + Elem_4462 4462.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_4581 
    + Elem_4582 4582.2 : [[2. 0.]] 
    Node_2515 [120.  70.]
    + Elem_4582 4582.2 : [[2. 0.]] 
    + Elem_4701 
    + Elem_4702 4702.2 : [[2. 0.]] 
    Node_2576 [120.  72.]
    + Elem_4702 4702.2 : [[2. 0.]] 
    + Elem_4821 
    + Elem_4822 4822.2 : [[2. 0.]] 
    Node_2637 [120.  74.]
    + Elem_4822 4822.2 : [[2. 0.]] 
    + Elem_4941 
    + Elem_4942 4942.2 : [[2. 0.]] 
    Node_2698 [120.  76.]
    + Elem_4942 4942.2 : [[2. 0.]] 
    + Elem_5061 
    + Elem_5062 5062.2 : [[2. 0.]] 
    Node_2759 [120.  78.]
    + Elem_5062 5062.2 : [[2. 0.]] 
    + Elem_5181 
    + Elem_5182 5182.2 : [[2. 0.]] 
    Node_2820 [120.  80.]
    + Elem_5182 5182.2 : [[2. 0.]] 
    norm of the out-of-balance force:   2.5140e+02
    norm of the out-of-balance force:   1.4968e-10
    +





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.903 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate06.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate06.py <plot_plate06.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate06.ipynb <plot_plate06.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
