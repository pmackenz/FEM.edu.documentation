
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate06.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate06.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate06.py:


==========================================================
Pulling a plate with a circular hole
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-129

.. code-block:: default

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate06(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 147-149

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 149-161

.. code-block:: default


    if __name__ == "__main__":

        import cProfile

        ex = ExamplePlate06()
        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_566 [120.   0.]
    + Elem_829 
    + Elem_830 830.2 : [[2. 0.]] 
    Node_627 [120.   2.]
    + Elem_830 830.2 : [[2. 0.]] 
    + Elem_949 
    + Elem_950 950.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_688 [120.   4.]
    + Elem_950 950.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_1069 
    + Elem_1070 1070.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_749 [120.   6.]
    + Elem_1070 1070.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_1189 
    + Elem_1190 1190.2 : [[2. 0.]] 
    Node_810 [120.   8.]
    + Elem_1190 1190.2 : [[2. 0.]] 
    + Elem_1309 
    + Elem_1310 1310.2 : [[2. 0.]] 
    Node_871 [120.  10.]
    + Elem_1310 1310.2 : [[2. 0.]] 
    + Elem_1429 
    + Elem_1430 1430.2 : [[2. 0.]] 
    Node_932 [120.  12.]
    + Elem_1430 1430.2 : [[2. 0.]] 
    + Elem_1549 
    + Elem_1550 1550.2 : [[2. 0.]] 
    Node_993 [120.  14.]
    + Elem_1550 1550.2 : [[2. 0.]] 
    + Elem_1669 
    + Elem_1670 1670.2 : [[2. 0.]] 
    Node_1054 [120.  16.]
    + Elem_1670 1670.2 : [[2. 0.]] 
    + Elem_1789 
    + Elem_1790 1790.2 : [[2. 0.]] 
    Node_1115 [120.  18.]
    + Elem_1790 1790.2 : [[2. 0.]] 
    + Elem_1909 
    + Elem_1910 1910.2 : [[2. 0.]] 
    Node_1176 [120.  20.]
    + Elem_1910 1910.2 : [[2. 0.]] 
    + Elem_2029 
    + Elem_2030 2030.2 : [[2. 0.]] 
    Node_1237 [120.  22.]
    + Elem_2030 2030.2 : [[2. 0.]] 
    + Elem_2149 
    + Elem_2150 2150.2 : [[2. 0.]] 
    Node_1298 [120.  24.]
    + Elem_2150 2150.2 : [[2. 0.]] 
    + Elem_2269 
    + Elem_2270 2270.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1359 [120.  26.]
    + Elem_2270 2270.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2389 
    + Elem_2390 2390.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1420 [120.  28.]
    + Elem_2390 2390.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2509 
    + Elem_2510 2510.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1481 [120.  30.]
    + Elem_2510 2510.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2629 
    + Elem_2630 2630.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1542 [120.  32.]
    + Elem_2630 2630.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2749 
    + Elem_2750 2750.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1603 [120.  34.]
    + Elem_2750 2750.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2869 
    + Elem_2870 2870.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1664 [120.  36.]
    + Elem_2870 2870.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2989 
    + Elem_2990 2990.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1725 [120.  38.]
    + Elem_2990 2990.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_3109 
    + Elem_3110 3110.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1786 [120.  40.]
    + Elem_3110 3110.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3229 
    + Elem_3230 3230.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1847 [120.  42.]
    + Elem_3230 3230.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3349 
    + Elem_3350 3350.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1908 [120.  44.]
    + Elem_3350 3350.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3469 
    + Elem_3470 3470.2 : [[2. 0.]] 
    Node_1969 [120.  46.]
    + Elem_3470 3470.2 : [[2. 0.]] 
    + Elem_3589 
    + Elem_3590 3590.2 : [[2. 0.]] 
    Node_2030 [120.  48.]
    + Elem_3590 3590.2 : [[2. 0.]] 
    + Elem_3709 
    + Elem_3710 3710.2 : [[2. 0.]] 
    Node_2091 [120.  50.]
    + Elem_3710 3710.2 : [[2. 0.]] 
    + Elem_3829 
    + Elem_3830 3830.2 : [[2. 0.]] 
    Node_2152 [120.  52.]
    + Elem_3830 3830.2 : [[2. 0.]] 
    + Elem_3949 
    + Elem_3950 3950.2 : [[2. 0.]] 
    Node_2213 [120.  54.]
    + Elem_3950 3950.2 : [[2. 0.]] 
    + Elem_4069 
    + Elem_4070 4070.2 : [[2. 0.]] 
    Node_2274 [120.  56.]
    + Elem_4070 4070.2 : [[2. 0.]] 
    + Elem_4189 
    + Elem_4190 4190.2 : [[2. 0.]] 
    Node_2335 [120.  58.]
    + Elem_4190 4190.2 : [[2. 0.]] 
    + Elem_4309 
    + Elem_4310 4310.2 : [[2. 0.]] 
    Node_2396 [120.  60.]
    + Elem_4310 4310.2 : [[2. 0.]] 
    + Elem_4429 
    + Elem_4430 4430.2 : [[2. 0.]] 
    Node_2457 [120.  62.]
    + Elem_4430 4430.2 : [[2. 0.]] 
    + Elem_4549 
    + Elem_4550 4550.2 : [[2. 0.]] 
    Node_2518 [120.  64.]
    + Elem_4550 4550.2 : [[2. 0.]] 
    + Elem_4669 
    + Elem_4670 4670.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2579 [120.  66.]
    + Elem_4670 4670.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4789 
    + Elem_4790 4790.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_2640 [120.  68.]
    + Elem_4790 4790.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_4909 
    + Elem_4910 4910.2 : [[2. 0.]] 
    Node_2701 [120.  70.]
    + Elem_4910 4910.2 : [[2. 0.]] 
    + Elem_5029 
    + Elem_5030 5030.2 : [[2. 0.]] 
    Node_2762 [120.  72.]
    + Elem_5030 5030.2 : [[2. 0.]] 
    + Elem_5149 
    + Elem_5150 5150.2 : [[2. 0.]] 
    Node_2823 [120.  74.]
    + Elem_5150 5150.2 : [[2. 0.]] 
    + Elem_5269 
    + Elem_5270 5270.2 : [[2. 0.]] 
    Node_2884 [120.  76.]
    + Elem_5270 5270.2 : [[2. 0.]] 
    + Elem_5389 
    + Elem_5390 5390.2 : [[2. 0.]] 
    Node_2945 [120.  78.]
    + Elem_5390 5390.2 : [[2. 0.]] 
    + Elem_5509 
    + Elem_5510 5510.2 : [[2. 0.]] 
    Node_3006 [120.  80.]
    + Elem_5510 5510.2 : [[2. 0.]] 
    norm of the out-of-balance force:   2.5140e+02
    norm of the out-of-balance force:   1.4968e-10
    +





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.265 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate06.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate06.py <plot_plate06.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate06.ipynb <plot_plate06.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
