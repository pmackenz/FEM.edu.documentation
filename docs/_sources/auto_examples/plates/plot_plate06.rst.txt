
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate06.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate06.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate06.py:


==========================================================
Pulling a plate with a circular hole
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-129

.. code-block:: default

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate06(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 147-149

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 149-161

.. code-block:: default


    if __name__ == "__main__":

        import cProfile

        ex = ExamplePlate06()
        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_344 [120.   0.]
    + Elem_460 
    + Elem_461 461.2 : [[2. 0.]] 
    Node_405 [120.   2.]
    + Elem_461 461.2 : [[2. 0.]] 
    + Elem_580 
    + Elem_581 581.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_466 [120.   4.]
    + Elem_581 581.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_700 
    + Elem_701 701.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_527 [120.   6.]
    + Elem_701 701.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_820 
    + Elem_821 821.2 : [[2. 0.]] 
    Node_588 [120.   8.]
    + Elem_821 821.2 : [[2. 0.]] 
    + Elem_940 
    + Elem_941 941.2 : [[2. 0.]] 
    Node_649 [120.  10.]
    + Elem_941 941.2 : [[2. 0.]] 
    + Elem_1060 
    + Elem_1061 1061.2 : [[2. 0.]] 
    Node_710 [120.  12.]
    + Elem_1061 1061.2 : [[2. 0.]] 
    + Elem_1180 
    + Elem_1181 1181.2 : [[2. 0.]] 
    Node_771 [120.  14.]
    + Elem_1181 1181.2 : [[2. 0.]] 
    + Elem_1300 
    + Elem_1301 1301.2 : [[2. 0.]] 
    Node_832 [120.  16.]
    + Elem_1301 1301.2 : [[2. 0.]] 
    + Elem_1420 
    + Elem_1421 1421.2 : [[2. 0.]] 
    Node_893 [120.  18.]
    + Elem_1421 1421.2 : [[2. 0.]] 
    + Elem_1540 
    + Elem_1541 1541.2 : [[2. 0.]] 
    Node_954 [120.  20.]
    + Elem_1541 1541.2 : [[2. 0.]] 
    + Elem_1660 
    + Elem_1661 1661.2 : [[2. 0.]] 
    Node_1015 [120.  22.]
    + Elem_1661 1661.2 : [[2. 0.]] 
    + Elem_1780 
    + Elem_1781 1781.2 : [[2. 0.]] 
    Node_1076 [120.  24.]
    + Elem_1781 1781.2 : [[2. 0.]] 
    + Elem_1900 
    + Elem_1901 1901.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1137 [120.  26.]
    + Elem_1901 1901.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2020 
    + Elem_2021 2021.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1198 [120.  28.]
    + Elem_2021 2021.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2140 
    + Elem_2141 2141.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1259 [120.  30.]
    + Elem_2141 2141.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2260 
    + Elem_2261 2261.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1320 [120.  32.]
    + Elem_2261 2261.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2380 
    + Elem_2381 2381.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1381 [120.  34.]
    + Elem_2381 2381.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2500 
    + Elem_2501 2501.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1442 [120.  36.]
    + Elem_2501 2501.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2620 
    + Elem_2621 2621.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1503 [120.  38.]
    + Elem_2621 2621.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2740 
    + Elem_2741 2741.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1564 [120.  40.]
    + Elem_2741 2741.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2860 
    + Elem_2861 2861.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1625 [120.  42.]
    + Elem_2861 2861.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2980 
    + Elem_2981 2981.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1686 [120.  44.]
    + Elem_2981 2981.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3100 
    + Elem_3101 3101.2 : [[2. 0.]] 
    Node_1747 [120.  46.]
    + Elem_3101 3101.2 : [[2. 0.]] 
    + Elem_3220 
    + Elem_3221 3221.2 : [[2. 0.]] 
    Node_1808 [120.  48.]
    + Elem_3221 3221.2 : [[2. 0.]] 
    + Elem_3340 
    + Elem_3341 3341.2 : [[2. 0.]] 
    Node_1869 [120.  50.]
    + Elem_3341 3341.2 : [[2. 0.]] 
    + Elem_3460 
    + Elem_3461 3461.2 : [[2. 0.]] 
    Node_1930 [120.  52.]
    + Elem_3461 3461.2 : [[2. 0.]] 
    + Elem_3580 
    + Elem_3581 3581.2 : [[2. 0.]] 
    Node_1991 [120.  54.]
    + Elem_3581 3581.2 : [[2. 0.]] 
    + Elem_3700 
    + Elem_3701 3701.2 : [[2. 0.]] 
    Node_2052 [120.  56.]
    + Elem_3701 3701.2 : [[2. 0.]] 
    + Elem_3820 
    + Elem_3821 3821.2 : [[2. 0.]] 
    Node_2113 [120.  58.]
    + Elem_3821 3821.2 : [[2. 0.]] 
    + Elem_3940 
    + Elem_3941 3941.2 : [[2. 0.]] 
    Node_2174 [120.  60.]
    + Elem_3941 3941.2 : [[2. 0.]] 
    + Elem_4060 
    + Elem_4061 4061.2 : [[2. 0.]] 
    Node_2235 [120.  62.]
    + Elem_4061 4061.2 : [[2. 0.]] 
    + Elem_4180 
    + Elem_4181 4181.2 : [[2. 0.]] 
    Node_2296 [120.  64.]
    + Elem_4181 4181.2 : [[2. 0.]] 
    + Elem_4300 
    + Elem_4301 4301.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2357 [120.  66.]
    + Elem_4301 4301.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4420 
    + Elem_4421 4421.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_2418 [120.  68.]
    + Elem_4421 4421.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_4540 
    + Elem_4541 4541.2 : [[2. 0.]] 
    Node_2479 [120.  70.]
    + Elem_4541 4541.2 : [[2. 0.]] 
    + Elem_4660 
    + Elem_4661 4661.2 : [[2. 0.]] 
    Node_2540 [120.  72.]
    + Elem_4661 4661.2 : [[2. 0.]] 
    + Elem_4780 
    + Elem_4781 4781.2 : [[2. 0.]] 
    Node_2601 [120.  74.]
    + Elem_4781 4781.2 : [[2. 0.]] 
    + Elem_4900 
    + Elem_4901 4901.2 : [[2. 0.]] 
    Node_2662 [120.  76.]
    + Elem_4901 4901.2 : [[2. 0.]] 
    + Elem_5020 
    + Elem_5021 5021.2 : [[2. 0.]] 
    Node_2723 [120.  78.]
    + Elem_5021 5021.2 : [[2. 0.]] 
    + Elem_5140 
    + Elem_5141 5141.2 : [[2. 0.]] 
    Node_2784 [120.  80.]
    + Elem_5141 5141.2 : [[2. 0.]] 
    norm of the out-of-balance force:   2.5140e+02
    norm of the out-of-balance force:   4.5676e+01
    norm of the out-of-balance force:   6.8701e-01
    norm of the out-of-balance force:   1.9266e-04
    norm of the out-of-balance force:   2.4923e-10
    +





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  4.958 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate06.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate06.py <plot_plate06.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate06.ipynb <plot_plate06.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
