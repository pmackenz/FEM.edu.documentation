
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plates/plot_plate06.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plates_plot_plate06.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plates_plot_plate06.py:


==========================================================
Pulling a plate with a circular hole
==========================================================

Using PatchMesher to model a quarter of the plate

.. GENERATED FROM PYTHON SOURCE LINES 9-129

.. code-block:: default

    SPARSE = False

    import math
    import sys
    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.solver.SparseSolver import *
    from femedu.elements.linear.Triangle import *
    from femedu.materials.PlaneStress import *
    from femedu.mesher import *


    class ExamplePlate06(Example):

        def problem(self):
            # ========== setting mesh parameters ==============

            Nx = 60        # number of elements in the mesh
            Ny = 40        # number of elements in the mesh

            Lx = 120.0    # length of plate in the x-direction
            Ly =  80.0    # length of plate in the y-direction
            R  = Ly / 2.

            # ========== setting material parameters ==============

            params = dict(
                E  = 200.,      # Young's modulus
                nu = 0.450,     # Poisson's ratio
                t  = 1.00       # thickness of the plate
            )

            # ========== setting load parameters ==============

            px  = 20.0         # uniform load normal to x=const
            py  =  0.0         # uniform load normal to y=const
            pxy =  0.0         # uniform shear load on x=const and y=const

            # ========== setting analysis parameters ==============

            target_load_level = 1.00     # reference load
            max_steps = 2                # number of load steps: 2 -> [0.0, 1.0]

            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            if SPARSE:
                model.setSolver(SparseSolver())
            else:
                model.setSolver(NewtonRaphsonSolver())

            # create nodes

            #  3---------2
            #  |         |
            #  |         |
            #  |         |
            #  1---------1

            pts = (
                ( 0, 0),
                (Lx, 0),
                (Lx, Ly),
                (0, Ly),
            )

            mesher = PatchMesher(model, pts[0], pts[1], pts[2], pts[3])
            nodes, elements = mesher.triangleMesh(Nx, Ny, Triangle, PlaneStress(params))

            # define support(s)

            ## find nodes at y==0 and x==0

            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0], 0.0):
                    node.fixDOF('ux')    # horizontal support left side
                if math.isclose(X[1], 0.0):
                    node.fixDOF('uy')    # vertical support at y==0

            # ==== build the reference load ====

            # nodal loads
            dir = np.array([1.,0.])    # normal to surface
            x0  = np.array([Lx,0.0])   # reference point on the surface
            for node in nodes:
                X = node.getPos()
                if math.isclose(X[0],Lx):
                    print(node.getID(), node.getPos())
                    for elem in node.elements:
                        print('+', elem.getID(), end=' ')
                        for face in elem.faces:
                            dist = np.allclose( [ (x - x0) @ dir for x in face.pos ], 0.0 ) \
                                and np.allclose( [ t @ dir for t in face.tangent ], 0.0, atol=0.05)
                            if dist:
                                print(face.id, ":", face.area, end=' ')
                                face_idx = int(face.id[-1])
                                elem.setSurfaceLoad(face_idx, px, pxy)
                        print()

            #model.plot(factor=0, title="undeformed system", filename="plate06_undeformed.png", show_bc=1, show_loads=1)

            model.setLoadFactor(1.0)
            model.solve()

            #model.plot(factor=1., filename="plate06_deformed.png")

            #model.solver.showKt(filename="plate06_spy_Kt.png")
            #np.save("plate6_Kt.npy",model.solver.Kt)









.. GENERATED FROM PYTHON SOURCE LINES 147-149

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 149-161

.. code-block:: default


    if __name__ == "__main__":

        import cProfile

        ex = ExamplePlate06()
        if SPARSE:
            cProfile.run('ex.run()','profile_data_sparse.txt')
        else:
            cProfile.run('ex.run()','profile_data_full.txt')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node_386 [120.   0.]
    + Elem_507 
    + Elem_508 508.2 : [[2. 0.]] 
    Node_447 [120.   2.]
    + Elem_508 508.2 : [[2. 0.]] 
    + Elem_627 
    + Elem_628 628.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_508 [120.   4.]
    + Elem_628 628.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_747 
    + Elem_748 748.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_569 [120.   6.]
    + Elem_748 748.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_867 
    + Elem_868 868.2 : [[2. 0.]] 
    Node_630 [120.   8.]
    + Elem_868 868.2 : [[2. 0.]] 
    + Elem_987 
    + Elem_988 988.2 : [[2. 0.]] 
    Node_691 [120.  10.]
    + Elem_988 988.2 : [[2. 0.]] 
    + Elem_1107 
    + Elem_1108 1108.2 : [[2. 0.]] 
    Node_752 [120.  12.]
    + Elem_1108 1108.2 : [[2. 0.]] 
    + Elem_1227 
    + Elem_1228 1228.2 : [[2. 0.]] 
    Node_813 [120.  14.]
    + Elem_1228 1228.2 : [[2. 0.]] 
    + Elem_1347 
    + Elem_1348 1348.2 : [[2. 0.]] 
    Node_874 [120.  16.]
    + Elem_1348 1348.2 : [[2. 0.]] 
    + Elem_1467 
    + Elem_1468 1468.2 : [[2. 0.]] 
    Node_935 [120.  18.]
    + Elem_1468 1468.2 : [[2. 0.]] 
    + Elem_1587 
    + Elem_1588 1588.2 : [[2. 0.]] 
    Node_996 [120.  20.]
    + Elem_1588 1588.2 : [[2. 0.]] 
    + Elem_1707 
    + Elem_1708 1708.2 : [[2. 0.]] 
    Node_1057 [120.  22.]
    + Elem_1708 1708.2 : [[2. 0.]] 
    + Elem_1827 
    + Elem_1828 1828.2 : [[2. 0.]] 
    Node_1118 [120.  24.]
    + Elem_1828 1828.2 : [[2. 0.]] 
    + Elem_1947 
    + Elem_1948 1948.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1179 [120.  26.]
    + Elem_1948 1948.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2067 
    + Elem_2068 2068.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1240 [120.  28.]
    + Elem_2068 2068.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2187 
    + Elem_2188 2188.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1301 [120.  30.]
    + Elem_2188 2188.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2307 
    + Elem_2308 2308.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1362 [120.  32.]
    + Elem_2308 2308.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_2427 
    + Elem_2428 2428.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1423 [120.  34.]
    + Elem_2428 2428.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2547 
    + Elem_2548 2548.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1484 [120.  36.]
    + Elem_2548 2548.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2667 
    + Elem_2668 2668.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_1545 [120.  38.]
    + Elem_2668 2668.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_2787 
    + Elem_2788 2788.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1606 [120.  40.]
    + Elem_2788 2788.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_2907 
    + Elem_2908 2908.2 : [[2.00000000e+00 1.42108547e-14]] 
    Node_1667 [120.  42.]
    + Elem_2908 2908.2 : [[2.00000000e+00 1.42108547e-14]] 
    + Elem_3027 
    + Elem_3028 3028.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    Node_1728 [120.  44.]
    + Elem_3028 3028.2 : [[ 2.00000000e+00 -1.42108547e-14]] 
    + Elem_3147 
    + Elem_3148 3148.2 : [[2. 0.]] 
    Node_1789 [120.  46.]
    + Elem_3148 3148.2 : [[2. 0.]] 
    + Elem_3267 
    + Elem_3268 3268.2 : [[2. 0.]] 
    Node_1850 [120.  48.]
    + Elem_3268 3268.2 : [[2. 0.]] 
    + Elem_3387 
    + Elem_3388 3388.2 : [[2. 0.]] 
    Node_1911 [120.  50.]
    + Elem_3388 3388.2 : [[2. 0.]] 
    + Elem_3507 
    + Elem_3508 3508.2 : [[2. 0.]] 
    Node_1972 [120.  52.]
    + Elem_3508 3508.2 : [[2. 0.]] 
    + Elem_3627 
    + Elem_3628 3628.2 : [[2. 0.]] 
    Node_2033 [120.  54.]
    + Elem_3628 3628.2 : [[2. 0.]] 
    + Elem_3747 
    + Elem_3748 3748.2 : [[2. 0.]] 
    Node_2094 [120.  56.]
    + Elem_3748 3748.2 : [[2. 0.]] 
    + Elem_3867 
    + Elem_3868 3868.2 : [[2. 0.]] 
    Node_2155 [120.  58.]
    + Elem_3868 3868.2 : [[2. 0.]] 
    + Elem_3987 
    + Elem_3988 3988.2 : [[2. 0.]] 
    Node_2216 [120.  60.]
    + Elem_3988 3988.2 : [[2. 0.]] 
    + Elem_4107 
    + Elem_4108 4108.2 : [[2. 0.]] 
    Node_2277 [120.  62.]
    + Elem_4108 4108.2 : [[2. 0.]] 
    + Elem_4227 
    + Elem_4228 4228.2 : [[2. 0.]] 
    Node_2338 [120.  64.]
    + Elem_4228 4228.2 : [[2. 0.]] 
    + Elem_4347 
    + Elem_4348 4348.2 : [[2.00000000e+00 2.84217094e-14]] 
    Node_2399 [120.  66.]
    + Elem_4348 4348.2 : [[2.00000000e+00 2.84217094e-14]] 
    + Elem_4467 
    + Elem_4468 4468.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    Node_2460 [120.  68.]
    + Elem_4468 4468.2 : [[ 2.00000000e+00 -2.84217094e-14]] 
    + Elem_4587 
    + Elem_4588 4588.2 : [[2. 0.]] 
    Node_2521 [120.  70.]
    + Elem_4588 4588.2 : [[2. 0.]] 
    + Elem_4707 
    + Elem_4708 4708.2 : [[2. 0.]] 
    Node_2582 [120.  72.]
    + Elem_4708 4708.2 : [[2. 0.]] 
    + Elem_4827 
    + Elem_4828 4828.2 : [[2. 0.]] 
    Node_2643 [120.  74.]
    + Elem_4828 4828.2 : [[2. 0.]] 
    + Elem_4947 
    + Elem_4948 4948.2 : [[2. 0.]] 
    Node_2704 [120.  76.]
    + Elem_4948 4948.2 : [[2. 0.]] 
    + Elem_5067 
    + Elem_5068 5068.2 : [[2. 0.]] 
    Node_2765 [120.  78.]
    + Elem_5068 5068.2 : [[2. 0.]] 
    + Elem_5187 
    + Elem_5188 5188.2 : [[2. 0.]] 
    Node_2826 [120.  80.]
    + Elem_5188 5188.2 : [[2. 0.]] 
    norm of the out-of-balance force:   2.5140e+02
    norm of the out-of-balance force:   1.4968e-10
    +





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.776 seconds)


.. _sphx_glr_download_auto_examples_plates_plot_plate06.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_plate06.py <plot_plate06.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_plate06.ipynb <plot_plate06.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
