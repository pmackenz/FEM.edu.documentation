
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/frames/plot_frame01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_frames_plot_frame01.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_frames_plot_frame01.py:


======================================================
Buckling of a beam with pin-pin support
======================================================

modeled using a 2D frame element

.. code::

    x============x=============x  <---
    ^                          o

    x ..... node
    === ... frame element
    <-- ... applied force
    ^ ..... pin support
    o ..... roller support

    degrees of freedom:
    0 ... horizontal displacement, u
    1 ... vertical displacement, v
    2 ... rotation, theta


.. list-table:: setting given parameters

    * - N  = 2
      - number of elements
    * - L  = 100.0
      - column length
    * - EA = 2000000.0
      - axial stiffness
    * - EI = 21000.0
      - flexural stiffness
    * - w  = 0.1
      - applied lateral load

Author: Peter Mackenzie-Helnwein

.. GENERATED FROM PYTHON SOURCE LINES 40-196

.. code-block:: Python


    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.elements.finite.Frame2D import *
    from femedu.materials.ElasticSection import *


    class ExampleFrame01(Example):

        def problem(self):

            #
            # ==== Initialization ====
            #

            # ========== setting mesh parameters ==============

            N = 8         # number of elements in the mesh
            L = 100.0     # column free length


            # ========== setting material parameters ==============

            params = dict(
                E = 20000.,    # Young's modulus
                A = 100.0,     # cross section area
                I = 10.0       # cross section moment of inertia
            )

            # ========== setting load parameters ==============

            w   = -0.1         # uniform lateral load on the column
            Pcr = np.pi**2 * params['E'] * params['I'] / L**2    # Euler buckling load

            # ========== setting analysis parameters ==============

            target_load_level = 0.99      # 99% of Euler load
            max_steps = 10                # solve max_steps points on the primary path


            w   *= 0.01
            Pcr *= 0.01
            target_load_level = 99.      # 99% of Euler load



            # define a list of target load levels
            load_levels = np.linspace(0, target_load_level, max_steps)

            #
            # ==== Build the system model ====
            #

            model = System()
            model.setSolver(NewtonRaphsonSolver())

            # create nodes

            nd0 = Node(0.0, 0.0)
            model += nd0

            ndi = nd0
            for i in range(N):
                # nodes
                ndj = Node( (i+1)*L/N, 0.0 )
                model += ndj

                # elements
                elem = Frame2D(ndi, ndj, ElasticSection(params))
                model += elem

                # ** apply the element portion of the reference load
                elem.setDistLoad(w)

                ndi = ndj    # jump to next element: make current end-node the next start-node

            # define support(s)

            nd0.fixDOF('ux', 'uy')    # horizontal support left end
            ndi.fixDOF('uy')          # vertical support right end

            # ==== complete the reference load ====

            # these are only nodal forces as part of the reference load
            # .. load only the upper node
            ndi.setLoad((-Pcr,), ('ux',))

            # show model information
            print(model)

            #
            # ==== perform the analysis ===
            #

            print("\n==== perform the analysis ===\n")

            # * apply the load in multiple smaller load steps

            # set up data recorder
            model.initRecorder()
            model.trackStability(True)

            # initialize the analysis:
            model.resetDisplacements()   # set U to all zeros
            model.setLoadFactor(0.0)     # define a known equilibrium solution

            model.startRecorder()

            detKt   = []
            lambdas = []

            # solve for all load_levels
            for loadfactor in load_levels:

                # define node X2 as the controled node; downward direction is prescribed:
                model.setLoadFactor(loadfactor)
                model.solve(verbose=True)

                # stability check
                lambdas.append(model.loadfactor)
                detKt.append(model.solver.checkStability())

                # report results
                print('+')
                #model.report()

                print("\n=== next load level ===\n")


            #
            # ==== create some nice plots ===
            #

            model.report()

            model.plot(factor=1.0, filename="frame1_deformed.png")

            fig, ax = plt.subplots()

            ax.plot(lambdas,detKt,'--*r')
            ax.grid(True)
            ax.set_xlabel('Load factor, $ \\lambda $')
            ax.set_ylabel("Stability index, $ {det}\\: {\\bf K}_t $")

            fig.savefig("frame1_stability.png")
            fig.show()

            model.beamValuePlot("F", filename="frame1_force.png")
            model.beamValuePlot("V", filename="frame1_shear.png")
            model.beamValuePlot("M", filename="frame1_moment.png")

            model.plotBucklingMode(factor=10., filename="frame1_buckling_mode0.png")









.. GENERATED FROM PYTHON SOURCE LINES 231-233

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 233-238

.. code-block:: Python


    if __name__ == "__main__":
        ex = ExampleFrame01()
        ex.run()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame01_001.png
         :alt: Deformed System (magnification=1.00)
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame01_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame01_002.png
         :alt: plot frame01
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame01_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame01_003.png
         :alt: Axial Forces
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame01_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame01_004.png
         :alt: Shear Forces
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame01_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame01_005.png
         :alt: Bending Moment
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame01_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame01_006.png
         :alt: Mode Shape for $ \lambda = 0.02 $
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame01_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    System object
    Node_177(x=[0 0], u=None)
    Node_178(x=[12.5 0], u=None)
    Node_179(x=[25 0], u=None)
    Node_180(x=[37.5 0], u=None)
    Node_181(x=[50 0], u=None)
    Node_182(x=[62.5 0], u=None)
    Node_183(x=[75 0], u=None)
    Node_184(x=[87.5 0], u=None)
    Node_185(x=[100 0], u=None)
    Frame2D(Node_177, Node_178, ElasticSection(Material)({'E': 20000.0, 'A': 100.0, 'I': 10.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_178, Node_179, ElasticSection(Material)({'E': 20000.0, 'A': 100.0, 'I': 10.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_179, Node_180, ElasticSection(Material)({'E': 20000.0, 'A': 100.0, 'I': 10.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_180, Node_181, ElasticSection(Material)({'E': 20000.0, 'A': 100.0, 'I': 10.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_181, Node_182, ElasticSection(Material)({'E': 20000.0, 'A': 100.0, 'I': 10.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_182, Node_183, ElasticSection(Material)({'E': 20000.0, 'A': 100.0, 'I': 10.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_183, Node_184, ElasticSection(Material)({'E': 20000.0, 'A': 100.0, 'I': 10.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_184, Node_185, ElasticSection(Material)({'E': 20000.0, 'A': 100.0, 'I': 10.0, 'nu': 0.0, 'fy': 1e+30}))

    ==== perform the analysis ===

    norm of the out-of-balance force:   0.0000e+00

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        2.43

    +

     ** Stability check: (smallest eigenvalue of Kt) = 2.432144038335496

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   3.9834e-02
    norm of the out-of-balance force:   3.5439e-11

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        2.16

    +

     ** Stability check: (smallest eigenvalue of Kt) = 2.1646162524938175

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   8.9520e-02
    norm of the out-of-balance force:   2.5189e-11

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        1.90

    +

     ** Stability check: (smallest eigenvalue of Kt) = 1.8970864809980343

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   1.5323e-01
    norm of the out-of-balance force:   2.8547e-11

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        1.63

    +

     ** Stability check: (smallest eigenvalue of Kt) = 1.6295547208400913

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   2.3787e-01
    norm of the out-of-balance force:   4.7667e-11

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        1.36

    +

     ** Stability check: (smallest eigenvalue of Kt) = 1.3620209694352918

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   3.5578e-01
    norm of the out-of-balance force:   4.8415e-11

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        1.09

    +

     ** Stability check: (smallest eigenvalue of Kt) = 1.0944852245476049

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   5.3137e-01
    norm of the out-of-balance force:   1.9768e-11

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        0.83

    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.8269474836464931

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   8.2064e-01
    norm of the out-of-balance force:   2.6538e-12

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        0.56

    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.5594077439021518

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   1.3867e+00
    norm of the out-of-balance force:   2.6658e-11

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        0.29

    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.2918660029127227

    +

    === next load level ===

    norm of the out-of-balance force:   2.1717e+01
    norm of the out-of-balance force:   2.9907e+00
    norm of the out-of-balance force:   6.7525e-09

     ** Stability check: (smallest 1 eigenvalues of Kt)
                            mode 0:        0.02

    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.02432225800791405

    +

    === next load level ===


    System Analysis Report
    =======================

    Nodes:
    ---------------------
      Node_177:
          x:    [0.000 0.000]
          fix:  ['ux', 'uy']
          u:    [0.000 0.000 -2.033]
      Node_178:
          x:    [12.500 0.000]
          u:    [-0.001 -24.762 -1.878]
      Node_179:
          x:    [25.000 0.000]
          u:    [-0.002 -45.751 -1.437]
      Node_180:
          x:    [37.500 0.000]
          u:    [-0.004 -59.773 -0.778]
      Node_181:
          x:    [50.000 0.000]
          u:    [-0.005 -64.697 -0.000]
      Node_182:
          x:    [62.500 0.000]
          u:    [-0.006 -59.773 0.778]
      Node_183:
          x:    [75.000 0.000]
          u:    [-0.007 -45.751 1.437]
      Node_184:
          x:    [87.500 0.000]
          u:    [-0.009 -24.762 1.878]
      Node_185:
          x:    [100.000 0.000]
          fix:  ['uy']
          P:    [-1.974 0.000 0.000]
          u:    [-0.010 0.000 2.033]

    Elements:
    ---------------------
      Frame2D_290: nodes ( Node_177 Node_178 )
          material: ElasticSection
          internal forces: f0=-195.42 V0=4.33 M0=1.29 fl=-195.42 Vl=4.33 Ml=4894.46 Pw=-0.62 Mw=-1.29
      Frame2D_291: nodes ( Node_178 Node_179 )
          material: ElasticSection
          internal forces: f0=-195.42 V0=3.09 M0=4894.46 fl=-195.42 Vl=3.09 Ml=9034.77 Pw=-0.62 Mw=-1.29
      Frame2D_292: nodes ( Node_179 Node_180 )
          material: ElasticSection
          internal forces: f0=-195.42 V0=1.86 M0=9034.77 fl=-195.42 Vl=1.86 Ml=11798.12 Pw=-0.62 Mw=-1.29
      Frame2D_293: nodes ( Node_180 Node_181 )
          material: ElasticSection
          internal forces: f0=-195.42 V0=0.62 M0=11798.12 fl=-195.42 Vl=0.62 Ml=12767.97 Pw=-0.62 Mw=-1.29
      Frame2D_294: nodes ( Node_181 Node_182 )
          material: ElasticSection
          internal forces: f0=-195.42 V0=-0.62 M0=12767.97 fl=-195.42 Vl=-0.62 Ml=11798.12 Pw=-0.62 Mw=-1.29
      Frame2D_295: nodes ( Node_182 Node_183 )
          material: ElasticSection
          internal forces: f0=-195.42 V0=-1.86 M0=11798.12 fl=-195.42 Vl=-1.86 Ml=9034.77 Pw=-0.62 Mw=-1.29
      Frame2D_296: nodes ( Node_183 Node_184 )
          material: ElasticSection
          internal forces: f0=-195.42 V0=-3.09 M0=9034.77 fl=-195.42 Vl=-3.09 Ml=4894.46 Pw=-0.62 Mw=-1.29
      Frame2D_297: nodes ( Node_184 Node_185 )
          material: ElasticSection
          internal forces: f0=-195.42 V0=-4.33 M0=4894.46 fl=-195.42 Vl=-4.33 Ml=1.29 Pw=-0.62 Mw=-1.29






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.112 seconds)


.. _sphx_glr_download_auto_examples_frames_plot_frame01.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_frame01.ipynb <plot_frame01.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_frame01.py <plot_frame01.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_frame01.zip <plot_frame01.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
