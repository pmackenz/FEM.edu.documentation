
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/frames/plot_frame04.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_frames_plot_frame04.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_frames_plot_frame04.py:


======================================================
Buckling of a building frame
======================================================

modeled using
* a 2D frame element
* inclined boundary condition (using Transformation)
* element loading

.. list-table:: setting given parameters

    * - N  = 2
      - number of elements
    * - L  = 100.0
      - column length
    * - EA = 2000000.0
      - axial stiffness
    * - EI = 21000.0
      - flexural stiffness
    * - w  = 0.1
      - applied lateral load

Author: Peter Mackenzie-Helnwein

.. GENERATED FROM PYTHON SOURCE LINES 26-143

.. code-block:: Python

    import numpy as np

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.elements.finite.Frame2D import *
    from femedu.materials.ElasticSection import *


    class ExampleFrame04(Example):


        def createMesh(self, nelem=4):
            """
            Creates a mesh using `nelem` elements for each of the straight segments.
            """
            if (not isinstance(nelem, int)) or nelem % 4:
                msg = "nelem must be an integer multiple of 4 (4,8,12,...)"
                raise TypeError(msg)

            # units
            inch = 1
            ft = 12 * inch
            kip = 1
            kips = kip
            lb = kip / 1000
            psi = lb / inch ** 2
            ksi = kip / inch ** 2
            degrees = np.pi / 180.

            # problem parameters
            MOE =  29000 * ksi
            EI  = 162133 * kips * inch ** 2
            EA  =  30400 * kips
            L   =     10 * ft
            w0  =  0.333 * kip / ft

            s = np.linspace(0.0, 1.0, nelem // 2 + 1)

            params = dict(
                E = MOE,
                A = EA/MOE,
                I = EI/MOE,
            )

            material = ElasticSection(params)

            # nodes
            nodes  = [ Node(0.0, si * L) for si in s]
            nodes += [ Node(si * L * np.cos(np.radians(30.)), L + si * L * np.sin(np.radians(30.))) for si in s[1:]]

            # elements
            elements = [Frame2D(nodes[i], nodes[i+1], material) for i in range(nelem)]

            # fixities
            # ... the first node
            nodes[0].fixDOF(['ux','uy','rz'])
            # ... the last node
            nvec = nodes[1].getPos() - nodes[0].getPos()   # vector parallel to the member axis
            svec = np.array([[0, 1],[-1, 0]]) @ nvec       # vector perpendicular to the member axis

            try:
                transform = Frame2dTransformation(nvec, svec)  # an in-plane rotation
                nodes[-1].addTransformation(transform)         # defining a local frame for the last node
            except:
                print("no transformation class found")
            nodes[-1].fixDOF(['uy', ])                     # fixing the LOCAL y-direction

            # load the top half of the vertical member
            # and the first half of the inclined member
            for i in range(nelem//4, 3*nelem//4):
                elements[i].setDistLoad(-w0)

            return (nodes, elements)

        def problem(self):
            # initialize a system model

            N  = 8     # number of elements

            # ========== setting global parameters ==============

            target_load_level = 1.

            # ========= build your structural model =============

            model = System()
            model.setSolver(NewtonRaphsonSolver())

            nodes, elements = self.createMesh(N)

            model.addNode(*nodes)
            model.addElement(*elements)

            # show model information
            print(model)

            print("\n==== perform the analysis ===\n")

            # solve
            model.setLoadFactor(target_load_level)
            model.solve(verbose=True)

            #
            # ==== create some nice plots ===
            #

            model.report()

            model.plot(factor=10.0, filename="frame4_deformed.png", show_bc=1)

            model.beamValuePlot("F", filename="frame4_force.png")
            model.beamValuePlot("V", filename="frame4_shear.png")
            model.beamValuePlot("M", filename="frame4_moment.png")









.. GENERATED FROM PYTHON SOURCE LINES 162-164

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 164-170

.. code-block:: Python


    if __name__ == "__main__":
        ex = ExampleFrame04()
        ex.run()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_001.png
         :alt: Deformed System (magnification=10.00)
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_002.png
         :alt: Axial Forces
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_003.png
         :alt: Shear Forces
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_004.png
         :alt: Bending Moment
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    no transformation class found
    System object
    Node_199(x=[0. 0.], u=None)
    Node_200(x=[ 0. 30.], u=None)
    Node_201(x=[ 0. 60.], u=None)
    Node_202(x=[ 0. 90.], u=None)
    Node_203(x=[  0. 120.], u=None)
    Node_204(x=[ 25.98076211 135.        ], u=None)
    Node_205(x=[ 51.96152423 150.        ], u=None)
    Node_206(x=[ 77.94228634 165.        ], u=None)
    Node_207(x=[103.92304845 180.        ], u=None)
    Frame2D(Node_199, Node_200, ElasticSection(Material)({'E': 29000.0, 'A': 1.0482758620689656, 'I': 5.590793103448276, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_200, Node_201, ElasticSection(Material)({'E': 29000.0, 'A': 1.0482758620689656, 'I': 5.590793103448276, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_201, Node_202, ElasticSection(Material)({'E': 29000.0, 'A': 1.0482758620689656, 'I': 5.590793103448276, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_202, Node_203, ElasticSection(Material)({'E': 29000.0, 'A': 1.0482758620689656, 'I': 5.590793103448276, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_203, Node_204, ElasticSection(Material)({'E': 29000.0, 'A': 1.0482758620689656, 'I': 5.590793103448276, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_204, Node_205, ElasticSection(Material)({'E': 29000.0, 'A': 1.0482758620689656, 'I': 5.590793103448276, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_205, Node_206, ElasticSection(Material)({'E': 29000.0, 'A': 1.0482758620689656, 'I': 5.590793103448276, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_206, Node_207, ElasticSection(Material)({'E': 29000.0, 'A': 1.0482758620689656, 'I': 5.590793103448276, 'nu': 0.0, 'fy': 1e+30}))

    ==== perform the analysis ===

    norm of the out-of-balance force:   3.3039e+00
    norm of the out-of-balance force:   3.8349e-02
    norm of the out-of-balance force:   2.5580e-04
    norm of the out-of-balance force:   3.4300e-06
    norm of the out-of-balance force:   6.3097e-08
    +

    System Analysis Report
    =======================

    Nodes:
    ---------------------
      Node_199:
          x:    [0. 0.]
          fix:  ['ux', 'uy', 'rz']
          u:    [0. 0. 0.]
      Node_200:
          x:    [ 0. 30.]
          u:    [ 4.19099799e-01 -2.40247840e-04 -2.56261850e-02]
      Node_201:
          x:    [ 0. 60.]
          u:    [ 1.39859799e+00 -4.80495679e-04 -3.73556856e-02]
      Node_202:
          x:    [ 0. 90.]
          u:    [ 2.52708571e+00 -7.20743519e-04 -3.59428101e-02]
      Node_203:
          x:    [  0. 120.]
          u:    [ 3.46226303e+00 -9.60991359e-04 -2.52399957e-02]
      Node_204:
          x:    [ 25.98076211 135.        ]
          u:    [ 3.73221485 -0.46734855 -0.01050021]
      Node_205:
          x:    [ 51.96152423 150.        ]
          u:    [ 3.78417043e+00 -5.56155537e-01  3.06406795e-03]
      Node_206:
          x:    [ 77.94228634 165.        ]
          u:    [ 3.6671898  -0.35235644  0.01164578]
      Node_207:
          x:    [103.92304845 180.        ]
          fix:  ['uy']
          u:    [3.46443956 0.         0.01450319]

    Elements:
    ---------------------
      Frame2D_309: nodes ( Node_199 Node_200 )
          material: ElasticSection
          internal forces: f0=-0.24 V0=2.50 M0=-175.99 fl=-0.24 Vl=2.50 Ml=-100.97 Pw=0.00 Mw=0.00
      Frame2D_310: nodes ( Node_200 Node_201 )
          material: ElasticSection
          internal forces: f0=-0.24 V0=2.50 M0=-100.97 fl=-0.24 Vl=2.50 Ml=-25.80 Pw=0.00 Mw=0.00
      Frame2D_311: nodes ( Node_201 Node_202 )
          material: ElasticSection
          internal forces: f0=-0.24 V0=2.08 M0=-23.72 fl=-0.24 Vl=2.08 Ml=38.99 Pw=-0.42 Mw=-2.08
      Frame2D_312: nodes ( Node_202 Node_203 )
          material: ElasticSection
          internal forces: f0=-0.24 V0=1.25 M0=38.99 fl=-0.24 Vl=1.25 Ml=76.68 Pw=-0.42 Mw=-2.08
      Frame2D_313: nodes ( Node_203 Node_204 )
          material: ElasticSection
          internal forces: f0=0.60 V0=0.21 M0=76.68 fl=0.60 Vl=0.21 Ml=82.68 Pw=-0.42 Mw=-2.08
      Frame2D_314: nodes ( Node_204 Node_205 )
          material: ElasticSection
          internal forces: f0=0.60 V0=-0.62 M0=82.68 fl=0.60 Vl=-0.62 Ml=63.97 Pw=-0.42 Mw=-2.08
      Frame2D_315: nodes ( Node_205 Node_206 )
          material: ElasticSection
          internal forces: f0=0.60 V0=-1.04 M0=61.89 fl=0.60 Vl=-1.04 Ml=30.89 Pw=0.00 Mw=0.00
      Frame2D_316: nodes ( Node_206 Node_207 )
          material: ElasticSection
          internal forces: f0=0.60 V0=-1.04 M0=30.89 fl=0.60 Vl=-1.04 Ml=0.00 Pw=0.00 Mw=0.00






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.538 seconds)


.. _sphx_glr_download_auto_examples_frames_plot_frame04.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_frame04.ipynb <plot_frame04.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_frame04.py <plot_frame04.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_frame04.zip <plot_frame04.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
