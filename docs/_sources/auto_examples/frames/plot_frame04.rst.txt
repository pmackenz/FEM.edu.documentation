
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/frames/plot_frame04.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_frames_plot_frame04.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_frames_plot_frame04.py:


======================================================
Buckling of a building frame
======================================================

modeled using a 2D frame element

.. list-table:: setting given parameters

    * - N  = 2
      - number of elements
    * - L  = 100.0
      - column length
    * - EA = 2000000.0
      - axial stiffness
    * - EI = 21000.0
      - flexural stiffness
    * - w  = 0.1
      - applied lateral load

Author: Peter Mackenzie-Helnwein

.. GENERATED FROM PYTHON SOURCE LINES 23-301

.. code-block:: default

    from femedu.examples.Example import *

    from femedu.domain import *
    from femedu.solver.NewtonRaphsonSolver import *
    from femedu.elements.finite.Frame2D import *
    from femedu.materials.ElasticSection import *


    class ExampleFrame04(Example):

        def problem(self):
            # initialize a system model

            N  = 8     # number of elements

            B = 720.
            H = 720.

            E  = 29000.0
            A = 150.0
            I = 250.0

            w = 0.10
            load_at_nodes_only = False # set to True to apply equivalent nodal forces and moments

            Ph = 0.01      # additional horizontal load per floor
            Ph = 0.10      # additional horizontal load per floor
            Ph = 1.00      # additional horizontal load per floor
            Ph = 0.00      # additional horizontal load per floor

            # ========== setting global parameters ==============

            target_load_level = 33.
            max_steps = 10
            load_levels = np.linspace(0, target_load_level, max_steps)

            # ========= build your structural model =============

            model = System()
            model.setSolver(NewtonRaphsonSolver())

            x0 = 0.0
            x1 = B / 3
            x2 = 2 * B / 3
            x3 = B

            y0 = 0.0
            y1 = H / 4
            y2 = 2 * H / 4
            y3 = 3 * H / 4
            y4 = H

            X10 = Node(x0, y0)
            X11 = Node(x0, y1)
            X12 = Node(x0, y2)
            X13 = Node(x0, y3)
            X14 = Node(x0, y4)

            X20 = Node(x1, y0)
            X21 = Node(x1, y1)
            X22 = Node(x1, y2)
            X23 = Node(x1, y3)
            X24 = Node(x1, y4)

            X30 = Node(x2, y0)
            X31 = Node(x2, y1)
            X32 = Node(x2, y2)
            X33 = Node(x2, y3)
            X34 = Node(x2, y4)

            X40 = Node(x3, y0)
            X41 = Node(x3, y1)
            X42 = Node(x3, y2)
            X43 = Node(x3, y3)
            X44 = Node(x3, y4)

            model.addNode(X10,X11,X12,X13,X14)
            model.addNode(X20,X21,X22,X23,X24)
            model.addNode(X30,X31,X32,X33,X34)
            model.addNode(X40,X41,X42,X43,X44)

            # columns

            params = {'E': E, 'A': A, 'I': I}

            C11 = Frame2D(X10, X11, ElasticSection(params))
            C12 = Frame2D(X11, X12, ElasticSection(params))
            C13 = Frame2D(X12, X13, ElasticSection(params))
            C14 = Frame2D(X13, X14, ElasticSection(params))

            model.addElement(C11,C12,C13,C14)

            params = {'E': E, 'A': 2*A, 'I': 1.5*I}

            C21 = Frame2D(X20, X21, ElasticSection(params))
            C22 = Frame2D(X21, X22, ElasticSection(params))
            C23 = Frame2D(X22, X23, ElasticSection(params))
            C24 = Frame2D(X23, X24, ElasticSection(params))

            model.addElement(C21,C22,C23,C24)

            C31 = Frame2D(X30, X31, ElasticSection(params))
            C32 = Frame2D(X31, X32, ElasticSection(params))
            C33 = Frame2D(X32, X33, ElasticSection(params))
            C34 = Frame2D(X33, X34, ElasticSection(params))

            model.addElement(C31,C32,C33,C34)

            params = {'E': E, 'A': A, 'I': I}

            C41 = Frame2D(X40, X41, ElasticSection(params))
            C42 = Frame2D(X41, X42, ElasticSection(params))
            C43 = Frame2D(X42, X43, ElasticSection(params))
            C44 = Frame2D(X43, X44, ElasticSection(params))

            model.addElement(C41,C42,C43,C44)

            # floors

            params = {'E': E, 'A': A, 'I': 3*I}

            F11 = Frame2D(X11, X21, ElasticSection(params))
            F12 = Frame2D(X21, X31, ElasticSection(params))
            F13 = Frame2D(X31, X41, ElasticSection(params))

            model.addElement(F11,F12,F13)

            F21 = Frame2D(X12, X22, ElasticSection(params))
            F22 = Frame2D(X22, X32, ElasticSection(params))
            F23 = Frame2D(X32, X42, ElasticSection(params))

            model.addElement(F21,F22,F23)

            F31 = Frame2D(X13, X23, ElasticSection(params))
            F32 = Frame2D(X23, X33, ElasticSection(params))
            F33 = Frame2D(X33, X43, ElasticSection(params))

            model.addElement(F31,F32,F33)

            F41 = Frame2D(X14, X24, ElasticSection(params))
            F42 = Frame2D(X24, X34, ElasticSection(params))
            F43 = Frame2D(X34, X44, ElasticSection(params))

            model.addElement(F41,F42,F43)

            # fixities
            X10.fixDOF('ux','uy','rz')   # fixed
            X20.fixDOF('ux','uy','rz')   # fixed
            X30.fixDOF('ux','uy','rz')   # fixed
            X40.fixDOF('ux','uy','rz')   # fixed

            # reference load
            #Pcr = np.pi**2 * EI / L**2
            model.resetLoad()            # size load vector and initialize
            #model.addLoad(Xn, -Pcr, dof=0) # add a horizontal force (first dof only) ; remember C-style indexing: 0,1,...,(n-1)

            if load_at_nodes_only:

                # floor loading as nodal loads ...

                Pe = w * B/3
                Mi = w * (B/3)**2 /12

                X11.addLoad([-Pe/2., -Mi],['uy','rz'])
                X21.addLoad([-Pe/2.,  0.],['uy','rz'])
                X31.addLoad([-Pe/2.,  0.],['uy','rz'])
                X41.addLoad([-Pe/2.,  Mi],['uy','rz'])

                X12.addLoad([-Pe/2., -Mi],['uy','rz'])
                X22.addLoad([-Pe/2.,  0.],['uy','rz'])
                X32.addLoad([-Pe/2.,  0.],['uy','rz'])
                X42.addLoad([-Pe/2.,  Mi],['uy','rz'])

                X13.addLoad([-Pe/2., -Mi],['uy','rz'])
                X23.addLoad([-Pe/2.,  0.],['uy','rz'])
                X33.addLoad([-Pe/2.,  0.],['uy','rz'])
                X43.addLoad([-Pe/2.,  Mi],['uy','rz'])

                X14.addLoad([-Pe/2., -Mi],['uy','rz'])
                X24.addLoad([-Pe/2.,  0.],['uy','rz'])
                X34.addLoad([-Pe/2.,  0.],['uy','rz'])
                X44.addLoad([-Pe/2.,  Mi],['uy','rz'])

            else:

                # floor loading as distributed loads ...

                F11.setDistLoad(-w)
                F12.setDistLoad(-w)
                F13.setDistLoad(-w)

                F21.setDistLoad(-w)
                F22.setDistLoad(-w)
                F23.setDistLoad(-w)

                F31.setDistLoad(-w)
                F32.setDistLoad(-w)
                F33.setDistLoad(-w)

                F41.setDistLoad(-w)
                F42.setDistLoad(-w)
                F43.setDistLoad(-w)


            # wind load ...

            X11.addLoad([Ph],['ux'])   # horizontal load
            X12.addLoad([Ph],['ux'])   # horizontal load
            X13.addLoad([Ph],['ux'])   # horizontal load
            X14.addLoad([Ph/2],['ux']) # horizontal load


            # show model information
            print(model)

            print("\n==== perform the analysis ===\n")

            # * apply the load in multiple smaller load steps

            # set up data recorder
            model.initRecorder()
            model.trackStability(True)

            # initialize the analysis:
            model.resetDisplacements()   # set U to all zeros
            model.setLoadFactor(0.0)     # define a known equilibrium solution

            model.startRecorder()

            detKt   = []
            lambdas = []

            # solve for all load_levels
            for loadfactor in load_levels:

                # define node X2 as the controled node; downward direction is prescribed:
                model.setLoadFactor(loadfactor)
                model.solve(verbose=True)

                # stability check
                lambdas.append(model.loadfactor)
                detKt.append(model.solver.checkStability())

                # report results
                print('+')
                #model.report()

                print("\n=== next load level ===\n")


            #
            # ==== create some nice plots ===
            #

            model.report()

            model.plot(factor=10.0, filename="frame4_deformed.png", show_bc=1)

            fig, ax = plt.subplots()

            ax.plot(lambdas,detKt,'--*r')
            ax.grid(True)
            ax.set_xlabel('Load factor, $ \lambda $')
            ax.set_ylabel("Stability index, $ {det}\: {\\bf K}_t $")

            fig.savefig("frame4_stability.png")
            fig.show()

            model.beamValuePlot("F", filename="frame4_force.png")
            model.beamValuePlot("V", filename="frame4_shear.png")
            model.beamValuePlot("M", filename="frame4_moment.png")

            model.plotBucklingMode(factor=100., mode=0, filename="frame4_buckling_mode0.png")
            model.plotBucklingMode(factor=100., mode=1, filename="frame4_buckling_mode1.png")
            model.plotBucklingMode(factor=100., mode=2, filename="frame4_buckling_mode2.png")
            model.plotBucklingMode(factor=100., mode=3, filename="frame4_buckling_mode3.png")









.. GENERATED FROM PYTHON SOURCE LINES 317-319

Run the example by creating an instance of the problem and executing it by calling :py:meth:`Example.run()`


.. GENERATED FROM PYTHON SOURCE LINES 319-325

.. code-block:: default


    if __name__ == "__main__":
        ex = ExampleFrame04()
        ex.run()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_001.png
         :alt: Deformed System (magnification=10.00)
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_002.png
         :alt: plot frame04
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_003.png
         :alt: Axial Forces
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_004.png
         :alt: Shear Forces
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_005.png
         :alt: Bending Moment
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_006.png
         :alt: Mode Shape for $ \lambda = -0.05 $
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_007.png
         :alt: Mode Shape for $ \lambda = 3.53 $
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_008.png
         :alt: Mode Shape for $ \lambda = 13.51 $
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/frames/images/sphx_glr_plot_frame04_009.png
         :alt: Mode Shape for $ \lambda = 34.10 $
         :srcset: /auto_examples/frames/images/sphx_glr_plot_frame04_009.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    System object
    Node_55(x=[0. 0.], u=None)
    Node_56(x=[  0. 180.], u=None)
    Node_57(x=[  0. 360.], u=None)
    Node_58(x=[  0. 540.], u=None)
    Node_59(x=[  0. 720.], u=None)
    Node_60(x=[240.   0.], u=None)
    Node_61(x=[240. 180.], u=None)
    Node_62(x=[240. 360.], u=None)
    Node_63(x=[240. 540.], u=None)
    Node_64(x=[240. 720.], u=None)
    Node_65(x=[480.   0.], u=None)
    Node_66(x=[480. 180.], u=None)
    Node_67(x=[480. 360.], u=None)
    Node_68(x=[480. 540.], u=None)
    Node_69(x=[480. 720.], u=None)
    Node_70(x=[720.   0.], u=None)
    Node_71(x=[720. 180.], u=None)
    Node_72(x=[720. 360.], u=None)
    Node_73(x=[720. 540.], u=None)
    Node_74(x=[720. 720.], u=None)
    Frame2D(Node_55, Node_56, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 250.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_56, Node_57, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 250.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_57, Node_58, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 250.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_58, Node_59, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 250.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_60, Node_61, ElasticSection(Material)({'E': 29000.0, 'A': 300.0, 'I': 375.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_61, Node_62, ElasticSection(Material)({'E': 29000.0, 'A': 300.0, 'I': 375.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_62, Node_63, ElasticSection(Material)({'E': 29000.0, 'A': 300.0, 'I': 375.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_63, Node_64, ElasticSection(Material)({'E': 29000.0, 'A': 300.0, 'I': 375.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_65, Node_66, ElasticSection(Material)({'E': 29000.0, 'A': 300.0, 'I': 375.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_66, Node_67, ElasticSection(Material)({'E': 29000.0, 'A': 300.0, 'I': 375.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_67, Node_68, ElasticSection(Material)({'E': 29000.0, 'A': 300.0, 'I': 375.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_68, Node_69, ElasticSection(Material)({'E': 29000.0, 'A': 300.0, 'I': 375.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_70, Node_71, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 250.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_71, Node_72, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 250.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_72, Node_73, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 250.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_73, Node_74, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 250.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_56, Node_61, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_61, Node_66, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_66, Node_71, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_57, Node_62, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_62, Node_67, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_67, Node_72, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_58, Node_63, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_63, Node_68, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_68, Node_73, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_59, Node_64, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_64, Node_69, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))
    Frame2D(Node_69, Node_74, ElasticSection(Material)({'E': 29000.0, 'A': 150.0, 'I': 750.0, 'nu': 0.0, 'fy': 1e+30}))

    ==== perform the analysis ===

    norm of the out-of-balance force:   0.0000e+00
    +

     ** Stability check: (smallest eigenvalue of Kt) = 1.4498657937111088

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   2.5683e+01
    norm of the out-of-balance force:   6.8711e-03
    norm of the out-of-balance force:   2.4495e-06
    norm of the out-of-balance force:   1.0584e-07
    +

     ** Stability check: (smallest eigenvalue of Kt) = 1.3039606865602935

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   5.2545e+01
    norm of the out-of-balance force:   2.8485e-02
    norm of the out-of-balance force:   2.0788e-05
    norm of the out-of-balance force:   6.3601e-08
    +

     ** Stability check: (smallest eigenvalue of Kt) = 1.155824438725933

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   8.0699e+01
    norm of the out-of-balance force:   6.6491e-02
    norm of the out-of-balance force:   7.4367e-05
    norm of the out-of-balance force:   9.9413e-08
    +

     ** Stability check: (smallest eigenvalue of Kt) = 1.0049715576890383

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   1.1028e+02
    norm of the out-of-balance force:   1.2275e-01
    norm of the out-of-balance force:   1.8726e-04
    norm of the out-of-balance force:   2.5954e-07
    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.850725023509133

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   1.4143e+02
    norm of the out-of-balance force:   1.9938e-01
    norm of the out-of-balance force:   3.8921e-04
    norm of the out-of-balance force:   6.6310e-07
    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.6920949784996967

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   1.7435e+02
    norm of the out-of-balance force:   2.9877e-01
    norm of the out-of-balance force:   7.1690e-04
    norm of the out-of-balance force:   1.5040e-06
    norm of the out-of-balance force:   2.3220e-08
    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.5275391348523004

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   2.0925e+02
    norm of the out-of-balance force:   4.2361e-01
    norm of the out-of-balance force:   1.2154e-03
    norm of the out-of-balance force:   3.0763e-06
    norm of the out-of-balance force:   2.9159e-08
    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.35442857205581646

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   2.4638e+02
    norm of the out-of-balance force:   5.7696e-01
    norm of the out-of-balance force:   1.9401e-03
    norm of the out-of-balance force:   5.8215e-06
    norm of the out-of-balance force:   2.5055e-08
    +

     ** Stability check: (smallest eigenvalue of Kt) = 0.167634389245791

    +

    === next load level ===

    norm of the out-of-balance force:   4.9858e+03
    norm of the out-of-balance force:   2.8607e+02
    norm of the out-of-balance force:   7.6225e-01
    norm of the out-of-balance force:   2.9585e-03
    norm of the out-of-balance force:   1.0393e-05
    norm of the out-of-balance force:   3.6155e-08
    +

     ** Stability check: (smallest eigenvalue of Kt) = -0.045296265142174136

    +

    === next load level ===


    System Analysis Report
    =======================

    Nodes:
    ---------------------
      Node_55:
          x:    [0. 0.]
          fix:  ['ux', 'uy', 'rz']
          u:    [0. 0. 0.]
      Node_56:
          x:    [  0. 180.]
          u:    [-0.00195269 -0.05845162 -0.02403623]
      Node_57:
          x:    [  0. 360.]
          u:    [ 0.00035802 -0.10234068 -0.01990617]
      Node_58:
          x:    [  0. 540.]
          u:    [-0.00103192 -0.13142317 -0.01829479]
      Node_59:
          x:    [  0. 720.]
          u:    [ 0.00479755 -0.14562156 -0.0304816 ]
      Node_60:
          x:    [240.   0.]
          fix:  ['ux', 'uy', 'rz']
          u:    [0. 0. 0.]
      Node_61:
          x:    [240. 180.]
          u:    [-0.00054966 -0.06909143  0.00451655]
      Node_62:
          x:    [240. 360.]
          u:    [ 4.92702919e-05 -1.20884831e-01  2.89826296e-03]
      Node_63:
          x:    [240. 540.]
          u:    [-0.00019519 -0.15550221  0.00208175]
      Node_64:
          x:    [240. 720.]
          u:    [ 0.00128191 -0.17298232  0.00685415]
      Node_65:
          x:    [480.   0.]
          fix:  ['ux', 'uy', 'rz']
          u:    [0. 0. 0.]
      Node_66:
          x:    [480. 180.]
          u:    [ 0.00054966 -0.06909143 -0.00451655]
      Node_67:
          x:    [480. 360.]
          u:    [-4.92702908e-05 -1.20884831e-01 -2.89826296e-03]
      Node_68:
          x:    [480. 540.]
          u:    [ 0.00019519 -0.15550221 -0.00208175]
      Node_69:
          x:    [480. 720.]
          u:    [-0.00128191 -0.17298232 -0.00685415]
      Node_70:
          x:    [720.   0.]
          fix:  ['ux', 'uy', 'rz']
          u:    [0. 0. 0.]
      Node_71:
          x:    [720. 180.]
          u:    [ 0.00195269 -0.05845162  0.02403623]
      Node_72:
          x:    [720. 360.]
          u:    [-0.00035802 -0.10234068  0.01990617]
      Node_73:
          x:    [720. 540.]
          u:    [ 0.00103192 -0.13142317  0.01829479]
      Node_74:
          x:    [720. 720.]
          u:    [-0.00479755 -0.14562156  0.0304816 ]

    Elements:
    ---------------------
      Frame2D_57: nodes ( Node_55 Node_56 )
          material: ElasticSection
          internal forces: f0=-1412.58 V0=-28.72 M0=2190.63 fl=-1412.58 Vl=-28.72 Ml=-2981.99 Pw=0.00 Mw=0.00
      Frame2D_58: nodes ( Node_56 Node_57 )
          material: ElasticSection
          internal forces: f0=-1060.65 V0=-54.15 M0=4967.18 fl=-1060.65 Vl=-54.15 Ml=-4777.61 Pw=0.00 Mw=0.00
      Frame2D_59: nodes ( Node_57 Node_58 )
          material: ElasticSection
          internal forces: f0=-702.83 V0=-48.56 M0=4417.41 fl=-702.83 Vl=-48.56 Ml=-4323.51 Pw=0.00 Mw=0.00
      Frame2D_60: nodes ( Node_58 Node_59 )
          material: ElasticSection
          internal forces: f0=-343.13 V0=-63.72 M0=5307.41 fl=-343.13 Vl=-63.72 Ml=-6160.35 Pw=0.00 Mw=0.00
      Frame2D_61: nodes ( Node_60 Node_61 )
          material: ElasticSection
          internal forces: f0=-3339.42 V0=7.47 M0=-673.83 fl=-3339.42 Vl=7.47 Ml=668.39 Pw=0.00 Mw=0.00
      Frame2D_62: nodes ( Node_61 Node_62 )
          material: ElasticSection
          internal forces: f0=-2503.35 V0=12.97 M0=-1196.02 fl=-2503.35 Vl=12.97 Ml=1140.41 Pw=0.00 Mw=0.00
      Frame2D_63: nodes ( Node_62 Node_63 )
          material: ElasticSection
          internal forces: f0=-1673.17 V0=9.16 M0=-851.26 fl=-1673.17 Vl=9.16 Ml=797.45 Pw=0.00 Mw=0.00
      Frame2D_64: nodes ( Node_63 Node_64 )
          material: ElasticSection
          internal forces: f0=-844.87 V0=17.25 M0=-1328.12 fl=-844.87 Vl=17.25 Ml=1778.43 Pw=0.00 Mw=0.00
      Frame2D_65: nodes ( Node_65 Node_66 )
          material: ElasticSection
          internal forces: f0=-3339.42 V0=-7.47 M0=673.83 fl=-3339.42 Vl=-7.47 Ml=-668.39 Pw=0.00 Mw=0.00
      Frame2D_66: nodes ( Node_66 Node_67 )
          material: ElasticSection
          internal forces: f0=-2503.35 V0=-12.97 M0=1196.02 fl=-2503.35 Vl=-12.97 Ml=-1140.41 Pw=0.00 Mw=0.00
      Frame2D_67: nodes ( Node_67 Node_68 )
          material: ElasticSection
          internal forces: f0=-1673.17 V0=-9.16 M0=851.26 fl=-1673.17 Vl=-9.16 Ml=-797.45 Pw=0.00 Mw=0.00
      Frame2D_68: nodes ( Node_68 Node_69 )
          material: ElasticSection
          internal forces: f0=-844.87 V0=-17.25 M0=1328.12 fl=-844.87 Vl=-17.25 Ml=-1778.43 Pw=0.00 Mw=0.00
      Frame2D_69: nodes ( Node_70 Node_71 )
          material: ElasticSection
          internal forces: f0=-1412.58 V0=28.72 M0=-2190.63 fl=-1412.58 Vl=28.72 Ml=2981.99 Pw=0.00 Mw=0.00
      Frame2D_70: nodes ( Node_71 Node_72 )
          material: ElasticSection
          internal forces: f0=-1060.65 V0=54.15 M0=-4967.18 fl=-1060.65 Vl=54.15 Ml=4777.61 Pw=0.00 Mw=0.00
      Frame2D_71: nodes ( Node_72 Node_73 )
          material: ElasticSection
          internal forces: f0=-702.83 V0=48.56 M0=-4417.41 fl=-702.83 Vl=48.56 Ml=4323.51 Pw=0.00 Mw=0.00
      Frame2D_72: nodes ( Node_73 Node_74 )
          material: ElasticSection
          internal forces: f0=-343.13 V0=63.72 M0=-5307.41 fl=-343.13 Vl=63.72 Ml=6160.35 Pw=0.00 Mw=0.00
      Frame2D_73: nodes ( Node_56 Node_61 )
          material: ElasticSection
          internal forces: f0=25.43 V0=-44.07 M0=7890.83 fl=25.43 Vl=-44.07 Ml=-2686.63 Pw=-396.00 Mw=-15840.00
      Frame2D_74: nodes ( Node_61 Node_66 )
          material: ElasticSection
          internal forces: f0=19.93 V0=-0.00 M0=-822.22 fl=19.93 Vl=-0.00 Ml=-822.22 Pw=-396.00 Mw=-15840.00
      Frame2D_75: nodes ( Node_66 Node_71 )
          material: ElasticSection
          internal forces: f0=25.43 V0=44.07 M0=-2686.63 fl=25.43 Vl=44.07 Ml=7890.83 Pw=-396.00 Mw=-15840.00
      Frame2D_76: nodes ( Node_57 Node_62 )
          material: ElasticSection
          internal forces: f0=-5.60 V0=-38.17 M0=6644.98 fl=-5.60 Vl=-38.17 Ml=-2516.78 Pw=-396.00 Mw=-15840.00
      Frame2D_77: nodes ( Node_62 Node_67 )
          material: ElasticSection
          internal forces: f0=-1.79 V0=0.00 M0=-525.10 fl=-1.79 Vl=0.00 Ml=-525.10 Pw=-396.00 Mw=-15840.00
      Frame2D_78: nodes ( Node_67 Node_72 )
          material: ElasticSection
          internal forces: f0=-5.60 V0=38.17 M0=-2516.78 fl=-5.60 Vl=38.17 Ml=6644.98 Pw=-396.00 Mw=-15840.00
      Frame2D_79: nodes ( Node_58 Node_63 )
          material: ElasticSection
          internal forces: f0=15.17 V0=-36.30 M0=6209.08 fl=15.17 Vl=-36.30 Ml=-2503.48 Pw=-396.00 Mw=-15840.00
      Frame2D_80: nodes ( Node_63 Node_68 )
          material: ElasticSection
          internal forces: f0=7.08 V0=0.00 M0=-377.91 fl=7.08 Vl=0.00 Ml=-377.91 Pw=-396.00 Mw=-15840.00
      Frame2D_81: nodes ( Node_68 Node_73 )
          material: ElasticSection
          internal forces: f0=15.17 V0=36.30 M0=-2503.48 fl=15.17 Vl=36.30 Ml=6209.08 Pw=-396.00 Mw=-15840.00
      Frame2D_82: nodes ( Node_59 Node_64 )
          material: ElasticSection
          internal forces: f0=-63.72 V0=-52.87 M0=9679.65 fl=-63.72 Vl=-52.87 Ml=-3007.97 Pw=-396.00 Mw=-15840.00
      Frame2D_83: nodes ( Node_64 Node_69 )
          material: ElasticSection
          internal forces: f0=-46.47 V0=0.00 M0=-1229.55 fl=-46.47 Vl=0.00 Ml=-1229.55 Pw=-396.00 Mw=-15840.00
      Frame2D_84: nodes ( Node_69 Node_74 )
          material: ElasticSection
          internal forces: f0=-63.72 V0=52.87 M0=-3007.97 fl=-63.72 Vl=52.87 Ml=9679.65 Pw=-396.00 Mw=-15840.00






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.035 seconds)


.. _sphx_glr_download_auto_examples_frames_plot_frame04.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_frame04.py <plot_frame04.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_frame04.ipynb <plot_frame04.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
