
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/model_creation/plot_01_setup.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_model_creation_plot_01_setup.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_model_creation_plot_01_setup.py:


.. _model_creation_01:

===================================================
Tutorial 1 - Creating a Model
===================================================
This tutorial shows how to create a simple finite element model
from scratch

.. GENERATED FROM PYTHON SOURCE LINES 11-19

------------------------
The preparation stage
------------------------
Before building a model, we need to load the used components.
Every model needs one :py:class:`System` instance.  Furthermore,
we are going to use several :py:class:`Node` and :py:class:`Element` instances.

Loading those class definitions requires the following:

.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: Python


    from femedu.domain import System, Node
    from femedu.elements.linear import Truss
    from femedu.materials import ElasticSection








.. GENERATED FROM PYTHON SOURCE LINES 26-30

The first line imports the :py:class:`System` and :py:class:`Node` class definitions,
the second line imports the :py:class:`Truss` from the **linear** package, i.e., the
small deformation finite element on variational base.


.. GENERATED FROM PYTHON SOURCE LINES 32-33

Start by creating a :py:class:`System` instance.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: Python


    model = System()








.. GENERATED FROM PYTHON SOURCE LINES 37-41

The `model` object will hold all information forming your finite element model, as well as provide the interface for
analysis control, plotting, and data gathering.

Next, we are creating nodes as :py:class:`Node` objects.

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: Python


    nd0 = Node( 0.0, 0.0)
    nd1 = Node( 8.0, 6.0)
    nd2 = Node(16.0, 0.0)








.. GENERATED FROM PYTHON SOURCE LINES 47-52

It is important to understand that `nd0`, `nd1`, `nd2` are instances of :py:class:`Node` and provide
a permanent pointer to those nodes and all their information throughout the entire analysis. We will
use those pointers to collect data or make control decisions.

We also need to add those node objects to our model.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    model.addNode(nd0, nd1, nd2)








.. GENERATED FROM PYTHON SOURCE LINES 56-57

nodes can be added one at a time or, as shown above, as a group of nodes.

.. GENERATED FROM PYTHON SOURCE LINES 59-87

Every node holds information about

.. list-table::
   :widths: 25 50 25
   :header-rows: 1

   * - Type
     - Description
     - Access through
   * - Position
     - initial coordinates of the node
     - `getPos()`
   * - Displacement
     - current displacement components
     - `getDisp(['ux', ...])`
   * - Attached elements
     - Pointers to all connected elements
     - internal
   * - Available dofs
     - Union of dofs used by any of the attached elements
     - internal
   * - Index for a dof
     - Global index for locating each nodal dof in system arrays.
     - `getIdx4DOFs(dof-list)`
   * - Index for one attached element
     - Global index array for locating element-specific dofs in system arrays.
     - `getIdx4Element(elem)`


.. GENERATED FROM PYTHON SOURCE LINES 89-91

Once nodes have been created, we can create and add elements to the model.
This can be done by creating an element as

.. GENERATED FROM PYTHON SOURCE LINES 91-100

.. code-block:: Python


    # define material parameters
    params = dict(
        E = 1000.,   # Young's modulus
        A = 1.0,     # cross section area
    )

    elem0 = Truss(nd0, nd1, ElasticSection(params))








.. GENERATED FROM PYTHON SOURCE LINES 101-102

and adding that element to the model using

.. GENERATED FROM PYTHON SOURCE LINES 102-105

.. code-block:: Python


    model.addElement(elem0)








.. GENERATED FROM PYTHON SOURCE LINES 106-107

or by creating and adding elements in one single step

.. GENERATED FROM PYTHON SOURCE LINES 107-110

.. code-block:: Python


    model.addElement(Truss(nd1, nd2, ElasticSection(params)))








.. GENERATED FROM PYTHON SOURCE LINES 111-115

The first option allows us to keep `elem0` as element pointer for later access to that element.
The second option is sufficient in most cases.

|Application| also provides a short version for the :py:meth:`addElement` function in the form

.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: Python


    model += Truss(nd0, nd2, ElasticSection(params))








.. GENERATED FROM PYTHON SOURCE LINES 119-128

.. note::

   In |Application|, every material instance holds information about the current state of the material,
   including strain, stress, plastic strain, hardening parameters, and more.  Since these are private
   to any particular material point, each element requires its own material instance.

   Creating one instance of :py:meth:`AnyMaterial(params)` and handing that instance
   to the element constructor will most likely lead to a faulty model.


.. GENERATED FROM PYTHON SOURCE LINES 130-134

Geometric boundary conditions are applied at nodes.  In order to add a geometric boundary condition to a node,
we need to use the node pointer, i.e., the variable holding the :py:class:`Node` instance.

In this example, we shall model `nd0` as **fixed** and `nd2` as a **horizontal roller**.

.. GENERATED FROM PYTHON SOURCE LINES 134-138

.. code-block:: Python


    nd0.fixDOF(['ux','uy'])   # pin
    nd2.fixDOF(['uy'])        # horizontal roller








.. GENERATED FROM PYTHON SOURCE LINES 139-163

|Application| always identifies degrees of freedom (dofs) using a short name string.  Several dofs
are predefined and used by the standard elements, though user elements and user algorithms may define
additional variables as long as their respective name remains unique. Built-in standard dofs are shown
in the following table.

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Name
     - Description
   * - **ux**
     - component of displacement in the x-direction
   * - **uy**
     - component of displacement in the y-direction
   * - **uz**
     - component of displacement in the z-direction
   * - **rx**
     - component of (linearized) rotation about the x-axis
   * - **ry**
     - component of (linearized) rotation about the y-axis
   * - **rz**
     - component of (linearized) rotation about the z-axis


.. GENERATED FROM PYTHON SOURCE LINES 165-167

Now we are ready to load the model.  This example shall be limited to simple nodal loads.
For examples of more complex load patters refer to :ref:`meshing_02`

.. GENERATED FROM PYTHON SOURCE LINES 167-170

.. code-block:: Python


    nd1.addLoad([-1.0],['uy'])








.. GENERATED FROM PYTHON SOURCE LINES 171-177

We may want to review the model status before engaging in any analysis.  The easiest way is to request a
report about the current state of the model as follows.

.. warning::

   A call to `model.report()` may result in a lot of output if you are working on a large model.

.. GENERATED FROM PYTHON SOURCE LINES 177-180

.. code-block:: Python


    model.report()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System Analysis Report
    =======================

    Nodes:
    ---------------------
      Node_4844:
          x:    [0.000 0.000]
          fix:  ['ux', 'uy']
          u:    None
      Node_4845:
          x:    [8.000 6.000]
          P:    [0.000 -1.000]
          u:    None
      Node_4846:
          x:    [16.000 0.000]
          fix:  ['uy']
          u:    None

    Elements:
    ---------------------
      Truss: Node_4844 to Node_4845:
          material properties: ElasticSection(Material)({'E': 1000.0, 'A': 1.0, 'nu': 0.0, 'fy': 1e+30, 'I': 1.0})  strain:{'axial': 0.0, 'flexure': 0.0}   stress:{'axial': 0.0, 'flexure': 0.0}  
          internal force: 0.0
      Truss: Node_4845 to Node_4846:
          material properties: ElasticSection(Material)({'E': 1000.0, 'A': 1.0, 'nu': 0.0, 'fy': 1e+30, 'I': 1.0})  strain:{'axial': 0.0, 'flexure': 0.0}   stress:{'axial': 0.0, 'flexure': 0.0}  
          internal force: 0.0
      Truss: Node_4844 to Node_4846:
          material properties: ElasticSection(Material)({'E': 1000.0, 'A': 1.0, 'nu': 0.0, 'fy': 1e+30, 'I': 1.0})  strain:{'axial': 0.0, 'flexure': 0.0}   stress:{'axial': 0.0, 'flexure': 0.0}  
          internal force: 0.0





.. GENERATED FROM PYTHON SOURCE LINES 181-189

Things to note in this report:

* |Application| assigns unique names to nodes and elements.  These are mostly internal identifiers
  but may be used by the user when analyzing/debugging program output.
  **It is recommended to use your own node and element references to access node and element data.**
* Nodes always report their reference position, but will also report fixed dofs or applied
  nodal loads if either was assigned to a node.
* Once an analysis has been performed, nodes will also show their current state of displacement.

.. GENERATED FROM PYTHON SOURCE LINES 191-192

Another easy validation of your input can be obtained using the built-in system plot.

.. GENERATED FROM PYTHON SOURCE LINES 192-198

.. code-block:: Python


    #model.resetDisp()
    model.plot(factor=0.0,
               title="Tutorial 1: Undeformed System",
               show_bc=True, show_loads=True, show_reactions=False)




.. image-sg:: /auto_tutorials/model_creation/images/sphx_glr_plot_01_setup_001.png
   :alt: Tutorial 1: Undeformed System
   :srcset: /auto_tutorials/model_creation/images/sphx_glr_plot_01_setup_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 199-203

At this point we are ready for the analysis.
Since this is a linear model, we will use the default solver, which is a :py:class:`LinearSolver` object.

All we need to perform the analysis is

.. GENERATED FROM PYTHON SOURCE LINES 203-206

.. code-block:: Python


    model.solve()








.. GENERATED FROM PYTHON SOURCE LINES 207-208

At this point, we may just plot the deformed system

.. GENERATED FROM PYTHON SOURCE LINES 208-214

.. code-block:: Python


    model.plot(factor=25.0,
               title="Tutorial 1: Deformed System (factor=25.0)",
               filename="tutorial01_deformed.png",
               show_loads=True, show_reactions=True)




.. image-sg:: /auto_tutorials/model_creation/images/sphx_glr_plot_01_setup_002.png
   :alt: Tutorial 1: Deformed System (factor=25.0)
   :srcset: /auto_tutorials/model_creation/images/sphx_glr_plot_01_setup_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 215-224

.. note::

   Providing the *filename=* option will save the generated figure a file with the given name.
   The name may include a full path, specifying a destination folder and filename. If no path is
   given, the figure file will be saved to the current runtime folder.

   The image file type is determined from the extension in the *filename* option.  It is recommended
   to used ".pdf" for best quality (vector graphics for use in publications) or ".png" for web presentation.
   Avoid ".jpg" for line-graphics like this one.

.. GENERATED FROM PYTHON SOURCE LINES 224-227

.. code-block:: Python


    model.report()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    System Analysis Report
    =======================

    Nodes:
    ---------------------
      Node_4844:
          x:    [0.000 0.000]
          fix:  ['ux', 'uy']
          u:    [0.000 0.000]
      Node_4845:
          x:    [8.000 6.000]
          P:    [0.000 -1.000]
          u:    [0.005 -0.021]
      Node_4846:
          x:    [16.000 0.000]
          fix:  ['uy']
          u:    [0.011 0.000]

    Elements:
    ---------------------
      Truss: Node_4844 to Node_4845:
          material properties: ElasticSection(Material)({'E': 1000.0, 'A': 1.0, 'nu': 0.0, 'fy': 1e+30, 'I': 1.0})  strain:{'axial': np.float64(-0.0008333333333333332)}   stress:{'axial': np.float64(-0.8333333333333331), 'flexure': 0.0}  
          internal force: -0.8333333333333331
      Truss: Node_4845 to Node_4846:
          material properties: ElasticSection(Material)({'E': 1000.0, 'A': 1.0, 'nu': 0.0, 'fy': 1e+30, 'I': 1.0})  strain:{'axial': np.float64(-0.0008333333333333332)}   stress:{'axial': np.float64(-0.8333333333333331), 'flexure': 0.0}  
          internal force: -0.8333333333333331
      Truss: Node_4844 to Node_4846:
          material properties: ElasticSection(Material)({'E': 1000.0, 'A': 1.0, 'nu': 0.0, 'fy': 1e+30, 'I': 1.0})  strain:{'axial': np.float64(0.0006666666666666666)}   stress:{'axial': np.float64(0.6666666666666666), 'flexure': 0.0}  
          internal force: 0.6666666666666666





.. GENERATED FROM PYTHON SOURCE LINES 228-244

Truss, beam, and frame elements further allow for plotting of internal forces through the
`beamValuePlot(variable,factor=1.0,filename='...')` method.

Valid variables are

.. list-table::
   :widths: 25 75
   :header-rows: 0

   * - `'F'`
     - Axial force (tension positive)
   * - `'V'`
     - transverse shear force
   * - `'M'`
     - Bending moment


.. GENERATED FROM PYTHON SOURCE LINES 244-246

.. code-block:: Python


    model.beamValuePlot('F',filename='tutorial01_axial.png')



.. image-sg:: /auto_tutorials/model_creation/images/sphx_glr_plot_01_setup_003.png
   :alt: Axial Forces
   :srcset: /auto_tutorials/model_creation/images/sphx_glr_plot_01_setup_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.048 seconds)


.. _sphx_glr_download_auto_tutorials_model_creation_plot_01_setup.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_01_setup.ipynb <plot_01_setup.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_01_setup.py <plot_01_setup.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_01_setup.zip <plot_01_setup.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
